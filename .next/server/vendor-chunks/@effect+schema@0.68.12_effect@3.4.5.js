"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@effect+schema@0.68.12_effect@3.4.5";
exports.ids = ["vendor-chunks/@effect+schema@0.68.12_effect@3.4.5"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnyKeyword: () => (/* binding */ AnyKeyword),\n/* harmony export */   BatchingAnnotationId: () => (/* binding */ BatchingAnnotationId),\n/* harmony export */   BigIntKeyword: () => (/* binding */ BigIntKeyword),\n/* harmony export */   BooleanKeyword: () => (/* binding */ BooleanKeyword),\n/* harmony export */   BrandAnnotationId: () => (/* binding */ BrandAnnotationId),\n/* harmony export */   ComposeTransformation: () => (/* binding */ ComposeTransformation),\n/* harmony export */   ConcurrencyAnnotationId: () => (/* binding */ ConcurrencyAnnotationId),\n/* harmony export */   Declaration: () => (/* binding */ Declaration),\n/* harmony export */   DefaultAnnotationId: () => (/* binding */ DefaultAnnotationId),\n/* harmony export */   DescriptionAnnotationId: () => (/* binding */ DescriptionAnnotationId),\n/* harmony export */   DocumentationAnnotationId: () => (/* binding */ DocumentationAnnotationId),\n/* harmony export */   Enums: () => (/* binding */ Enums),\n/* harmony export */   ExamplesAnnotationId: () => (/* binding */ ExamplesAnnotationId),\n/* harmony export */   FinalTransformation: () => (/* binding */ FinalTransformation),\n/* harmony export */   IdentifierAnnotationId: () => (/* binding */ IdentifierAnnotationId),\n/* harmony export */   IndexSignature: () => (/* binding */ IndexSignature),\n/* harmony export */   JSONSchemaAnnotationId: () => (/* binding */ JSONSchemaAnnotationId),\n/* harmony export */   Literal: () => (/* binding */ Literal),\n/* harmony export */   MessageAnnotationId: () => (/* binding */ MessageAnnotationId),\n/* harmony export */   MissingMessageAnnotationId: () => (/* binding */ MissingMessageAnnotationId),\n/* harmony export */   NeverKeyword: () => (/* binding */ NeverKeyword),\n/* harmony export */   NumberKeyword: () => (/* binding */ NumberKeyword),\n/* harmony export */   ObjectKeyword: () => (/* binding */ ObjectKeyword),\n/* harmony export */   OptionalType: () => (/* binding */ OptionalType),\n/* harmony export */   ParseIssueTitleAnnotationId: () => (/* binding */ ParseIssueTitleAnnotationId),\n/* harmony export */   ParseOptionsAnnotationId: () => (/* binding */ ParseOptionsAnnotationId),\n/* harmony export */   PropertySignature: () => (/* binding */ PropertySignature),\n/* harmony export */   PropertySignatureTransformation: () => (/* binding */ PropertySignatureTransformation),\n/* harmony export */   Refinement: () => (/* binding */ Refinement),\n/* harmony export */   StableFilterAnnotationId: () => (/* binding */ StableFilterAnnotationId),\n/* harmony export */   StringKeyword: () => (/* binding */ StringKeyword),\n/* harmony export */   SurrogateAnnotationId: () => (/* binding */ SurrogateAnnotationId),\n/* harmony export */   Suspend: () => (/* binding */ Suspend),\n/* harmony export */   SymbolKeyword: () => (/* binding */ SymbolKeyword),\n/* harmony export */   TemplateLiteral: () => (/* binding */ TemplateLiteral),\n/* harmony export */   TemplateLiteralSpan: () => (/* binding */ TemplateLiteralSpan),\n/* harmony export */   TitleAnnotationId: () => (/* binding */ TitleAnnotationId),\n/* harmony export */   Transformation: () => (/* binding */ Transformation),\n/* harmony export */   TupleType: () => (/* binding */ TupleType),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   TypeAnnotationId: () => (/* binding */ TypeAnnotationId),\n/* harmony export */   TypeLiteral: () => (/* binding */ TypeLiteral),\n/* harmony export */   TypeLiteralTransformation: () => (/* binding */ TypeLiteralTransformation),\n/* harmony export */   UndefinedKeyword: () => (/* binding */ UndefinedKeyword),\n/* harmony export */   Union: () => (/* binding */ Union),\n/* harmony export */   UniqueSymbol: () => (/* binding */ UniqueSymbol),\n/* harmony export */   UnknownKeyword: () => (/* binding */ UnknownKeyword),\n/* harmony export */   VoidKeyword: () => (/* binding */ VoidKeyword),\n/* harmony export */   annotations: () => (/* binding */ annotations),\n/* harmony export */   anyKeyword: () => (/* binding */ anyKeyword),\n/* harmony export */   bigIntKeyword: () => (/* binding */ bigIntKeyword),\n/* harmony export */   booleanKeyword: () => (/* binding */ booleanKeyword),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   composeTransformation: () => (/* binding */ composeTransformation),\n/* harmony export */   defaultParseOption: () => (/* binding */ defaultParseOption),\n/* harmony export */   encodedAST: () => (/* binding */ encodedAST),\n/* harmony export */   encodedBoundAST: () => (/* binding */ encodedBoundAST),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getAnnotation: () => (/* binding */ getAnnotation),\n/* harmony export */   getBatchingAnnotation: () => (/* binding */ getBatchingAnnotation),\n/* harmony export */   getBrandAnnotation: () => (/* binding */ getBrandAnnotation),\n/* harmony export */   getCardinality: () => (/* binding */ getCardinality),\n/* harmony export */   getCompiler: () => (/* binding */ getCompiler),\n/* harmony export */   getConcurrencyAnnotation: () => (/* binding */ getConcurrencyAnnotation),\n/* harmony export */   getDefaultAnnotation: () => (/* binding */ getDefaultAnnotation),\n/* harmony export */   getDescriptionAnnotation: () => (/* binding */ getDescriptionAnnotation),\n/* harmony export */   getDocumentationAnnotation: () => (/* binding */ getDocumentationAnnotation),\n/* harmony export */   getExamplesAnnotation: () => (/* binding */ getExamplesAnnotation),\n/* harmony export */   getIdentifierAnnotation: () => (/* binding */ getIdentifierAnnotation),\n/* harmony export */   getJSONIdentifier: () => (/* binding */ getJSONIdentifier),\n/* harmony export */   getJSONIdentifierAnnotation: () => (/* binding */ getJSONIdentifierAnnotation),\n/* harmony export */   getJSONSchemaAnnotation: () => (/* binding */ getJSONSchemaAnnotation),\n/* harmony export */   getMessageAnnotation: () => (/* binding */ getMessageAnnotation),\n/* harmony export */   getMissingMessageAnnotation: () => (/* binding */ getMissingMessageAnnotation),\n/* harmony export */   getNumberIndexedAccess: () => (/* binding */ getNumberIndexedAccess),\n/* harmony export */   getParameterBase: () => (/* binding */ getParameterBase),\n/* harmony export */   getParseIssueTitleAnnotation: () => (/* binding */ getParseIssueTitleAnnotation),\n/* harmony export */   getParseOptionsAnnotation: () => (/* binding */ getParseOptionsAnnotation),\n/* harmony export */   getPropertyKeyIndexedAccess: () => (/* binding */ getPropertyKeyIndexedAccess),\n/* harmony export */   getPropertySignatures: () => (/* binding */ getPropertySignatures),\n/* harmony export */   getSurrogateAnnotation: () => (/* binding */ getSurrogateAnnotation),\n/* harmony export */   getTemplateLiteralRegExp: () => (/* binding */ getTemplateLiteralRegExp),\n/* harmony export */   getTitleAnnotation: () => (/* binding */ getTitleAnnotation),\n/* harmony export */   getWeight: () => (/* binding */ getWeight),\n/* harmony export */   isAnyKeyword: () => (/* binding */ isAnyKeyword),\n/* harmony export */   isBigIntKeyword: () => (/* binding */ isBigIntKeyword),\n/* harmony export */   isBooleanKeyword: () => (/* binding */ isBooleanKeyword),\n/* harmony export */   isComposeTransformation: () => (/* binding */ isComposeTransformation),\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration),\n/* harmony export */   isEnums: () => (/* binding */ isEnums),\n/* harmony export */   isFinalTransformation: () => (/* binding */ isFinalTransformation),\n/* harmony export */   isLiteral: () => (/* binding */ isLiteral),\n/* harmony export */   isMembers: () => (/* binding */ isMembers),\n/* harmony export */   isNeverKeyword: () => (/* binding */ isNeverKeyword),\n/* harmony export */   isNumberKeyword: () => (/* binding */ isNumberKeyword),\n/* harmony export */   isObjectKeyword: () => (/* binding */ isObjectKeyword),\n/* harmony export */   isParameter: () => (/* binding */ isParameter),\n/* harmony export */   isRefinement: () => (/* binding */ isRefinement),\n/* harmony export */   isStringKeyword: () => (/* binding */ isStringKeyword),\n/* harmony export */   isSuspend: () => (/* binding */ isSuspend),\n/* harmony export */   isSymbolKeyword: () => (/* binding */ isSymbolKeyword),\n/* harmony export */   isTemplateLiteral: () => (/* binding */ isTemplateLiteral),\n/* harmony export */   isTransformation: () => (/* binding */ isTransformation),\n/* harmony export */   isTupleType: () => (/* binding */ isTupleType),\n/* harmony export */   isTypeLiteral: () => (/* binding */ isTypeLiteral),\n/* harmony export */   isTypeLiteralTransformation: () => (/* binding */ isTypeLiteralTransformation),\n/* harmony export */   isUndefinedKeyword: () => (/* binding */ isUndefinedKeyword),\n/* harmony export */   isUnion: () => (/* binding */ isUnion),\n/* harmony export */   isUniqueSymbol: () => (/* binding */ isUniqueSymbol),\n/* harmony export */   isUnknownKeyword: () => (/* binding */ isUnknownKeyword),\n/* harmony export */   isVoidKeyword: () => (/* binding */ isVoidKeyword),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   mapMembers: () => (/* binding */ mapMembers),\n/* harmony export */   mutable: () => (/* binding */ mutable),\n/* harmony export */   neverKeyword: () => (/* binding */ neverKeyword),\n/* harmony export */   \"null\": () => (/* binding */ $null),\n/* harmony export */   numberKeyword: () => (/* binding */ numberKeyword),\n/* harmony export */   objectKeyword: () => (/* binding */ objectKeyword),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   orUndefined: () => (/* binding */ orUndefined),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   preserveAnnotations: () => (/* binding */ preserveAnnotations),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   rename: () => (/* binding */ rename),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   stringKeyword: () => (/* binding */ stringKeyword),\n/* harmony export */   symbolKeyword: () => (/* binding */ symbolKeyword),\n/* harmony export */   typeAST: () => (/* binding */ typeAST),\n/* harmony export */   undefinedKeyword: () => (/* binding */ undefinedKeyword),\n/* harmony export */   unify: () => (/* binding */ unify),\n/* harmony export */   unknownKeyword: () => (/* binding */ unknownKeyword),\n/* harmony export */   voidKeyword: () => (/* binding */ voidKeyword)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/GlobalValue */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var effect_Number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Number */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Number.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Order__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Order */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var effect_RegExp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/RegExp */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/RegExp.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst BrandAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Brand\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst TypeAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Type\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst MessageAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Message\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst MissingMessageAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/MissingMessage\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst IdentifierAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Identifier\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst TitleAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Title\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst DescriptionAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Description\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst ExamplesAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Examples\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst DefaultAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Default\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst JSONSchemaAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/JSONSchema\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst DocumentationAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Documentation\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst ConcurrencyAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Concurrency\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst BatchingAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Batching\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst ParseIssueTitleAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/ParseIssueTitle\");\n/**\n * @category annotations\n * @since 0.68.3\n */\nconst ParseOptionsAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/ParseOptions\");\n/** @internal */\nconst SurrogateAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Surrogate\");\n/** @internal */\nconst StableFilterAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/StableFilter\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getAnnotation = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (annotated, key) => Object.prototype.hasOwnProperty.call(annotated.annotations, key) ? effect_Option__WEBPACK_IMPORTED_MODULE_1__.some(annotated.annotations[key]) : effect_Option__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getBrandAnnotation = /*#__PURE__*/getAnnotation(BrandAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getMessageAnnotation = /*#__PURE__*/getAnnotation(MessageAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getMissingMessageAnnotation = /*#__PURE__*/getAnnotation(MissingMessageAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getTitleAnnotation = /*#__PURE__*/getAnnotation(TitleAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getIdentifierAnnotation = /*#__PURE__*/getAnnotation(IdentifierAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getDescriptionAnnotation = /*#__PURE__*/getAnnotation(DescriptionAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getExamplesAnnotation = /*#__PURE__*/getAnnotation(ExamplesAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getDefaultAnnotation = /*#__PURE__*/getAnnotation(DefaultAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getJSONSchemaAnnotation = /*#__PURE__*/getAnnotation(JSONSchemaAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getDocumentationAnnotation = /*#__PURE__*/getAnnotation(DocumentationAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getConcurrencyAnnotation = /*#__PURE__*/getAnnotation(ConcurrencyAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getBatchingAnnotation = /*#__PURE__*/getAnnotation(BatchingAnnotationId);\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst getParseIssueTitleAnnotation = /*#__PURE__*/getAnnotation(ParseIssueTitleAnnotationId);\n/**\n * @category annotations\n * @since 0.68.3\n */\nconst getParseOptionsAnnotation = /*#__PURE__*/getAnnotation(ParseOptionsAnnotationId);\n/** @internal */\nconst getSurrogateAnnotation = /*#__PURE__*/getAnnotation(SurrogateAnnotationId);\nconst getStableFilterAnnotation = /*#__PURE__*/getAnnotation(StableFilterAnnotationId);\nconst JSONIdentifierAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/JSONIdentifier\");\n/** @internal */\nconst getJSONIdentifierAnnotation = /*#__PURE__*/getAnnotation(JSONIdentifierAnnotationId);\n/**\n * @category model\n * @since 0.67.0\n */\nclass Declaration {\n  typeParameters;\n  decodeUnknown;\n  encodeUnknown;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Declaration\";\n  constructor(typeParameters, decodeUnknown, encodeUnknown, annotations = {}) {\n    this.typeParameters = typeParameters;\n    this.decodeUnknown = decodeUnknown;\n    this.encodeUnknown = encodeUnknown;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => \"<declaration schema>\");\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      typeParameters: this.typeParameters.map(ast => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst createASTGuard = tag => ast => ast._tag === tag;\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isDeclaration = /*#__PURE__*/createASTGuard(\"Declaration\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass Literal {\n  literal;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Literal\";\n  constructor(literal, annotations = {}) {\n    this.literal = literal;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown(this.literal));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      literal: effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isBigInt(this.literal) ? String(this.literal) : this.literal,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isLiteral = /*#__PURE__*/createASTGuard(\"Literal\");\nconst $null = /*#__PURE__*/new Literal(null, {\n  [IdentifierAnnotationId]: \"null\"\n});\n\n/**\n * @category model\n * @since 0.67.0\n */\nclass UniqueSymbol {\n  symbol;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"UniqueSymbol\";\n  constructor(symbol, annotations = {}) {\n    this.symbol = symbol;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown(this.symbol));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      symbol: String(this.symbol),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isUniqueSymbol = /*#__PURE__*/createASTGuard(\"UniqueSymbol\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass UndefinedKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"UndefinedKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst undefinedKeyword = /*#__PURE__*/new UndefinedKeyword({\n  [TitleAnnotationId]: \"undefined\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isUndefinedKeyword = /*#__PURE__*/createASTGuard(\"UndefinedKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass VoidKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"VoidKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst voidKeyword = /*#__PURE__*/new VoidKeyword({\n  [TitleAnnotationId]: \"void\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isVoidKeyword = /*#__PURE__*/createASTGuard(\"VoidKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass NeverKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"NeverKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst neverKeyword = /*#__PURE__*/new NeverKeyword({\n  [TitleAnnotationId]: \"never\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isNeverKeyword = /*#__PURE__*/createASTGuard(\"NeverKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass UnknownKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"UnknownKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst unknownKeyword = /*#__PURE__*/new UnknownKeyword({\n  [TitleAnnotationId]: \"unknown\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isUnknownKeyword = /*#__PURE__*/createASTGuard(\"UnknownKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass AnyKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"AnyKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst anyKeyword = /*#__PURE__*/new AnyKeyword({\n  [TitleAnnotationId]: \"any\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isAnyKeyword = /*#__PURE__*/createASTGuard(\"AnyKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass StringKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"StringKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst stringKeyword = /*#__PURE__*/new StringKeyword({\n  [TitleAnnotationId]: \"string\",\n  [DescriptionAnnotationId]: \"a string\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isStringKeyword = /*#__PURE__*/createASTGuard(\"StringKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass NumberKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"NumberKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst numberKeyword = /*#__PURE__*/new NumberKeyword({\n  [TitleAnnotationId]: \"number\",\n  [DescriptionAnnotationId]: \"a number\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isNumberKeyword = /*#__PURE__*/createASTGuard(\"NumberKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass BooleanKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"BooleanKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst booleanKeyword = /*#__PURE__*/new BooleanKeyword({\n  [TitleAnnotationId]: \"boolean\",\n  [DescriptionAnnotationId]: \"a boolean\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isBooleanKeyword = /*#__PURE__*/createASTGuard(\"BooleanKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass BigIntKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"BigIntKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst bigIntKeyword = /*#__PURE__*/new BigIntKeyword({\n  [TitleAnnotationId]: \"bigint\",\n  [DescriptionAnnotationId]: \"a bigint\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isBigIntKeyword = /*#__PURE__*/createASTGuard(\"BigIntKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass SymbolKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"SymbolKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst symbolKeyword = /*#__PURE__*/new SymbolKeyword({\n  [TitleAnnotationId]: \"symbol\",\n  [DescriptionAnnotationId]: \"a symbol\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isSymbolKeyword = /*#__PURE__*/createASTGuard(\"SymbolKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass ObjectKeyword {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"ObjectKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return formatKeyword(this);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst objectKeyword = /*#__PURE__*/new ObjectKeyword({\n  [IdentifierAnnotationId]: \"object\",\n  [TitleAnnotationId]: \"object\",\n  [DescriptionAnnotationId]: \"an object in the TypeScript meaning, i.e. the `object` type\"\n});\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isObjectKeyword = /*#__PURE__*/createASTGuard(\"ObjectKeyword\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass Enums {\n  enums;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Enums\";\n  constructor(enums, annotations = {}) {\n    this.enums = enums;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => `<enum ${this.enums.length} value(s): ${this.enums.map((_, value) => JSON.stringify(value)).join(\" | \")}>`);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      enums: this.enums,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isEnums = /*#__PURE__*/createASTGuard(\"Enums\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass TemplateLiteralSpan {\n  type;\n  literal;\n  constructor(type, literal) {\n    this.type = type;\n    this.literal = literal;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    switch (this.type._tag) {\n      case \"StringKeyword\":\n        return \"${string}\";\n      case \"NumberKeyword\":\n        return \"${number}\";\n    }\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      type: this.type.toJSON(),\n      literal: this.literal\n    };\n  }\n}\n/**\n * @category model\n * @since 0.67.0\n */\nclass TemplateLiteral {\n  head;\n  spans;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"TemplateLiteral\";\n  constructor(head, spans, annotations = {}) {\n    this.head = head;\n    this.spans = spans;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => formatTemplateLiteral(this));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      head: this.head,\n      spans: this.spans.map(span => span.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTemplateLiteral = ast => \"`\" + ast.head + ast.spans.map(span => String(span) + span.literal).join(\"\") + \"`\";\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isTemplateLiteral = /*#__PURE__*/createASTGuard(\"TemplateLiteral\");\n/**\n * @category model\n * @since 0.68.0\n */\nclass Type {\n  type;\n  annotations;\n  constructor(type, annotations = {}) {\n    this.type = type;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.68.0\n   */\n  toJSON() {\n    return {\n      type: this.type.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n  /**\n   * @since 0.68.0\n   */\n  toString() {\n    return String(this.type);\n  }\n}\n/**\n * @category model\n * @since 0.68.0\n */\nclass OptionalType extends Type {\n  isOptional;\n  constructor(type, isOptional, annotations = {}) {\n    super(type, annotations);\n    this.isOptional = isOptional;\n  }\n  /**\n   * @since 0.68.0\n   */\n  toJSON() {\n    return {\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n  /**\n   * @since 0.68.0\n   */\n  toString() {\n    return String(this.type) + (this.isOptional ? \"?\" : \"\");\n  }\n}\nconst getRestASTs = rest => rest.map(annotatedAST => annotatedAST.type);\n/**\n * @category model\n * @since 0.67.0\n */\nclass TupleType {\n  elements;\n  rest;\n  isReadonly;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"TupleType\";\n  constructor(elements, rest, isReadonly, annotations = {}) {\n    this.elements = elements;\n    this.rest = rest;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n    let hasOptionalElement = false;\n    let hasIllegalRequiredElement = false;\n    for (const e of elements) {\n      if (e.isOptional) {\n        hasOptionalElement = true;\n      } else if (hasOptionalElement) {\n        hasIllegalRequiredElement = true;\n        break;\n      }\n    }\n    if (hasIllegalRequiredElement || hasOptionalElement && rest.length > 1) {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTRequiredElementFollowinAnOptionalElementErrorMessage);\n    }\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => formatTuple(this));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      elements: this.elements.map(e => e.toJSON()),\n      rest: this.rest.map(ast => ast.toJSON()),\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTuple = ast => {\n  const formattedElements = ast.elements.map(String).join(\", \");\n  return effect_Array__WEBPACK_IMPORTED_MODULE_5__.matchLeft(ast.rest, {\n    onEmpty: () => `readonly [${formattedElements}]`,\n    onNonEmpty: (head, tail) => {\n      const formattedHead = String(head);\n      const wrappedHead = formattedHead.includes(\" | \") ? `(${formattedHead})` : formattedHead;\n      if (tail.length > 0) {\n        const formattedTail = tail.map(String).join(\", \");\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[], ${formattedTail}]`;\n        } else {\n          return `readonly [...${wrappedHead}[], ${formattedTail}]`;\n        }\n      } else {\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[]]`;\n        } else {\n          return `ReadonlyArray<${formattedHead}>`;\n        }\n      }\n    }\n  });\n};\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isTupleType = /*#__PURE__*/createASTGuard(\"TupleType\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass PropertySignature extends OptionalType {\n  name;\n  isReadonly;\n  constructor(name, type, isOptional, isReadonly, annotations) {\n    super(type, isOptional, annotations);\n    this.name = name;\n    this.isReadonly = isReadonly;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      name: String(this.name),\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @since 0.67.0\n */\nconst isParameter = ast => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return true;\n    case \"Refinement\":\n      return isParameter(ast.from);\n  }\n  return false;\n};\n/**\n * @category model\n * @since 0.67.0\n */\nclass IndexSignature {\n  type;\n  isReadonly;\n  /**\n   * @since 0.67.0\n   */\n  parameter;\n  constructor(parameter, type, isReadonly) {\n    this.type = type;\n    this.isReadonly = isReadonly;\n    if (isParameter(parameter)) {\n      this.parameter = parameter;\n    } else {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTIndexSignatureParameterErrorMessage);\n    }\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      parameter: this.parameter.toJSON(),\n      type: this.type.toJSON(),\n      isReadonly: this.isReadonly\n    };\n  }\n}\n/**\n * @category model\n * @since 0.67.0\n */\nclass TypeLiteral {\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"TypeLiteral\";\n  /**\n   * @since 0.67.0\n   */\n  propertySignatures;\n  /**\n   * @since 0.67.0\n   */\n  indexSignatures;\n  constructor(propertySignatures, indexSignatures, annotations = {}) {\n    this.annotations = annotations;\n    // check for duplicate property signatures\n    const keys = {};\n    for (let i = 0; i < propertySignatures.length; i++) {\n      const name = propertySignatures[i].name;\n      if (Object.prototype.hasOwnProperty.call(keys, name)) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTDuplicatePropertySignatureErrorMessage(name));\n      }\n      keys[name] = null;\n    }\n    // check for duplicate index signatures\n    const parameters = {\n      string: false,\n      symbol: false\n    };\n    for (let i = 0; i < indexSignatures.length; i++) {\n      const parameter = getParameterBase(indexSignatures[i].parameter);\n      if (isStringKeyword(parameter)) {\n        if (parameters.string) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTDuplicateIndexSignatureErrorMessage(\"string\"));\n        }\n        parameters.string = true;\n      } else if (isSymbolKeyword(parameter)) {\n        if (parameters.symbol) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTDuplicateIndexSignatureErrorMessage(\"symbol\"));\n        }\n        parameters.symbol = true;\n      }\n    }\n    this.propertySignatures = sortPropertySignatures(propertySignatures);\n    this.indexSignatures = sortIndexSignatures(indexSignatures);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => formatTypeLiteral(this));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      propertySignatures: this.propertySignatures.map(ps => ps.toJSON()),\n      indexSignatures: this.indexSignatures.map(ps => ps.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTypeLiteral = ast => {\n  const formattedPropertySignatures = ast.propertySignatures.map(ps => (ps.isReadonly ? \"readonly \" : \"\") + String(ps.name) + (ps.isOptional ? \"?\" : \"\") + \": \" + ps.type).join(\"; \");\n  if (ast.indexSignatures.length > 0) {\n    const formattedIndexSignatures = ast.indexSignatures.map(is => (is.isReadonly ? \"readonly \" : \"\") + `[x: ${getParameterBase(is.parameter)}]: ${is.type}`).join(\"; \");\n    if (ast.propertySignatures.length > 0) {\n      return `{ ${formattedPropertySignatures}; ${formattedIndexSignatures} }`;\n    } else {\n      return `{ ${formattedIndexSignatures} }`;\n    }\n  } else {\n    if (ast.propertySignatures.length > 0) {\n      return `{ ${formattedPropertySignatures} }`;\n    } else {\n      return \"{}\";\n    }\n  }\n};\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isTypeLiteral = /*#__PURE__*/createASTGuard(\"TypeLiteral\");\nconst removeNevers = candidates => candidates.filter(ast => !(ast === neverKeyword));\nconst sortCandidates = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, ast => {\n  switch (ast._tag) {\n    case \"AnyKeyword\":\n      return 0;\n    case \"UnknownKeyword\":\n      return 1;\n    case \"ObjectKeyword\":\n      return 2;\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n      return 3;\n  }\n  return 4;\n}));\nconst literalMap = {\n  string: \"StringKeyword\",\n  number: \"NumberKeyword\",\n  boolean: \"BooleanKeyword\",\n  bigint: \"BigIntKeyword\"\n};\n/** @internal */\nconst flatten = candidates => effect_Array__WEBPACK_IMPORTED_MODULE_5__.flatMap(candidates, ast => isUnion(ast) ? flatten(ast.types) : [ast]);\n/** @internal */\nconst unify = candidates => {\n  const cs = sortCandidates(candidates);\n  const out = [];\n  const uniques = {};\n  const literals = [];\n  for (const ast of cs) {\n    switch (ast._tag) {\n      case \"NeverKeyword\":\n        break;\n      case \"AnyKeyword\":\n        return [anyKeyword];\n      case \"UnknownKeyword\":\n        return [unknownKeyword];\n      // uniques\n      case \"ObjectKeyword\":\n      case \"UndefinedKeyword\":\n      case \"VoidKeyword\":\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\":\n        {\n          if (!uniques[ast._tag]) {\n            uniques[ast._tag] = ast;\n            out.push(ast);\n          }\n          break;\n        }\n      case \"Literal\":\n        {\n          const type = typeof ast.literal;\n          switch (type) {\n            case \"string\":\n            case \"number\":\n            case \"bigint\":\n            case \"boolean\":\n              {\n                const _tag = literalMap[type];\n                if (!uniques[_tag] && !literals.includes(ast.literal)) {\n                  literals.push(ast.literal);\n                  out.push(ast);\n                }\n                break;\n              }\n            // null\n            case \"object\":\n              {\n                if (!literals.includes(ast.literal)) {\n                  literals.push(ast.literal);\n                  out.push(ast);\n                }\n                break;\n              }\n          }\n          break;\n        }\n      case \"UniqueSymbol\":\n        {\n          if (!uniques[\"SymbolKeyword\"] && !literals.includes(ast.symbol)) {\n            literals.push(ast.symbol);\n            out.push(ast);\n          }\n          break;\n        }\n      case \"TupleType\":\n        {\n          if (!uniques[\"ObjectKeyword\"]) {\n            out.push(ast);\n          }\n          break;\n        }\n      case \"TypeLiteral\":\n        {\n          if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n            if (!uniques[\"{}\"]) {\n              uniques[\"{}\"] = ast;\n              out.push(ast);\n            }\n          } else if (!uniques[\"ObjectKeyword\"]) {\n            out.push(ast);\n          }\n          break;\n        }\n      default:\n        out.push(ast);\n    }\n  }\n  return out;\n};\n/**\n * @category model\n * @since 0.67.0\n */\nclass Union {\n  types;\n  annotations;\n  static make = (candidates, annotations) => {\n    const types = [];\n    const memo = new Set();\n    for (let i = 0; i < candidates.length; i++) {\n      const ast = candidates[i];\n      if (ast === neverKeyword || memo.has(ast)) {\n        continue;\n      }\n      memo.add(ast);\n      types.push(ast);\n    }\n    return Union.union(types, annotations);\n  };\n  /** @internal */\n  static members = (candidates, annotations) => {\n    return Union.union(removeNevers(candidates), annotations);\n  };\n  /** @internal */\n  static unify = (candidates, annotations) => {\n    return Union.union(unify(flatten(candidates)), annotations);\n  };\n  /** @internal */\n  static union = (types, annotations) => {\n    return isMembers(types) ? new Union(types, annotations) : types.length === 1 ? types[0] : neverKeyword;\n  };\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Union\";\n  constructor(types, annotations = {}) {\n    this.types = types;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => this.types.map(String).join(\" | \"));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      types: this.types.map(ast => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/** @internal */\nconst mapMembers = (members, f) => members.map(f);\n/** @internal */\nconst isMembers = as => as.length > 1;\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isUnion = /*#__PURE__*/createASTGuard(\"Union\");\nconst toJSONMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/AST/toJSONMemoMap\"), () => new WeakMap());\n/**\n * @category model\n * @since 0.67.0\n */\nclass Suspend {\n  f;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Suspend\";\n  constructor(f, annotations = {}) {\n    this.f = f;\n    this.annotations = annotations;\n    this.f = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.memoizeThunk(f);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return getExpected(this).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => effect_Option__WEBPACK_IMPORTED_MODULE_1__.flatMap(effect_Option__WEBPACK_IMPORTED_MODULE_1__.liftThrowable(this.f)(), ast => getExpected(ast))), effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(() => \"<suspended schema>\"));\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    const ast = this.f();\n    let out = toJSONMemoMap.get(ast);\n    if (out) {\n      return out;\n    }\n    toJSONMemoMap.set(ast, {\n      _tag: this._tag\n    });\n    out = {\n      _tag: this._tag,\n      ast: ast.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n    toJSONMemoMap.set(ast, out);\n    return out;\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isSuspend = /*#__PURE__*/createASTGuard(\"Suspend\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass Refinement {\n  from;\n  filter;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Refinement\";\n  constructor(from, filter, annotations = {}) {\n    this.from = from;\n    this.filter = filter;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => `{ ${this.from} | filter }`);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isRefinement = /*#__PURE__*/createASTGuard(\"Refinement\");\n/**\n * @since 0.67.0\n */\nconst defaultParseOption = {};\n/**\n * @category model\n * @since 0.67.0\n */\nclass Transformation {\n  from;\n  to;\n  transformation;\n  annotations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Transformation\";\n  constructor(from, to, transformation, annotations = {}) {\n    this.from = from;\n    this.to = to;\n    this.transformation = transformation;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this), () => `(${String(this.from)} <-> ${String(this.to)})`);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      to: this.to.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isTransformation = /*#__PURE__*/createASTGuard(\"Transformation\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass FinalTransformation {\n  decode;\n  encode;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"FinalTransformation\";\n  constructor(decode, encode) {\n    this.decode = decode;\n    this.encode = encode;\n  }\n}\nconst createTransformationGuard = tag => ast => ast._tag === tag;\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isFinalTransformation = /*#__PURE__*/createTransformationGuard(\"FinalTransformation\");\n/**\n * @category model\n * @since 0.67.0\n */\nclass ComposeTransformation {\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"ComposeTransformation\";\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst composeTransformation = /*#__PURE__*/new ComposeTransformation();\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isComposeTransformation = /*#__PURE__*/createTransformationGuard(\"ComposeTransformation\");\n/**\n * Represents a `PropertySignature -> PropertySignature` transformation\n *\n * The semantic of `decode` is:\n * - `none()` represents the absence of the key/value pair\n * - `some(value)` represents the presence of the key/value pair\n *\n * The semantic of `encode` is:\n * - `none()` you don't want to output the key/value pair\n * - `some(value)` you want to output the key/value pair\n *\n * @category model\n * @since 0.67.0\n */\nclass PropertySignatureTransformation {\n  from;\n  to;\n  decode;\n  encode;\n  constructor(from, to, decode, encode) {\n    this.from = from;\n    this.to = to;\n    this.decode = decode;\n    this.encode = encode;\n  }\n}\nconst isRenamingPropertySignatureTransformation = t => t.decode === effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity && t.encode === effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity;\n/**\n * @category model\n * @since 0.67.0\n */\nclass TypeLiteralTransformation {\n  propertySignatureTransformations;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"TypeLiteralTransformation\";\n  constructor(propertySignatureTransformations) {\n    this.propertySignatureTransformations = propertySignatureTransformations;\n    // check for duplicate property signature transformations\n    const fromKeys = {};\n    const toKeys = {};\n    for (const pst of propertySignatureTransformations) {\n      const from = pst.from;\n      if (fromKeys[from]) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTDuplicatePropertySignatureTransformationErrorMessage(from));\n      }\n      fromKeys[from] = true;\n      const to = pst.to;\n      if (toKeys[to]) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTDuplicatePropertySignatureTransformationErrorMessage(to));\n      }\n      toKeys[to] = true;\n    }\n  }\n}\n/**\n * @category guards\n * @since 0.67.0\n */\nconst isTypeLiteralTransformation = /*#__PURE__*/createTransformationGuard(\"TypeLiteralTransformation\");\n// -------------------------------------------------------------------------------------\n// API\n// -------------------------------------------------------------------------------------\n/**\n * Adds a group of annotations, potentially overwriting existing annotations.\n *\n * @since 0.67.0\n */\nconst annotations = (ast, annotations) => {\n  const d = Object.getOwnPropertyDescriptors(ast);\n  d.annotations.value = {\n    ...ast.annotations,\n    ...annotations\n  };\n  return Object.create(Object.getPrototypeOf(ast), d);\n};\n/**\n * Equivalent at runtime to the TypeScript type-level `keyof` operator.\n *\n * @since 0.67.0\n */\nconst keyof = ast => Union.unify(_keyof(ast));\nconst STRING_KEYWORD_PATTERN = \".*\";\nconst NUMBER_KEYWORD_PATTERN = \"[+-]?\\\\d*\\\\.?\\\\d+(?:[Ee][+-]?\\\\d+)?\";\n/**\n * @since 0.67.0\n */\nconst getTemplateLiteralRegExp = ast => {\n  let pattern = `^${effect_RegExp__WEBPACK_IMPORTED_MODULE_9__.escape(ast.head)}`;\n  for (const span of ast.spans) {\n    if (isStringKeyword(span.type)) {\n      pattern += STRING_KEYWORD_PATTERN;\n    } else if (isNumberKeyword(span.type)) {\n      pattern += NUMBER_KEYWORD_PATTERN;\n    }\n    pattern += effect_RegExp__WEBPACK_IMPORTED_MODULE_9__.escape(span.literal);\n  }\n  pattern += \"$\";\n  return new RegExp(pattern);\n};\n/**\n * @since 0.67.0\n */\nconst getPropertySignatures = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertySignatures(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.slice();\n    case \"Suspend\":\n      return getPropertySignatures(ast.f());\n  }\n  return getPropertyKeys(ast).map(name => getPropertyKeyIndexedAccess(ast, name));\n};\n/** @internal */\nconst getNumberIndexedAccess = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      {\n        let hasOptional = false;\n        let out = [];\n        for (const e of ast.elements) {\n          if (e.isOptional) {\n            hasOptional = true;\n          }\n          out.push(e.type);\n        }\n        if (hasOptional) {\n          out.push(undefinedKeyword);\n        }\n        out = out.concat(getRestASTs(ast.rest));\n        return Union.make(out);\n      }\n    case \"Refinement\":\n      return getNumberIndexedAccess(ast.from);\n    case \"Union\":\n      return Union.make(ast.types.map(getNumberIndexedAccess));\n    case \"Suspend\":\n      return getNumberIndexedAccess(ast.f());\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n};\n/** @internal */\nconst getPropertyKeyIndexedAccess = (ast, name) => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertyKeyIndexedAccess(annotation.value, name);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      {\n        const ops = effect_Array__WEBPACK_IMPORTED_MODULE_5__.findFirst(ast.propertySignatures, ps => ps.name === name);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(ops)) {\n          return ops.value;\n        } else {\n          if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(name)) {\n            for (const is of ast.indexSignatures) {\n              const parameterBase = getParameterBase(is.parameter);\n              switch (parameterBase._tag) {\n                case \"TemplateLiteral\":\n                  {\n                    const regex = getTemplateLiteralRegExp(parameterBase);\n                    if (regex.test(name)) {\n                      return new PropertySignature(name, is.type, false, true);\n                    }\n                    break;\n                  }\n                case \"StringKeyword\":\n                  return new PropertySignature(name, is.type, false, true);\n              }\n            }\n          } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isSymbol(name)) {\n            for (const is of ast.indexSignatures) {\n              const parameterBase = getParameterBase(is.parameter);\n              if (isSymbolKeyword(parameterBase)) {\n                return new PropertySignature(name, is.type, false, true);\n              }\n            }\n          }\n        }\n        break;\n      }\n    case \"Union\":\n      return new PropertySignature(name, Union.make(ast.types.map(ast => getPropertyKeyIndexedAccess(ast, name).type)), false, true);\n    case \"Suspend\":\n      return getPropertyKeyIndexedAccess(ast.f(), name);\n  }\n  return new PropertySignature(name, neverKeyword, false, true);\n};\nconst getPropertyKeys = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertyKeys(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map(ps => ps.name);\n    case \"Suspend\":\n      return getPropertyKeys(ast.f());\n    case \"Union\":\n      return ast.types.slice(1).reduce((out, ast) => effect_Array__WEBPACK_IMPORTED_MODULE_5__.intersection(out, getPropertyKeys(ast)), getPropertyKeys(ast.types[0]));\n    case \"Transformation\":\n      return getPropertyKeys(ast.to);\n  }\n  return [];\n};\n/** @internal */\nconst record = (key, value) => {\n  const propertySignatures = [];\n  const indexSignatures = [];\n  const go = key => {\n    switch (key._tag) {\n      case \"NeverKeyword\":\n        break;\n      case \"StringKeyword\":\n      case \"SymbolKeyword\":\n      case \"TemplateLiteral\":\n      case \"Refinement\":\n        indexSignatures.push(new IndexSignature(key, value, true));\n        break;\n      case \"Literal\":\n        if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(key.literal) || effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isNumber(key.literal)) {\n          propertySignatures.push(new PropertySignature(key.literal, value, false, true));\n        } else {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedLiteral(key.literal));\n        }\n        break;\n      case \"Enums\":\n        {\n          for (const [_, name] of key.enums) {\n            propertySignatures.push(new PropertySignature(name, value, false, true));\n          }\n          break;\n        }\n      case \"UniqueSymbol\":\n        propertySignatures.push(new PropertySignature(key.symbol, value, false, true));\n        break;\n      case \"Union\":\n        key.types.forEach(go);\n        break;\n      default:\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedKeySchema(key));\n    }\n  };\n  go(key);\n  return {\n    propertySignatures,\n    indexSignatures\n  };\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Pick`.\n *\n * @since 0.67.0\n */\nconst pick = (ast, keys) => {\n  if (isTransformation(ast)) {\n    switch (ast.transformation._tag) {\n      case \"ComposeTransformation\":\n        return new Transformation(pick(ast.from, keys), pick(ast.to, keys), composeTransformation);\n      case \"TypeLiteralTransformation\":\n        {\n          const ts = [];\n          const fromKeys = [];\n          for (const k of keys) {\n            const t = ast.transformation.propertySignatureTransformations.find(t => t.to === k);\n            if (t) {\n              ts.push(t);\n              fromKeys.push(t.from);\n            } else {\n              fromKeys.push(k);\n            }\n          }\n          return effect_Array__WEBPACK_IMPORTED_MODULE_5__.isNonEmptyReadonlyArray(ts) ? new Transformation(pick(ast.from, fromKeys), pick(ast.to, keys), new TypeLiteralTransformation(ts)) : pick(ast.from, fromKeys);\n        }\n      case \"FinalTransformation\":\n        {\n          const annotation = getSurrogateAnnotation(ast);\n          if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n            return pick(annotation.value, keys);\n          }\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n        }\n    }\n  }\n  return new TypeLiteral(keys.map(key => getPropertyKeyIndexedAccess(ast, key)), []);\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Omit`.\n *\n * @since 0.67.0\n */\nconst omit = (ast, keys) => pick(ast, getPropertyKeys(ast).filter(name => !keys.includes(name)));\n/** @internal */\nconst orUndefined = ast => Union.make([ast, undefinedKeyword]);\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Partial`.\n *\n * @since 0.67.0\n */\nconst partial = (ast, options) => {\n  const exact = options?.exact === true;\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(ast.elements.map(e => new OptionalType(exact ? e.type : orUndefined(e.type), true)), effect_Array__WEBPACK_IMPORTED_MODULE_5__.match(ast.rest, {\n        onEmpty: () => ast.rest,\n        onNonEmpty: rest => [new Type(Union.make([...getRestASTs(rest), undefinedKeyword]))]\n      }), ast.isReadonly);\n    case \"TypeLiteral\":\n      return new TypeLiteral(ast.propertySignatures.map(ps => new PropertySignature(ps.name, exact ? ps.type : orUndefined(ps.type), true, ps.isReadonly, ps.annotations)), ast.indexSignatures.map(is => new IndexSignature(is.parameter, orUndefined(is.type), is.isReadonly)));\n    case \"Union\":\n      return Union.make(ast.types.map(member => partial(member, options)));\n    case \"Suspend\":\n      return new Suspend(() => partial(ast.f(), options));\n    case \"Declaration\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n    case \"Refinement\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n    case \"Transformation\":\n      {\n        if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {\n          return new Transformation(partial(ast.from, options), partial(ast.to, options), ast.transformation);\n        }\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n      }\n  }\n  return ast;\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Required`.\n *\n * @since 0.67.0\n */\nconst required = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(ast.elements.map(e => new OptionalType(e.type, false)), ast.rest, ast.isReadonly);\n    case \"TypeLiteral\":\n      return new TypeLiteral(ast.propertySignatures.map(f => new PropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)), ast.indexSignatures);\n    case \"Union\":\n      return Union.make(ast.types.map(member => required(member)));\n    case \"Suspend\":\n      return new Suspend(() => required(ast.f()));\n    case \"Declaration\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n    case \"Refinement\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n    case \"Transformation\":\n      {\n        if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {\n          return new Transformation(required(ast.from), required(ast.to), ast.transformation);\n        }\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n      }\n  }\n  return ast;\n};\n/**\n * Creates a new AST with shallow mutability applied to its properties.\n *\n * @param ast - The original AST to make properties mutable (shallowly).\n *\n * @since 0.67.0\n */\nconst mutable = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return ast.isReadonly === false ? ast : new TupleType(ast.elements, ast.rest, false, ast.annotations);\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, ps => ps.isReadonly === false ? ps : new PropertySignature(ps.name, ps.type, ps.isOptional, false, ps.annotations));\n        const indexSignatures = changeMap(ast.indexSignatures, is => is.isReadonly === false ? is : new IndexSignature(is.parameter, is.type, false));\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, mutable);\n        return types === ast.types ? ast : Union.make(types, ast.annotations);\n      }\n    case \"Suspend\":\n      return new Suspend(() => mutable(ast.f()), ast.annotations);\n    case \"Refinement\":\n      {\n        const from = mutable(ast.from);\n        return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);\n      }\n    case \"Transformation\":\n      {\n        const from = mutable(ast.from);\n        const to = mutable(ast.to);\n        return from === ast.from && to === ast.to ? ast : new Transformation(from, to, ast.transformation, ast.annotations);\n      }\n  }\n  return ast;\n};\n/**\n * @since 0.67.0\n */\nconst getCompiler = match => {\n  const compile = (ast, path) => match[ast._tag](ast, compile, path);\n  return compile;\n};\n/**\n * @since 0.67.0\n */\nconst typeAST = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const typeParameters = changeMap(ast.typeParameters, typeAST);\n        return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);\n      }\n    case \"TupleType\":\n      {\n        const elements = changeMap(ast.elements, e => {\n          const type = typeAST(e.type);\n          return type === e.type ? e : new OptionalType(type, e.isOptional);\n        });\n        const restASTs = getRestASTs(ast.rest);\n        const rest = changeMap(restASTs, typeAST);\n        return elements === ast.elements && rest === restASTs ? ast : new TupleType(elements, rest.map(type => new Type(type)), ast.isReadonly, ast.annotations);\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, p => {\n          const type = typeAST(p.type);\n          return type === p.type ? p : new PropertySignature(p.name, type, p.isOptional, p.isReadonly);\n        });\n        const indexSignatures = changeMap(ast.indexSignatures, is => {\n          const type = typeAST(is.type);\n          return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);\n        });\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, typeAST);\n        return types === ast.types ? ast : Union.make(types, ast.annotations);\n      }\n    case \"Suspend\":\n      return new Suspend(() => typeAST(ast.f()), ast.annotations);\n    case \"Refinement\":\n      {\n        const from = typeAST(ast.from);\n        return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);\n      }\n    case \"Transformation\":\n      return typeAST(ast.to);\n  }\n  return ast;\n};\n/** @internal */\nconst preserveAnnotations = annotationIds => annotated => {\n  let out = undefined;\n  for (const id of annotationIds) {\n    if (Object.prototype.hasOwnProperty.call(annotated.annotations, id)) {\n      if (out === undefined) {\n        out = {};\n      }\n      out[id] = annotated.annotations[id];\n    }\n  }\n  return out;\n};\n/** @internal */\nconst getJSONIdentifier = annotated => effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(getJSONIdentifierAnnotation(annotated), () => getIdentifierAnnotation(annotated));\n// To generate a JSON Schema from a recursive schema, an `identifier` annotation\n// is required. So, when we calculate the encodedAST, we need to preserve the\n// annotation in the form of an internal custom annotation that acts as a\n// surrogate for the identifier, which the JSON Schema compiler can then read.\nconst createJSONIdentifierAnnotation = annotated => effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getJSONIdentifier(annotated), {\n  onNone: () => undefined,\n  onSome: identifier => ({\n    [JSONIdentifierAnnotationId]: identifier\n  })\n});\nfunction changeMap(as, f) {\n  let changed = false;\n  const out = effect_Array__WEBPACK_IMPORTED_MODULE_5__.allocate(as.length);\n  for (let i = 0; i < as.length; i++) {\n    const a = as[i];\n    const fa = f(a);\n    if (fa !== a) {\n      changed = true;\n    }\n    out[i] = fa;\n  }\n  return changed ? out : as;\n}\nconst encodedAST_ = (ast, isBound) => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const typeParameters = changeMap(ast.typeParameters, ast => encodedAST_(ast, isBound));\n        return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);\n      }\n    case \"TupleType\":\n      {\n        const elements = changeMap(ast.elements, e => {\n          const type = encodedAST_(e.type, isBound);\n          return type === e.type ? e : new OptionalType(type, e.isOptional);\n        });\n        const restASTs = getRestASTs(ast.rest);\n        const rest = changeMap(restASTs, ast => encodedAST_(ast, isBound));\n        return elements === ast.elements && rest === restASTs ? ast : new TupleType(elements, rest.map(ast => new Type(ast)), ast.isReadonly, createJSONIdentifierAnnotation(ast));\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, ps => {\n          const type = encodedAST_(ps.type, isBound);\n          return type === ps.type ? ps : new PropertySignature(ps.name, type, ps.isOptional, ps.isReadonly);\n        });\n        const indexSignatures = changeMap(ast.indexSignatures, is => {\n          const type = encodedAST_(is.type, isBound);\n          return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);\n        });\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, createJSONIdentifierAnnotation(ast));\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, ast => encodedAST_(ast, isBound));\n        return types === ast.types ? ast : Union.make(types, createJSONIdentifierAnnotation(ast));\n      }\n    case \"Suspend\":\n      return new Suspend(() => encodedAST_(ast.f(), isBound), createJSONIdentifierAnnotation(ast));\n    case \"Refinement\":\n      {\n        const from = encodedAST_(ast.from, isBound);\n        if (isBound) {\n          if (from === ast.from) {\n            return ast;\n          }\n          if (!isTransformation(ast.from)) {\n            const annotations = getStableFilterAnnotation(ast);\n            if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotations) && annotations.value === true) {\n              return new Refinement(from, ast.filter);\n            }\n          }\n        }\n        return from;\n      }\n    case \"Transformation\":\n      return encodedAST_(ast.from, isBound);\n  }\n  return ast;\n};\n/**\n * @since 0.67.0\n */\nconst encodedAST = ast => encodedAST_(ast, false);\n/**\n * @since 0.67.0\n */\nconst encodedBoundAST = ast => encodedAST_(ast, true);\nconst toJSONAnnotations = annotations => {\n  const out = {};\n  for (const k of Object.getOwnPropertySymbols(annotations)) {\n    out[String(k)] = annotations[k];\n  }\n  return out;\n};\n/** @internal */\nconst getCardinality = ast => {\n  switch (ast._tag) {\n    case \"NeverKeyword\":\n      return 0;\n    case \"Literal\":\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"UniqueSymbol\":\n      return 1;\n    case \"BooleanKeyword\":\n      return 2;\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n      return 3;\n    case \"ObjectKeyword\":\n      return 5;\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return 6;\n    default:\n      return 4;\n  }\n};\nconst sortPropertySignatures = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, ps => getCardinality(ps.type)));\nconst sortIndexSignatures = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, is => {\n  switch (getParameterBase(is.parameter)._tag) {\n    case \"StringKeyword\":\n      return 2;\n    case \"SymbolKeyword\":\n      return 3;\n    case \"TemplateLiteral\":\n      return 1;\n  }\n}));\nconst WeightOrder = /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.tuple(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order);\nconst maxWeight = /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.max(WeightOrder);\nconst emptyWeight = [0, 0, 0];\nconst maxWeightAll = weights => weights.reduce(maxWeight, emptyWeight);\n/** @internal */\nconst getWeight = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      {\n        return [2, ast.elements.length, ast.rest.length];\n      }\n    case \"TypeLiteral\":\n      {\n        const y = ast.propertySignatures.length;\n        const z = ast.indexSignatures.length;\n        return y + z === 0 ? [-4, 0, 0] : [4, y, z];\n      }\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          const [_, y, z] = getWeight(annotation.value);\n          return [6, y, z];\n        }\n        return [6, 0, 0];\n      }\n    case \"Suspend\":\n      return [8, 0, 0];\n    case \"Union\":\n      return maxWeightAll(ast.types.map(getWeight));\n    case \"Refinement\":\n      {\n        const [x, y, z] = getWeight(ast.from);\n        return [x + 1, y, z];\n      }\n    case \"Transformation\":\n      return getWeight(ast.from);\n    case \"ObjectKeyword\":\n      return [-2, 0, 0];\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return [-4, 0, 0];\n    default:\n      return emptyWeight;\n  }\n};\n/** @internal */\nconst getParameterBase = ast => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return ast;\n    case \"Refinement\":\n      return getParameterBase(ast.from);\n  }\n};\nconst equalsTemplateLiteralSpan = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.getEquivalence((self, that) => self.type._tag === that.type._tag && self.literal === that.literal);\nconst equalsEnums = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.getEquivalence((self, that) => that[0] === self[0] && that[1] === self[1]);\nconst equals = (self, that) => {\n  switch (self._tag) {\n    case \"Literal\":\n      return isLiteral(that) && that.literal === self.literal;\n    case \"UniqueSymbol\":\n      return isUniqueSymbol(that) && that.symbol === self.symbol;\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"NeverKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n    case \"ObjectKeyword\":\n      return that._tag === self._tag;\n    case \"TemplateLiteral\":\n      return isTemplateLiteral(that) && that.head === self.head && equalsTemplateLiteralSpan(that.spans, self.spans);\n    case \"Enums\":\n      return isEnums(that) && equalsEnums(that.enums, self.enums);\n    case \"Refinement\":\n    case \"TupleType\":\n    case \"TypeLiteral\":\n    case \"Union\":\n    case \"Suspend\":\n    case \"Transformation\":\n    case \"Declaration\":\n      return self === that;\n  }\n};\nconst intersection = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_5__.intersectionWith(equals);\nconst _keyof = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return _keyof(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map(p => effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isSymbol(p.name) ? new UniqueSymbol(p.name) : new Literal(p.name)).concat(ast.indexSignatures.map(is => getParameterBase(is.parameter)));\n    case \"Suspend\":\n      return _keyof(ast.f());\n    case \"Union\":\n      return ast.types.slice(1).reduce((out, ast) => intersection(out, _keyof(ast)), _keyof(ast.types[0]));\n    case \"Transformation\":\n      return _keyof(ast.to);\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedSchema(ast));\n};\n/** @internal */\nconst compose = (ab, cd) => new Transformation(ab, cd, composeTransformation);\n/** @internal */\nconst rename = (ast, mapping) => {\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      {\n        const propertySignatureTransformations = [];\n        for (const key of _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.ownKeys(mapping)) {\n          const name = mapping[key];\n          if (name !== undefined) {\n            propertySignatureTransformations.push(new PropertySignatureTransformation(key, name, effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity, effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity));\n          }\n        }\n        if (propertySignatureTransformations.length === 0) {\n          return ast;\n        }\n        return new Transformation(ast, new TypeLiteral(ast.propertySignatures.map(ps => {\n          const name = mapping[ps.name];\n          return new PropertySignature(name === undefined ? ps.name : name, typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations);\n        }), ast.indexSignatures), new TypeLiteralTransformation(propertySignatureTransformations));\n      }\n    case \"Union\":\n      return Union.make(ast.types.map(ast => rename(ast, mapping)));\n    case \"Suspend\":\n      return new Suspend(() => rename(ast.f(), mapping));\n    case \"Transformation\":\n      return compose(ast, rename(typeAST(ast), mapping));\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_4__.getASTUnsupportedRenameSchema(ast));\n};\nconst formatKeyword = ast => effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(ast), () => ast._tag);\nconst getExpected = ast => {\n  return getIdentifierAnnotation(ast).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => getTitleAnnotation(ast)), effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => getDescriptionAnnotation(ast)));\n};\n//# sourceMappingURL=AST.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Arbitrary.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Arbitrary.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArbitraryHookId: () => (/* binding */ ArbitraryHookId),\n/* harmony export */   ArrayConstraints: () => (/* binding */ ArrayConstraints),\n/* harmony export */   BigIntConstraints: () => (/* binding */ BigIntConstraints),\n/* harmony export */   IntegerConstraints: () => (/* binding */ IntegerConstraints),\n/* harmony export */   NumberConstraints: () => (/* binding */ NumberConstraints),\n/* harmony export */   StringConstraints: () => (/* binding */ StringConstraints),\n/* harmony export */   arbitrary: () => (/* binding */ arbitrary),\n/* harmony export */   combineConstraints: () => (/* binding */ combineConstraints),\n/* harmony export */   getConstraints: () => (/* binding */ getConstraints),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeLazy: () => (/* binding */ makeLazy)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _FastCheck_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FastCheck.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/FastCheck.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/filters.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/filters.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 0.67.0\n */\nconst ArbitraryHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/ArbitraryHookId\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst arbitrary = handler => self => self.annotations({\n  [ArbitraryHookId]: handler\n});\n/**\n * Returns a LazyArbitrary for the `A` type of the provided schema.\n *\n * @category arbitrary\n * @since 0.67.0\n */\nconst makeLazy = schema => go(schema.ast, {}, []);\n/**\n * Returns a fast-check Arbitrary for the `A` type of the provided schema.\n *\n * @category arbitrary\n * @since 0.67.0\n */\nconst make = schema => makeLazy(schema)(_FastCheck_js__WEBPACK_IMPORTED_MODULE_0__);\nconst depthSize = 1;\nconst record = (fc, key, value, options) => {\n  return (options.isSuspend ? fc.oneof({\n    depthSize\n  }, fc.constant([]), fc.array(fc.tuple(key, value), {\n    minLength: 1,\n    maxLength: 2\n  })) : fc.array(fc.tuple(key, value))).map(tuples => {\n    const out = {};\n    for (const [k, v] of tuples) {\n      out[k] = v;\n    }\n    return out;\n  });\n};\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_1__.getAnnotation(ArbitraryHookId);\nconst getRefinementFromArbitrary = (ast, options, path) => {\n  const constraints = combineConstraints(options.constraints, getConstraints(ast));\n  return go(ast.from, constraints ? {\n    ...options,\n    constraints\n  } : options, path);\n};\nconst go = (ast, options, path) => {\n  const hook = getHook(ast);\n  if (effect_Option__WEBPACK_IMPORTED_MODULE_2__.isSome(hook)) {\n    switch (ast._tag) {\n      case \"Declaration\":\n        return hook.value(...ast.typeParameters.map(p => go(p, options, path)));\n      case \"Refinement\":\n        return hook.value(getRefinementFromArbitrary(ast, options, path));\n      default:\n        return hook.value();\n    }\n  }\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryMissingAnnotationErrorMessage(path, ast));\n      }\n    case \"Literal\":\n      return fc => fc.constant(ast.literal);\n    case \"UniqueSymbol\":\n      return fc => fc.constant(ast.symbol);\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n      return fc => fc.constant(undefined);\n    case \"NeverKeyword\":\n      return () => {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryUnsupportedErrorMessage(path, ast));\n      };\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return fc => fc.anything();\n    case \"StringKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"StringConstraints\":\n              return fc.string(options.constraints.constraints);\n          }\n        }\n        return fc.string();\n      };\n    case \"NumberKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"NumberConstraints\":\n              return fc.float(options.constraints.constraints);\n            case \"IntegerConstraints\":\n              return fc.integer(options.constraints.constraints);\n          }\n        }\n        return fc.float();\n      };\n    case \"BooleanKeyword\":\n      return fc => fc.boolean();\n    case \"BigIntKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"BigIntConstraints\":\n              return fc.bigInt(options.constraints.constraints);\n          }\n        }\n        return fc.bigInt();\n      };\n    case \"SymbolKeyword\":\n      return fc => fc.string().map(s => Symbol.for(s));\n    case \"ObjectKeyword\":\n      return fc => fc.oneof(fc.object(), fc.array(fc.anything()));\n    case \"TemplateLiteral\":\n      {\n        return fc => {\n          const string = fc.string({\n            maxLength: 5\n          });\n          const number = fc.float({\n            noDefaultInfinity: true\n          }).filter(n => !Number.isNaN(n));\n          const components = [fc.constant(ast.head)];\n          for (const span of ast.spans) {\n            if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isStringKeyword(span.type)) {\n              components.push(string);\n            } else {\n              components.push(number);\n            }\n            components.push(fc.constant(span.literal));\n          }\n          return fc.tuple(...components).map(spans => spans.join(\"\"));\n        };\n      }\n    case \"TupleType\":\n      {\n        const elements = [];\n        let hasOptionals = false;\n        let i = 0;\n        for (const element of ast.elements) {\n          elements.push(go(element.type, options, path.concat(i++)));\n          if (element.isOptional) {\n            hasOptionals = true;\n          }\n        }\n        const rest = ast.rest.map(annotatedAST => go(annotatedAST.type, options, path));\n        return fc => {\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          let output = fc.tuple(...elements.map(arb => arb(fc)));\n          if (hasOptionals) {\n            const indexes = fc.tuple(...ast.elements.map(element => element.isOptional ? fc.boolean() : fc.constant(true)));\n            output = output.chain(tuple => indexes.map(booleans => {\n              for (const [i, b] of booleans.reverse().entries()) {\n                if (!b) {\n                  tuple.splice(booleans.length - i, 1);\n                }\n              }\n              return tuple;\n            }));\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            const arb = head(fc);\n            const constraints = options.constraints;\n            output = output.chain(as => {\n              let out = fc.array(arb);\n              if (options.isSuspend) {\n                out = fc.oneof({\n                  depthSize\n                }, fc.constant([]), fc.array(arb, {\n                  minLength: 1,\n                  maxLength: 2\n                }));\n              } else if (constraints && constraints._tag === \"ArrayConstraints\") {\n                out = fc.array(arb, constraints.constraints);\n              }\n              return out.map(rest => [...as, ...rest]);\n            });\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              output = output.chain(as => tail[j](fc).map(a => [...as, a]));\n            }\n          }\n          return output;\n        };\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignaturesTypes = ast.propertySignatures.map(ps => go(ps.type, options, path.concat(ps.name)));\n        const indexSignatures = ast.indexSignatures.map(is => [go(is.parameter, options, path), go(is.type, options, path)]);\n        return fc => {\n          const arbs = {};\n          const requiredKeys = [];\n          // ---------------------------------------------\n          // handle property signatures\n          // ---------------------------------------------\n          for (let i = 0; i < propertySignaturesTypes.length; i++) {\n            const ps = ast.propertySignatures[i];\n            const name = ps.name;\n            if (!ps.isOptional) {\n              requiredKeys.push(name);\n            }\n            arbs[name] = propertySignaturesTypes[i](fc);\n          }\n          let output = fc.record(arbs, {\n            requiredKeys\n          });\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const parameter = indexSignatures[i][0](fc);\n            const type = indexSignatures[i][1](fc);\n            output = output.chain(o => {\n              return record(fc, parameter, type, options).map(d => ({\n                ...d,\n                ...o\n              }));\n            });\n          }\n          return output;\n        };\n      }\n    case \"Union\":\n      {\n        const types = ast.types.map(t => go(t, options, path));\n        return fc => fc.oneof({\n          depthSize\n        }, ...types.map(arb => arb(fc)));\n      }\n    case \"Enums\":\n      {\n        if (ast.enums.length === 0) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryEmptyEnumErrorMessage(path));\n        }\n        return fc => fc.oneof(...ast.enums.map(([_, value]) => fc.constant(value)));\n      }\n    case \"Refinement\":\n      {\n        const from = getRefinementFromArbitrary(ast, options, path);\n        return fc => from(fc).filter(a => effect_Option__WEBPACK_IMPORTED_MODULE_2__.isNone(ast.filter(a, _AST_js__WEBPACK_IMPORTED_MODULE_1__.defaultParseOption, ast)));\n      }\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_5__.memoizeThunk(() => go(ast.f(), {\n          ...options,\n          isSuspend: true\n        }, path));\n        return fc => fc.constant(null).chain(() => get()(fc));\n      }\n    case \"Transformation\":\n      return go(ast.to, options, path);\n  }\n};\n/** @internal */\nclass NumberConstraints {\n  _tag = \"NumberConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.min)) {\n      this.constraints.min = Math.fround(options.min);\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.max)) {\n      this.constraints.max = Math.fround(options.max);\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBoolean(options.noNaN)) {\n      this.constraints.noNaN = options.noNaN;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBoolean(options.noDefaultInfinity)) {\n      this.constraints.noDefaultInfinity = options.noDefaultInfinity;\n    }\n  }\n}\n/** @internal */\nclass StringConstraints {\n  _tag = \"StringConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.minLength)) {\n      this.constraints.minLength = options.minLength;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.maxLength)) {\n      this.constraints.maxLength = options.maxLength;\n    }\n  }\n}\n/** @internal */\nclass IntegerConstraints {\n  _tag = \"IntegerConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.min)) {\n      this.constraints.min = options.min;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.max)) {\n      this.constraints.max = options.max;\n    }\n  }\n}\n/** @internal */\nclass ArrayConstraints {\n  _tag = \"ArrayConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.minLength)) {\n      this.constraints.minLength = options.minLength;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.maxLength)) {\n      this.constraints.maxLength = options.maxLength;\n    }\n  }\n}\n/** @internal */\nclass BigIntConstraints {\n  _tag = \"BigIntConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBigInt(options.min)) {\n      this.constraints.min = options.min;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBigInt(options.max)) {\n      this.constraints.max = options.max;\n    }\n  }\n}\n/** @internal */\nconst getConstraints = ast => {\n  const TypeAnnotationId = ast.annotations[_AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeAnnotationId];\n  const jsonSchema = ast.annotations[_AST_js__WEBPACK_IMPORTED_MODULE_1__.JSONSchemaAnnotationId];\n  switch (TypeAnnotationId) {\n    // int\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.IntTypeId:\n      return new IntegerConstraints({});\n    // number\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanOrEqualToTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanOrEqualToTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.BetweenTypeId:\n      return new NumberConstraints({\n        min: jsonSchema.exclusiveMinimum ?? jsonSchema.minimum,\n        max: jsonSchema.exclusiveMaximum ?? jsonSchema.maximum\n      });\n    // bigint\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanBigintTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanOrEqualToBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanOrEqualToBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.BetweenBigintTypeId:\n      {\n        const constraints = ast.annotations[TypeAnnotationId];\n        return new BigIntConstraints(constraints);\n      }\n    // string\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MinLengthTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MaxLengthTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LengthTypeId:\n      return new StringConstraints(jsonSchema);\n    // array\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MinItemsTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MaxItemsTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.ItemsCountTypeId:\n      return new ArrayConstraints({\n        minLength: jsonSchema.minItems,\n        maxLength: jsonSchema.maxItems\n      });\n  }\n};\n/** @internal */\nconst combineConstraints = (c1, c2) => {\n  if (c1 === undefined) {\n    return c2;\n  }\n  if (c2 === undefined) {\n    return c1;\n  }\n  switch (c1._tag) {\n    case \"ArrayConstraints\":\n      {\n        switch (c2._tag) {\n          case \"ArrayConstraints\":\n            return new ArrayConstraints({\n              minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),\n              maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength)\n            });\n        }\n        break;\n      }\n    case \"NumberConstraints\":\n      {\n        switch (c2._tag) {\n          case \"NumberConstraints\":\n            return new NumberConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max),\n              noNaN: getOr(c1.constraints.noNaN, c2.constraints.noNaN),\n              noDefaultInfinity: getOr(c1.constraints.noDefaultInfinity, c2.constraints.noDefaultInfinity)\n            });\n          case \"IntegerConstraints\":\n            return new IntegerConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max)\n            });\n        }\n        break;\n      }\n    case \"BigIntConstraints\":\n      {\n        switch (c2._tag) {\n          case \"BigIntConstraints\":\n            return new BigIntConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max)\n            });\n        }\n        break;\n      }\n    case \"StringConstraints\":\n      {\n        switch (c2._tag) {\n          case \"StringConstraints\":\n            return new StringConstraints({\n              minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),\n              maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength)\n            });\n        }\n        break;\n      }\n    case \"IntegerConstraints\":\n      {\n        switch (c2._tag) {\n          case \"NumberConstraints\":\n          case \"IntegerConstraints\":\n            {\n              return new IntegerConstraints({\n                min: getMax(c1.constraints.min, c2.constraints.min),\n                max: getMin(c1.constraints.max, c2.constraints.max)\n              });\n            }\n        }\n        break;\n      }\n  }\n};\nconst getOr = (a, b) => {\n  return a === undefined ? b : b === undefined ? a : a || b;\n};\nfunction getMax(n1, n2) {\n  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n2 : n1;\n}\nfunction getMin(n1, n2) {\n  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n1 : n2;\n}\n//# sourceMappingURL=Arbitrary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Arbitrary.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Equivalence.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Equivalence.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EquivalenceHookId: () => (/* binding */ EquivalenceHookId),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   make: () => (/* binding */ make)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Equal */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Equivalence */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 0.67.0\n */\nconst EquivalenceHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/EquivalenceHookId\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst equivalence = handler => self => self.annotations({\n  [EquivalenceHookId]: handler\n});\n/**\n * @category Equivalence\n * @since 0.67.0\n */\nconst make = schema => go(schema.ast, []);\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getAnnotation(EquivalenceHookId);\nconst go = (ast, path) => {\n  const hook = getHook(ast);\n  if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n    switch (ast._tag) {\n      case \"Declaration\":\n        return hook.value(...ast.typeParameters.map(tp => go(tp, path)));\n      case \"Refinement\":\n        return hook.value(go(ast.from, path));\n      default:\n        return hook.value();\n    }\n  }\n  switch (ast._tag) {\n    case \"NeverKeyword\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_2__.getEquivalenceUnsupportedErrorMessage(ast, path));\n    case \"Transformation\":\n      return go(ast.to, path);\n    case \"Declaration\":\n    case \"Literal\":\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n    case \"UniqueSymbol\":\n    case \"SymbolKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"Enums\":\n    case \"ObjectKeyword\":\n      return effect_Equal__WEBPACK_IMPORTED_MODULE_3__.equals;\n    case \"Refinement\":\n      return go(ast.from, path);\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_4__.memoizeThunk(() => go(ast.f(), path));\n        return (a, b) => get()(a, b);\n      }\n    case \"TupleType\":\n      {\n        const elements = ast.elements.map((element, i) => go(element.type, path.concat(i)));\n        const rest = ast.rest.map(annotatedAST => go(annotatedAST.type, path));\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          const len = a.length;\n          if (len !== b.length) {\n            return false;\n          }\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          let i = 0;\n          for (; i < Math.min(len, ast.elements.length); i++) {\n            if (!elements[i](a[i], b[i])) {\n              return false;\n            }\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            for (; i < len - tail.length; i++) {\n              if (!head(a[i], b[i])) {\n                return false;\n              }\n            }\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              i += j;\n              if (!tail[j](a[i], b[i])) {\n                return false;\n              }\n            }\n          }\n          return true;\n        });\n      }\n    case \"TypeLiteral\":\n      {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          return effect_Equal__WEBPACK_IMPORTED_MODULE_3__.equals;\n        }\n        const propertySignatures = ast.propertySignatures.map(ps => go(ps.type, path.concat(ps.name)));\n        const indexSignatures = ast.indexSignatures.map(is => go(is.type, path));\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          const aStringKeys = Object.keys(a);\n          const aSymbolKeys = Object.getOwnPropertySymbols(a);\n          // ---------------------------------------------\n          // handle property signatures\n          // ---------------------------------------------\n          for (let i = 0; i < propertySignatures.length; i++) {\n            const ps = ast.propertySignatures[i];\n            const name = ps.name;\n            const aHas = Object.prototype.hasOwnProperty.call(a, name);\n            const bHas = Object.prototype.hasOwnProperty.call(b, name);\n            if (ps.isOptional) {\n              if (aHas !== bHas) {\n                return false;\n              }\n            }\n            if (aHas && bHas && !propertySignatures[i](a[name], b[name])) {\n              return false;\n            }\n          }\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          let bSymbolKeys;\n          let bStringKeys;\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const is = ast.indexSignatures[i];\n            const base = _AST_js__WEBPACK_IMPORTED_MODULE_0__.getParameterBase(is.parameter);\n            const isSymbol = _AST_js__WEBPACK_IMPORTED_MODULE_0__.isSymbolKeyword(base);\n            if (isSymbol) {\n              bSymbolKeys = bSymbolKeys || Object.getOwnPropertySymbols(b);\n              if (aSymbolKeys.length !== bSymbolKeys.length) {\n                return false;\n              }\n            } else {\n              bStringKeys = bStringKeys || Object.keys(b);\n              if (aStringKeys.length !== bStringKeys.length) {\n                return false;\n              }\n            }\n            const aKeys = isSymbol ? aSymbolKeys : aStringKeys;\n            for (let j = 0; j < aKeys.length; j++) {\n              const key = aKeys[j];\n              if (!Object.prototype.hasOwnProperty.call(b, key) || !indexSignatures[i](a[key], b[key])) {\n                return false;\n              }\n            }\n          }\n          return true;\n        });\n      }\n    case \"Union\":\n      {\n        const searchTree = _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__.getSearchTree(ast.types, true);\n        const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_4__.ownKeys(searchTree.keys);\n        const len = ownKeys.length;\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          let candidates = [];\n          if (len > 0 && effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isRecord(a)) {\n            for (let i = 0; i < len; i++) {\n              const name = ownKeys[i];\n              const buckets = searchTree.keys[name].buckets;\n              if (Object.prototype.hasOwnProperty.call(a, name)) {\n                const literal = String(a[name]);\n                if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                  candidates = candidates.concat(buckets[literal]);\n                }\n              }\n            }\n          }\n          if (searchTree.otherwise.length > 0) {\n            candidates = candidates.concat(searchTree.otherwise);\n          }\n          const tuples = candidates.map(ast => [go(ast, path), _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__.is({\n            ast\n          })]);\n          for (let i = 0; i < tuples.length; i++) {\n            const [equivalence, is] = tuples[i];\n            if (is(a) && is(b)) {\n              if (equivalence(a, b)) {\n                return true;\n              }\n            }\n          }\n          return false;\n        });\n      }\n  }\n};\n//# sourceMappingURL=Equivalence.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Equivalence.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/FastCheck.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/FastCheck.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arbitrary: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Arbitrary),\n/* harmony export */   ExecutionStatus: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ExecutionStatus),\n/* harmony export */   PreconditionFailure: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.PreconditionFailure),\n/* harmony export */   Random: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Random),\n/* harmony export */   Stream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   Value: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Value),\n/* harmony export */   VerbosityLevel: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.VerbosityLevel),\n/* harmony export */   __commitHash: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__commitHash),\n/* harmony export */   __type: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__type),\n/* harmony export */   __version: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__version),\n/* harmony export */   anything: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.anything),\n/* harmony export */   array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.array),\n/* harmony export */   ascii: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ascii),\n/* harmony export */   asciiString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asciiString),\n/* harmony export */   assert: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.assert),\n/* harmony export */   asyncDefaultReportMessage: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncDefaultReportMessage),\n/* harmony export */   asyncModelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncModelRun),\n/* harmony export */   asyncProperty: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncProperty),\n/* harmony export */   asyncStringify: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncStringify),\n/* harmony export */   asyncToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncToStringMethod),\n/* harmony export */   base64: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.base64),\n/* harmony export */   base64String: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.base64String),\n/* harmony export */   bigInt: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigInt),\n/* harmony export */   bigInt64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigInt64Array),\n/* harmony export */   bigIntN: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigIntN),\n/* harmony export */   bigUint: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUint),\n/* harmony export */   bigUint64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUint64Array),\n/* harmony export */   bigUintN: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUintN),\n/* harmony export */   boolean: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.boolean),\n/* harmony export */   char: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.char),\n/* harmony export */   char16bits: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.char16bits),\n/* harmony export */   check: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.check),\n/* harmony export */   clone: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.clone),\n/* harmony export */   cloneIfNeeded: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.cloneIfNeeded),\n/* harmony export */   cloneMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.cloneMethod),\n/* harmony export */   commands: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.commands),\n/* harmony export */   compareBooleanFunc: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.compareBooleanFunc),\n/* harmony export */   compareFunc: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.compareFunc),\n/* harmony export */   configureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.configureGlobal),\n/* harmony export */   constant: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.constant),\n/* harmony export */   constantFrom: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.constantFrom),\n/* harmony export */   context: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.context),\n/* harmony export */   createDepthIdentifier: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.createDepthIdentifier),\n/* harmony export */   date: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.date),\n/* harmony export */   defaultReportMessage: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.defaultReportMessage),\n/* harmony export */   dictionary: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.dictionary),\n/* harmony export */   domain: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.domain),\n/* harmony export */   double: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.double),\n/* harmony export */   emailAddress: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.emailAddress),\n/* harmony export */   falsy: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.falsy),\n/* harmony export */   float: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float),\n/* harmony export */   float32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float32Array),\n/* harmony export */   float64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float64Array),\n/* harmony export */   fullUnicode: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.fullUnicode),\n/* harmony export */   fullUnicodeString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.fullUnicodeString),\n/* harmony export */   func: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.func),\n/* harmony export */   gen: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.gen),\n/* harmony export */   getDepthContextFor: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.getDepthContextFor),\n/* harmony export */   hasAsyncToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasAsyncToStringMethod),\n/* harmony export */   hasCloneMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasCloneMethod),\n/* harmony export */   hasToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasToStringMethod),\n/* harmony export */   hash: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hash),\n/* harmony export */   hexa: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hexa),\n/* harmony export */   hexaString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hexaString),\n/* harmony export */   infiniteStream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.infiniteStream),\n/* harmony export */   int16Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int16Array),\n/* harmony export */   int32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int32Array),\n/* harmony export */   int8Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int8Array),\n/* harmony export */   integer: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.integer),\n/* harmony export */   ipV4: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV4),\n/* harmony export */   ipV4Extended: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV4Extended),\n/* harmony export */   ipV6: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV6),\n/* harmony export */   json: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.json),\n/* harmony export */   jsonValue: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.jsonValue),\n/* harmony export */   letrec: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.letrec),\n/* harmony export */   limitShrink: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.limitShrink),\n/* harmony export */   lorem: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.lorem),\n/* harmony export */   mapToConstant: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.mapToConstant),\n/* harmony export */   maxSafeInteger: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.maxSafeInteger),\n/* harmony export */   maxSafeNat: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.maxSafeNat),\n/* harmony export */   memo: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.memo),\n/* harmony export */   mixedCase: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.mixedCase),\n/* harmony export */   modelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.modelRun),\n/* harmony export */   nat: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.nat),\n/* harmony export */   noBias: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.noBias),\n/* harmony export */   noShrink: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.noShrink),\n/* harmony export */   object: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.object),\n/* harmony export */   oneof: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.oneof),\n/* harmony export */   option: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.option),\n/* harmony export */   pre: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.pre),\n/* harmony export */   property: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.property),\n/* harmony export */   readConfigureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.readConfigureGlobal),\n/* harmony export */   record: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.record),\n/* harmony export */   resetConfigureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.resetConfigureGlobal),\n/* harmony export */   sample: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.sample),\n/* harmony export */   scheduledModelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.scheduledModelRun),\n/* harmony export */   scheduler: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.scheduler),\n/* harmony export */   schedulerFor: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.schedulerFor),\n/* harmony export */   shuffledSubarray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.shuffledSubarray),\n/* harmony export */   sparseArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.sparseArray),\n/* harmony export */   statistics: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.statistics),\n/* harmony export */   stream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stream),\n/* harmony export */   string: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.string),\n/* harmony export */   string16bits: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.string16bits),\n/* harmony export */   stringMatching: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringMatching),\n/* harmony export */   stringOf: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringOf),\n/* harmony export */   stringify: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringify),\n/* harmony export */   subarray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.subarray),\n/* harmony export */   toStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.toStringMethod),\n/* harmony export */   tuple: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.tuple),\n/* harmony export */   uint16Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint16Array),\n/* harmony export */   uint32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint32Array),\n/* harmony export */   uint8Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint8Array),\n/* harmony export */   uint8ClampedArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint8ClampedArray),\n/* harmony export */   ulid: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ulid),\n/* harmony export */   unicode: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicode),\n/* harmony export */   unicodeJson: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeJson),\n/* harmony export */   unicodeJsonValue: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeJsonValue),\n/* harmony export */   unicodeString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeString),\n/* harmony export */   uniqueArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uniqueArray),\n/* harmony export */   uuid: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uuid),\n/* harmony export */   uuidV: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uuidV),\n/* harmony export */   webAuthority: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webAuthority),\n/* harmony export */   webFragments: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webFragments),\n/* harmony export */   webPath: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webPath),\n/* harmony export */   webQueryParameters: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webQueryParameters),\n/* harmony export */   webSegment: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webSegment),\n/* harmony export */   webUrl: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webUrl)\n/* harmony export */ });\n/* harmony import */ var fast_check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-check */ \"(rsc)/./node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/fast-check.js\");\n/**\n * @since 0.67.0\n */\n/**\n * @category re-exports\n * @since 0.67.0\n */\n\n//# sourceMappingURL=FastCheck.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVmZmVjdCtzY2hlbWFAMC42OC4xMl9lZmZlY3RAMy40LjUvbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL0Zhc3RDaGVjay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dlc3Rvci1jb252aWRhZG9zLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BlZmZlY3Qrc2NoZW1hQDAuNjguMTJfZWZmZWN0QDMuNC41L25vZGVfbW9kdWxlcy9AZWZmZWN0L3NjaGVtYS9kaXN0L2VzbS9GYXN0Q2hlY2suanM/ODY2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAwLjY3LjBcbiAqL1xuLyoqXG4gKiBAY2F0ZWdvcnkgcmUtZXhwb3J0c1xuICogQHNpbmNlIDAuNjcuMFxuICovXG5leHBvcnQgKiBmcm9tIFwiZmFzdC1jaGVja1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFzdENoZWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/FastCheck.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Composite: () => (/* binding */ Composite),\n/* harmony export */   Forbidden: () => (/* binding */ Forbidden),\n/* harmony export */   Missing: () => (/* binding */ Missing),\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   ParseErrorTypeId: () => (/* binding */ ParseErrorTypeId),\n/* harmony export */   Pointer: () => (/* binding */ Pointer),\n/* harmony export */   Refinement: () => (/* binding */ Refinement),\n/* harmony export */   Transformation: () => (/* binding */ Transformation),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   Unexpected: () => (/* binding */ Unexpected),\n/* harmony export */   asserts: () => (/* binding */ asserts),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeEither: () => (/* binding */ decodeEither),\n/* harmony export */   decodeOption: () => (/* binding */ decodeOption),\n/* harmony export */   decodePromise: () => (/* binding */ decodePromise),\n/* harmony export */   decodeSync: () => (/* binding */ decodeSync),\n/* harmony export */   decodeUnknown: () => (/* binding */ decodeUnknown),\n/* harmony export */   decodeUnknownEither: () => (/* binding */ decodeUnknownEither),\n/* harmony export */   decodeUnknownOption: () => (/* binding */ decodeUnknownOption),\n/* harmony export */   decodeUnknownPromise: () => (/* binding */ decodeUnknownPromise),\n/* harmony export */   decodeUnknownSync: () => (/* binding */ decodeUnknownSync),\n/* harmony export */   eitherOrUndefined: () => (/* binding */ eitherOrUndefined),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeEither: () => (/* binding */ encodeEither),\n/* harmony export */   encodeOption: () => (/* binding */ encodeOption),\n/* harmony export */   encodePromise: () => (/* binding */ encodePromise),\n/* harmony export */   encodeSync: () => (/* binding */ encodeSync),\n/* harmony export */   encodeUnknown: () => (/* binding */ encodeUnknown),\n/* harmony export */   encodeUnknownEither: () => (/* binding */ encodeUnknownEither),\n/* harmony export */   encodeUnknownOption: () => (/* binding */ encodeUnknownOption),\n/* harmony export */   encodeUnknownPromise: () => (/* binding */ encodeUnknownPromise),\n/* harmony export */   encodeUnknownSync: () => (/* binding */ encodeUnknownSync),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   getFinalTransformation: () => (/* binding */ getFinalTransformation),\n/* harmony export */   getLiterals: () => (/* binding */ getLiterals),\n/* harmony export */   getSearchTree: () => (/* binding */ getSearchTree),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isComposite: () => (/* binding */ isComposite),\n/* harmony export */   isParseError: () => (/* binding */ isParseError),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapError: () => (/* binding */ mapError),\n/* harmony export */   mergeInternalOptions: () => (/* binding */ mergeInternalOptions),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   parseError: () => (/* binding */ parseError),\n/* harmony export */   succeed: () => (/* binding */ succeed),\n/* harmony export */   \"try\": () => (/* binding */ _try),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validateEither: () => (/* binding */ validateEither),\n/* harmony export */   validateOption: () => (/* binding */ validateOption),\n/* harmony export */   validatePromise: () => (/* binding */ validatePromise),\n/* harmony export */   validateSync: () => (/* binding */ validateSync)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Either__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Either */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_GlobalValue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/GlobalValue */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var effect_Inspectable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Inspectable */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TreeFormatter.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/TreeFormatter.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @category model\n * @since 0.68.0\n */\nclass Pointer {\n  path;\n  actual;\n  issue;\n  /**\n   * @since 0.68.0\n   */\n  _tag = \"Pointer\";\n  constructor(path, actual, issue) {\n    this.path = path;\n    this.actual = actual;\n    this.issue = issue;\n  }\n}\n/**\n * Error that occurs when an unexpected key or index is present.\n *\n * @category model\n * @since 0.67.0\n */\nclass Unexpected {\n  actual;\n  message;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Unexpected\";\n  constructor(actual,\n  /**\n   * @since 0.68.0\n   */\n  message) {\n    this.actual = actual;\n    this.message = message;\n  }\n}\n/**\n * Error that occurs when a required key or index is missing.\n *\n * @category model\n * @since 0.67.0\n */\nclass Missing {\n  ast;\n  message;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Missing\";\n  /**\n   * @since 0.68.0\n   */\n  actual = undefined;\n  constructor(\n  /**\n   * @since 0.68.0\n   */\n  ast,\n  /**\n   * @since 0.68.0\n   */\n  message) {\n    this.ast = ast;\n    this.message = message;\n  }\n}\n/**\n * Error that contains multiple issues.\n *\n * @category model\n * @since 0.68.0\n */\nclass Composite {\n  ast;\n  actual;\n  issues;\n  output;\n  /**\n   * @since 0.68.0\n   */\n  _tag = \"Composite\";\n  constructor(ast, actual, issues, output) {\n    this.ast = ast;\n    this.actual = actual;\n    this.issues = issues;\n    this.output = output;\n  }\n}\n/**\n * Returns `true` if the value is a `Composite`.\n *\n * @category guards\n * @since 0.68.0\n */\nconst isComposite = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.hasProperty(u, \"_tag\");\n/**\n * Error that occurs when a refinement has an error.\n *\n * @category model\n * @since 0.67.0\n */\nclass Refinement {\n  ast;\n  actual;\n  kind;\n  issue;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Refinement\";\n  constructor(ast, actual, kind, issue) {\n    this.ast = ast;\n    this.actual = actual;\n    this.kind = kind;\n    this.issue = issue;\n  }\n}\n/**\n * Error that occurs when a transformation has an error.\n *\n * @category model\n * @since 0.67.0\n */\nclass Transformation {\n  ast;\n  actual;\n  kind;\n  issue;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Transformation\";\n  constructor(ast, actual, kind, issue) {\n    this.ast = ast;\n    this.actual = actual;\n    this.kind = kind;\n    this.issue = issue;\n  }\n}\n/**\n * The `Type` variant of the `ParseIssue` type represents an error that occurs when the `actual` value is not of the expected type.\n * The `ast` field specifies the expected type, and the `actual` field contains the value that caused the error.\n *\n * @category model\n * @since 0.67.0\n */\nclass Type {\n  ast;\n  actual;\n  message;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Type\";\n  constructor(ast, actual, message) {\n    this.ast = ast;\n    this.actual = actual;\n    this.message = message;\n  }\n}\n/**\n * The `Forbidden` variant of the `ParseIssue` type represents a forbidden operation, such as when encountering an Effect that is not allowed to execute (e.g., using `runSync`).\n *\n * @category model\n * @since 0.67.0\n */\nclass Forbidden {\n  ast;\n  actual;\n  message;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"Forbidden\";\n  constructor(ast, actual, message) {\n    this.ast = ast;\n    this.actual = actual;\n    this.message = message;\n  }\n}\n/**\n * @category type id\n * @since 0.68.0\n */\nconst ParseErrorTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/ParseErrorTypeId\");\n/**\n * @since 0.68.0\n */\nconst isParseError = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.hasProperty(u, ParseErrorTypeId);\n/**\n * @since 0.67.0\n */\nclass ParseError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_1__.TaggedError)(\"ParseError\") {\n  /**\n   * @since 0.68.0\n   */\n  [ParseErrorTypeId] = ParseErrorTypeId;\n  get message() {\n    return this.toString();\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__.formatIssueSync(this.issue);\n  }\n  /**\n   * @since 0.67.0\n   */\n  toJSON() {\n    return {\n      _id: \"ParseError\",\n      message: this.toString()\n    };\n  }\n  /**\n   * @since 0.67.0\n   */\n  [effect_Inspectable__WEBPACK_IMPORTED_MODULE_3__.NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n}\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst parseError = issue => new ParseError({\n  issue\n});\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst succeed = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst fail = effect_Either__WEBPACK_IMPORTED_MODULE_4__.left;\nconst _try = effect_Either__WEBPACK_IMPORTED_MODULE_4__[\"try\"];\n\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst fromOption = effect_Either__WEBPACK_IMPORTED_MODULE_4__.fromOption;\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst flatMap = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return s;\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return f(s.right);\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(self, f);\n});\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst map = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return s;\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(f(s.right));\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.map(self, f);\n});\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst mapError = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(f(s.left));\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.mapError(self, f);\n});\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst eitherOrUndefined = self => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\" || s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n};\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst mapBoth = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, options) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(options.onFailure(s.left));\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(options.onSuccess(s.right));\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.mapBoth(self, options);\n});\n/**\n * @category optimisation\n * @since 0.67.0\n */\nconst orElse = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return f(s.left);\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.catchAll(self, f);\n});\n/** @internal */\nconst mergeInternalOptions = (options, overrideOptions) => {\n  if (overrideOptions === undefined || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNumber(overrideOptions)) {\n    return options;\n  }\n  if (options === undefined) {\n    return overrideOptions;\n  }\n  return {\n    ...options,\n    ...overrideOptions\n  };\n};\nconst getEither = (ast, isDecoding, options) => {\n  const parser = goMemo(ast, isDecoding);\n  return (u, overrideOptions) => parser(u, mergeInternalOptions(options, overrideOptions));\n};\nconst getSync = (ast, isDecoding, options) => {\n  const parser = getEither(ast, isDecoding, options);\n  return (input, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_4__.getOrThrowWith(parser(input, overrideOptions), parseError);\n};\nconst getOption = (ast, isDecoding, options) => {\n  const parser = getEither(ast, isDecoding, options);\n  return (input, overrideOptions) => effect_Option__WEBPACK_IMPORTED_MODULE_7__.getRight(parser(input, overrideOptions));\n};\nconst getEffect = (ast, isDecoding, options) => {\n  const parser = goMemo(ast, isDecoding);\n  return (input, overrideOptions) => parser(input, {\n    ...mergeInternalOptions(options, overrideOptions),\n    isEffectAllowed: true\n  });\n};\n/**\n * @throws `ParseError`\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownSync = (schema, options) => getSync(schema.ast, true, options);\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownOption = (schema, options) => getOption(schema.ast, true, options);\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownEither = (schema, options) => getEither(schema.ast, true, options);\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownPromise = (schema, options) => {\n  const parser = decodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknown = (schema, options) => getEffect(schema.ast, true, options);\n/**\n * @throws `ParseError`\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownSync = (schema, options) => getSync(schema.ast, false, options);\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownOption = (schema, options) => getOption(schema.ast, false, options);\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownEither = (schema, options) => getEither(schema.ast, false, options);\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownPromise = (schema, options) => {\n  const parser = encodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknown = (schema, options) => getEffect(schema.ast, false, options);\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeSync = decodeUnknownSync;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeOption = decodeUnknownOption;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeEither = decodeUnknownEither;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodePromise = decodeUnknownPromise;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decode = decodeUnknown;\n/**\n * @throws `ParseError`\n * @category validation\n * @since 0.67.0\n */\nconst validateSync = (schema, options) => getSync(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validateOption = (schema, options) => getOption(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validateEither = (schema, options) => getEither(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validatePromise = (schema, options) => {\n  const parser = validate(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validate = (schema, options) => getEffect(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true, options);\n/**\n * By default the option `exact` is set to `true`.\n *\n * @category validation\n * @since 0.67.0\n */\nconst is = (schema, options) => {\n  const parser = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(parser(u, {\n    exact: true,\n    ...mergeInternalOptions(options, overrideOptions)\n  }));\n};\n/**\n * By default the option `exact` is set to `true`.\n *\n * @throws `ParseError`\n * @category validation\n * @since 0.67.0\n */\nconst asserts = (schema, options) => {\n  const parser = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(schema.ast), true);\n  return (u, overrideOptions) => {\n    const result = parser(u, {\n      exact: true,\n      ...mergeInternalOptions(options, overrideOptions)\n    });\n    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(result)) {\n      throw parseError(result.left);\n    }\n  };\n};\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeSync = encodeUnknownSync;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeOption = encodeUnknownOption;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeEither = encodeUnknownEither;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodePromise = encodeUnknownPromise;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encode = encodeUnknown;\nconst decodeMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_9__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/Parser/decodeMemoMap\"), () => new WeakMap());\nconst encodeMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_9__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/Parser/encodeMemoMap\"), () => new WeakMap());\nconst goMemo = (ast, isDecoding) => {\n  const memoMap = isDecoding ? decodeMemoMap : encodeMemoMap;\n  const memo = memoMap.get(ast);\n  if (memo) {\n    return memo;\n  }\n  const raw = go(ast, isDecoding);\n  const parseOptionsAnnotation = _AST_js__WEBPACK_IMPORTED_MODULE_8__.getParseOptionsAnnotation(ast);\n  const parser = effect_Option__WEBPACK_IMPORTED_MODULE_7__.isSome(parseOptionsAnnotation) ? (i, options) => raw(i, mergeInternalOptions(options, parseOptionsAnnotation.value)) : raw;\n  memoMap.set(ast, parser);\n  return parser;\n};\nconst getConcurrency = ast => effect_Option__WEBPACK_IMPORTED_MODULE_7__.getOrUndefined(_AST_js__WEBPACK_IMPORTED_MODULE_8__.getConcurrencyAnnotation(ast));\nconst getBatching = ast => effect_Option__WEBPACK_IMPORTED_MODULE_7__.getOrUndefined(_AST_js__WEBPACK_IMPORTED_MODULE_8__.getBatchingAnnotation(ast));\nconst go = (ast, isDecoding) => {\n  switch (ast._tag) {\n    case \"Refinement\":\n      {\n        if (isDecoding) {\n          const from = goMemo(ast.from, true);\n          return (i, options) => handleForbidden(flatMap(mapError(from(i, options), e => new Refinement(ast, i, \"From\", e)), a => effect_Option__WEBPACK_IMPORTED_MODULE_7__.match(ast.filter(a, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_8__.defaultParseOption, ast), {\n            onNone: () => effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(a),\n            onSome: e => effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Refinement(ast, i, \"Predicate\", e))\n          })), ast, i, options);\n        } else {\n          const from = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(ast), true);\n          const to = goMemo(dropRightRefinement(ast.from), false);\n          return (i, options) => handleForbidden(flatMap(from(i, options), a => to(a, options)), ast, i, options);\n        }\n      }\n    case \"Transformation\":\n      {\n        const transform = getFinalTransformation(ast.transformation, isDecoding);\n        const from = isDecoding ? goMemo(ast.from, true) : goMemo(ast.to, false);\n        const to = isDecoding ? goMemo(ast.to, true) : goMemo(ast.from, false);\n        return (i1, options) => handleForbidden(flatMap(mapError(from(i1, options), e => new Transformation(ast, i1, isDecoding ? \"Encoded\" : \"Type\", e)), a => flatMap(mapError(transform(a, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_8__.defaultParseOption, ast), e => new Transformation(ast, i1, \"Transformation\", e)), i2 => mapError(to(i2, options), e => new Transformation(ast, i1, isDecoding ? \"Type\" : \"Encoded\", e)))), ast, i1, options);\n      }\n    case \"Declaration\":\n      {\n        const parse = isDecoding ? ast.decodeUnknown(...ast.typeParameters) : ast.encodeUnknown(...ast.typeParameters);\n        return (i, options) => handleForbidden(parse(i, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_8__.defaultParseOption, ast), ast, i, options);\n      }\n    case \"Literal\":\n      return fromRefinement(ast, u => u === ast.literal);\n    case \"UniqueSymbol\":\n      return fromRefinement(ast, u => u === ast.symbol);\n    case \"UndefinedKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isUndefined);\n    case \"VoidKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isUndefined);\n    case \"NeverKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNever);\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n    case \"StringKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString);\n    case \"NumberKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNumber);\n    case \"BooleanKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBoolean);\n    case \"BigIntKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBigInt);\n    case \"SymbolKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isSymbol);\n    case \"ObjectKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isObject);\n    case \"Enums\":\n      return fromRefinement(ast, u => ast.enums.some(([_, value]) => value === u));\n    case \"TemplateLiteral\":\n      {\n        const regex = _AST_js__WEBPACK_IMPORTED_MODULE_8__.getTemplateLiteralRegExp(ast);\n        return fromRefinement(ast, u => effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString(u) && regex.test(u));\n      }\n    case \"TupleType\":\n      {\n        const elements = ast.elements.map(e => goMemo(e.type, isDecoding));\n        const rest = ast.rest.map(annotatedAST => goMemo(annotatedAST.type, isDecoding));\n        let requiredTypes = ast.elements.filter(e => !e.isOptional);\n        if (ast.rest.length > 0) {\n          requiredTypes = requiredTypes.concat(ast.rest.slice(1));\n        }\n        const requiredLen = requiredTypes.length;\n        const expectedIndexes = ast.elements.length > 0 ? ast.elements.map((_, i) => i).join(\" | \") : \"never\";\n        const concurrency = getConcurrency(ast);\n        const batching = getBatching(ast);\n        return (input, options) => {\n          if (!effect_Array__WEBPACK_IMPORTED_MODULE_10__.isArray(input)) {\n            return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, input));\n          }\n          const allErrors = options?.errors === \"all\";\n          const es = [];\n          let stepKey = 0;\n          const output = [];\n          // ---------------------------------------------\n          // handle missing indexes\n          // ---------------------------------------------\n          const len = input.length;\n          for (let i = len; i <= requiredLen - 1; i++) {\n            const e = new Pointer(i, input, new Missing(requiredTypes[i - len]));\n            if (allErrors) {\n              es.push([stepKey++, e]);\n              continue;\n            } else {\n              return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n            }\n          }\n          // ---------------------------------------------\n          // handle excess indexes\n          // ---------------------------------------------\n          if (ast.rest.length === 0) {\n            for (let i = ast.elements.length; i <= len - 1; i++) {\n              const e = new Pointer(i, input, new Unexpected(input[i], `is unexpected, expected: ${expectedIndexes}`));\n              if (allErrors) {\n                es.push([stepKey++, e]);\n                continue;\n              } else {\n                return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n              }\n            }\n          }\n          let i = 0;\n          let queue = undefined;\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          for (; i < elements.length; i++) {\n            if (len < i + 1) {\n              if (ast.elements[i].isOptional) {\n                // the input element is missing\n                continue;\n              }\n            } else {\n              const parser = elements[i];\n              const te = parser(input[i], options);\n              const eu = eitherOrUndefined(te);\n              if (eu) {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                  // the input element is present but is not valid\n                  const e = new Pointer(i, input, eu.left);\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                  }\n                }\n                output.push([stepKey++, eu.right]);\n              } else {\n                const nk = stepKey++;\n                const index = i;\n                if (!queue) {\n                  queue = [];\n                }\n                queue.push(({\n                  es,\n                  output\n                }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                    // the input element is present but is not valid\n                    const e = new Pointer(index, input, t.left);\n                    if (allErrors) {\n                      es.push([nk, e]);\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                    }\n                  }\n                  output.push([nk, t.right]);\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                }));\n              }\n            }\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            for (; i < len - tail.length; i++) {\n              const te = head(input[i], options);\n              const eu = eitherOrUndefined(te);\n              if (eu) {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                  const e = new Pointer(i, input, eu.left);\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                  }\n                } else {\n                  output.push([stepKey++, eu.right]);\n                }\n              } else {\n                const nk = stepKey++;\n                const index = i;\n                if (!queue) {\n                  queue = [];\n                }\n                queue.push(({\n                  es,\n                  output\n                }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                    const e = new Pointer(index, input, t.left);\n                    if (allErrors) {\n                      es.push([nk, e]);\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                    }\n                  } else {\n                    output.push([nk, t.right]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  }\n                }));\n              }\n            }\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              i += j;\n              if (len < i + 1) {\n                continue;\n              } else {\n                const te = tail[j](input[i], options);\n                const eu = eitherOrUndefined(te);\n                if (eu) {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                    // the input element is present but is not valid\n                    const e = new Pointer(i, input, eu.left);\n                    if (allErrors) {\n                      es.push([stepKey++, e]);\n                      continue;\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                    }\n                  }\n                  output.push([stepKey++, eu.right]);\n                } else {\n                  const nk = stepKey++;\n                  const index = i;\n                  if (!queue) {\n                    queue = [];\n                  }\n                  queue.push(({\n                    es,\n                    output\n                  }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                      // the input element is present but is not valid\n                      const e = new Pointer(index, input, t.left);\n                      if (allErrors) {\n                        es.push([nk, e]);\n                        return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                      } else {\n                        return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, sortByIndex(output)));\n                      }\n                    }\n                    output.push([nk, t.right]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  }));\n                }\n              }\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = ({\n            es,\n            output\n          }) => effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es) ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, sortByIndex(es), sortByIndex(output))) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(sortByIndex(output));\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es),\n                output: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(output)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => computeResult(state));\n            });\n          }\n          return computeResult({\n            output,\n            es\n          });\n        };\n      }\n    case \"TypeLiteral\":\n      {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNotNullable);\n        }\n        const propertySignatures = [];\n        const expectedKeysMap = {};\n        const expectedKeys = [];\n        for (const ps of ast.propertySignatures) {\n          propertySignatures.push([goMemo(ps.type, isDecoding), ps]);\n          expectedKeysMap[ps.name] = null;\n          expectedKeys.push(ps.name);\n        }\n        const indexSignatures = ast.indexSignatures.map(is => [goMemo(is.parameter, isDecoding), goMemo(is.type, isDecoding), is.parameter]);\n        const expectedAST = _AST_js__WEBPACK_IMPORTED_MODULE_8__.Union.make(ast.indexSignatures.map(is => is.parameter).concat(expectedKeys.map(key => effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isSymbol(key) ? new _AST_js__WEBPACK_IMPORTED_MODULE_8__.UniqueSymbol(key) : new _AST_js__WEBPACK_IMPORTED_MODULE_8__.Literal(key))));\n        const expected = goMemo(expectedAST, isDecoding);\n        const concurrency = getConcurrency(ast);\n        const batching = getBatching(ast);\n        return (input, options) => {\n          if (!effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isRecord(input)) {\n            return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, input));\n          }\n          const allErrors = options?.errors === \"all\";\n          const es = [];\n          let stepKey = 0;\n          // ---------------------------------------------\n          // handle excess properties\n          // ---------------------------------------------\n          const onExcessPropertyError = options?.onExcessProperty === \"error\";\n          const onExcessPropertyPreserve = options?.onExcessProperty === \"preserve\";\n          const output = {};\n          let inputKeys;\n          if (onExcessPropertyError || onExcessPropertyPreserve) {\n            inputKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(input);\n            for (const key of inputKeys) {\n              const eu = eitherOrUndefined(expected(key, options));\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                // key is unexpected\n                if (onExcessPropertyError) {\n                  const e = new Pointer(key, input, new Unexpected(input[key], `is unexpected, expected: ${String(expectedAST)}`));\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                  }\n                } else {\n                  // preserve key\n                  output[key] = input[key];\n                }\n              }\n            }\n          }\n          let queue = undefined;\n          const isExact = options?.exact === true;\n          for (let i = 0; i < propertySignatures.length; i++) {\n            const ps = propertySignatures[i][1];\n            const name = ps.name;\n            const hasKey = Object.prototype.hasOwnProperty.call(input, name);\n            if (!hasKey) {\n              if (ps.isOptional) {\n                continue;\n              } else if (isExact) {\n                const e = new Pointer(name, input, new Missing(ps));\n                if (allErrors) {\n                  es.push([stepKey++, e]);\n                  continue;\n                } else {\n                  return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                }\n              }\n            }\n            const parser = propertySignatures[i][0];\n            const te = parser(input[name], options);\n            const eu = eitherOrUndefined(te);\n            if (eu) {\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                const e = new Pointer(name, input, hasKey ? eu.left : new Missing(ps));\n                if (allErrors) {\n                  es.push([stepKey++, e]);\n                  continue;\n                } else {\n                  return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                }\n              }\n              output[name] = eu.right;\n            } else {\n              const nk = stepKey++;\n              const index = name;\n              if (!queue) {\n                queue = [];\n              }\n              queue.push(({\n                es,\n                output\n              }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                  const e = new Pointer(index, input, hasKey ? t.left : new Missing(ps));\n                  if (allErrors) {\n                    es.push([nk, e]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                  }\n                }\n                output[index] = t.right;\n                return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n              }));\n            }\n          }\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const indexSignature = indexSignatures[i];\n            const parameter = indexSignature[0];\n            const type = indexSignature[1];\n            const keys = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.getKeysForIndexSignature(input, indexSignature[2]);\n            for (const key of keys) {\n              // ---------------------------------------------\n              // handle keys\n              // ---------------------------------------------\n              const keu = eitherOrUndefined(parameter(key, options));\n              if (keu && effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(keu)) {\n                // ---------------------------------------------\n                // handle values\n                // ---------------------------------------------\n                const vpr = type(input[key], options);\n                const veu = eitherOrUndefined(vpr);\n                if (veu) {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(veu)) {\n                    const e = new Pointer(key, input, veu.left);\n                    if (allErrors) {\n                      es.push([stepKey++, e]);\n                      continue;\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                    }\n                  } else {\n                    if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                      output[key] = veu.right;\n                    }\n                  }\n                } else {\n                  const nk = stepKey++;\n                  const index = key;\n                  if (!queue) {\n                    queue = [];\n                  }\n                  queue.push(({\n                    es,\n                    output\n                  }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(vpr), tv => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(tv)) {\n                      const e = new Pointer(index, input, tv.left);\n                      if (allErrors) {\n                        es.push([nk, e]);\n                        return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                      } else {\n                        return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, e, output));\n                      }\n                    } else {\n                      if (!Object.prototype.hasOwnProperty.call(expectedKeysMap, key)) {\n                        output[key] = tv.right;\n                      }\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    }\n                  }));\n                }\n              }\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = ({\n            es,\n            output\n          }) => {\n            if (effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es)) {\n              return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, sortByIndex(es), output));\n            }\n            if (options?.propertyOrder === \"original\") {\n              // preserve input keys order\n              const keys = inputKeys || _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(input);\n              for (const name of expectedKeys) {\n                if (keys.indexOf(name) === -1) {\n                  keys.push(name);\n                }\n              }\n              const out = {};\n              for (const key of keys) {\n                if (Object.prototype.hasOwnProperty.call(output, key)) {\n                  out[key] = output[key];\n                }\n              }\n              return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(out);\n            }\n            return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(output);\n          };\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es),\n                output: Object.assign({}, output)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => computeResult(state));\n            });\n          }\n          return computeResult({\n            es,\n            output\n          });\n        };\n      }\n    case \"Union\":\n      {\n        const searchTree = getSearchTree(ast.types, isDecoding);\n        const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(searchTree.keys);\n        const len = ownKeys.length;\n        const map = new Map();\n        for (let i = 0; i < ast.types.length; i++) {\n          map.set(ast.types[i], goMemo(ast.types[i], isDecoding));\n        }\n        const concurrency = getConcurrency(ast) ?? 1;\n        const batching = getBatching(ast);\n        return (input, options) => {\n          const es = [];\n          let stepKey = 0;\n          let candidates = [];\n          if (len > 0) {\n            // if there is at least one key then input must be an object\n            if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isRecord(input)) {\n              for (let i = 0; i < len; i++) {\n                const name = ownKeys[i];\n                const buckets = searchTree.keys[name].buckets;\n                // for each property that should contain a literal, check if the input contains that property\n                if (Object.prototype.hasOwnProperty.call(input, name)) {\n                  const literal = String(input[name]);\n                  // check that the value obtained from the input for the property corresponds to an existing bucket\n                  if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                    // retrive the minimal set of candidates for decoding\n                    candidates = candidates.concat(buckets[literal]);\n                  } else {\n                    const literals = _AST_js__WEBPACK_IMPORTED_MODULE_8__.Union.make(searchTree.keys[name].literals);\n                    es.push([stepKey++, new Composite(new _AST_js__WEBPACK_IMPORTED_MODULE_8__.TypeLiteral([new _AST_js__WEBPACK_IMPORTED_MODULE_8__.PropertySignature(name, literals, false, true)], []), input, new Pointer(name, input, new Type(literals, input[name])))]);\n                  }\n                } else {\n                  const literals = _AST_js__WEBPACK_IMPORTED_MODULE_8__.Union.make(searchTree.keys[name].literals);\n                  const fakeps = new _AST_js__WEBPACK_IMPORTED_MODULE_8__.PropertySignature(name, literals, false, true); // TODO: inherit message annotation from the union?\n                  es.push([stepKey++, new Composite(new _AST_js__WEBPACK_IMPORTED_MODULE_8__.TypeLiteral([fakeps], []), input, new Pointer(name, input, new Missing(fakeps)))]);\n                }\n              }\n            } else {\n              es.push([stepKey++, new Type(ast, input)]);\n            }\n          }\n          if (searchTree.otherwise.length > 0) {\n            candidates = candidates.concat(searchTree.otherwise);\n          }\n          let queue = undefined;\n          for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            const pr = map.get(candidate)(input, options);\n            // the members of a union are ordered based on which one should be decoded first,\n            // therefore if one member has added a task, all subsequent members must\n            // also add a task to the queue even if they are synchronous\n            const eu = !queue || queue.length === 0 ? eitherOrUndefined(pr) : undefined;\n            if (eu) {\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(eu)) {\n                return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(eu.right);\n              } else {\n                es.push([stepKey++, eu.left]);\n              }\n            } else {\n              const nk = stepKey++;\n              if (!queue) {\n                queue = [];\n              }\n              queue.push(state => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n                if (\"finalResult\" in state) {\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                } else {\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(pr), t => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(t)) {\n                      state.finalResult = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(t.right);\n                    } else {\n                      state.es.push([nk, t.left]);\n                    }\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  });\n                }\n              }));\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = es => effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es) ? es.length === 1 && es[0][1]._tag === \"Type\" ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(es[0][1]) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Composite(ast, input, sortByIndex(es))) :\n          // this should never happen\n          effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, input));\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => {\n                if (\"finalResult\" in state) {\n                  return state.finalResult;\n                }\n                return computeResult(state.es);\n              });\n            });\n          }\n          return computeResult(es);\n        };\n      }\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.memoizeThunk(() => goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_8__.annotations(ast.f(), ast.annotations), isDecoding));\n        return (a, options) => get()(a, options);\n      }\n  }\n};\nconst fromRefinement = (ast, refinement) => u => refinement(u) ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(u) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, u));\n/** @internal */\nconst getLiterals = (ast, isDecoding) => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = _AST_js__WEBPACK_IMPORTED_MODULE_8__.getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_7__.isSome(annotation)) {\n          return getLiterals(annotation.value, isDecoding);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      {\n        const out = [];\n        for (let i = 0; i < ast.propertySignatures.length; i++) {\n          const propertySignature = ast.propertySignatures[i];\n          const type = isDecoding ? _AST_js__WEBPACK_IMPORTED_MODULE_8__.encodedAST(propertySignature.type) : _AST_js__WEBPACK_IMPORTED_MODULE_8__.typeAST(propertySignature.type);\n          if (_AST_js__WEBPACK_IMPORTED_MODULE_8__.isLiteral(type) && !propertySignature.isOptional) {\n            out.push([propertySignature.name, type]);\n          }\n        }\n        return out;\n      }\n    case \"Refinement\":\n      return getLiterals(ast.from, isDecoding);\n    case \"Suspend\":\n      return getLiterals(ast.f(), isDecoding);\n    case \"Transformation\":\n      return getLiterals(isDecoding ? ast.from : ast.to, isDecoding);\n  }\n  return [];\n};\n/**\n * The purpose of the algorithm is to narrow down the pool of possible candidates for decoding as much as possible.\n *\n * This function separates the schemas into two groups, `keys` and `otherwise`:\n *\n * - `keys`: the schema has at least one property with a literal value\n * - `otherwise`: the schema has no properties with a literal value\n *\n * If a schema has at least one property with a literal value, so it ends up in `keys`, first a namespace is created for\n * the name of the property containing the literal, and then within this namespace a \"bucket\" is created for the literal\n * value in which to store all the schemas that have the same property and literal value.\n *\n * @internal\n */\nconst getSearchTree = (members, isDecoding) => {\n  const keys = {};\n  const otherwise = [];\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i];\n    const tags = getLiterals(member, isDecoding);\n    if (tags.length > 0) {\n      for (let j = 0; j < tags.length; j++) {\n        const [key, literal] = tags[j];\n        const hash = String(literal.literal);\n        keys[key] = keys[key] || {\n          buckets: {},\n          literals: []\n        };\n        const buckets = keys[key].buckets;\n        if (Object.prototype.hasOwnProperty.call(buckets, hash)) {\n          if (j < tags.length - 1) {\n            continue;\n          }\n          buckets[hash].push(member);\n          keys[key].literals.push(literal);\n        } else {\n          buckets[hash] = [member];\n          keys[key].literals.push(literal);\n          break;\n        }\n      }\n    } else {\n      otherwise.push(member);\n    }\n  }\n  return {\n    keys,\n    otherwise\n  };\n};\nconst dropRightRefinement = ast => _AST_js__WEBPACK_IMPORTED_MODULE_8__.isRefinement(ast) ? dropRightRefinement(ast.from) : ast;\nconst handleForbidden = (effect, ast, actual, options) => {\n  const eu = eitherOrUndefined(effect);\n  if (eu) {\n    return eu;\n  }\n  if (options?.isEffectAllowed === true) {\n    return effect;\n  }\n  try {\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(effect));\n  } catch (e) {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Forbidden(ast, actual, \"cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work\"));\n  }\n};\nconst compare = ([a], [b]) => a > b ? 1 : a < b ? -1 : 0;\nfunction sortByIndex(es) {\n  return es.sort(compare).map(t => t[1]);\n}\n// -------------------------------------------------------------------------------------\n// transformations interpreter\n// -------------------------------------------------------------------------------------\n/** @internal */\nconst getFinalTransformation = (transformation, isDecoding) => {\n  switch (transformation._tag) {\n    case \"FinalTransformation\":\n      return isDecoding ? transformation.decode : transformation.encode;\n    case \"ComposeTransformation\":\n      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n    case \"TypeLiteralTransformation\":\n      return input => {\n        let out = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(input);\n        // ---------------------------------------------\n        // handle property signature transformations\n        // ---------------------------------------------\n        for (const pst of transformation.propertySignatureTransformations) {\n          const [from, to] = isDecoding ? [pst.from, pst.to] : [pst.to, pst.from];\n          const transformation = isDecoding ? pst.decode : pst.encode;\n          const f = input => {\n            const o = transformation(Object.prototype.hasOwnProperty.call(input, from) ? effect_Option__WEBPACK_IMPORTED_MODULE_7__.some(input[from]) : effect_Option__WEBPACK_IMPORTED_MODULE_7__.none());\n            delete input[from];\n            if (effect_Option__WEBPACK_IMPORTED_MODULE_7__.isSome(o)) {\n              input[to] = o.value;\n            }\n            return input;\n          };\n          out = map(out, f);\n        }\n        return out;\n      };\n  }\n};\n//# sourceMappingURL=ParseResult.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Pretty.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Pretty.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrettyHookId: () => (/* binding */ PrettyHookId),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   pretty: () => (/* binding */ pretty)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 0.67.0\n */\nconst PrettyHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/PrettyHookId\");\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst pretty = handler => self => self.annotations({\n  [PrettyHookId]: handler\n});\n/**\n * @category prettify\n * @since 0.67.0\n */\nconst make = schema => compile(schema.ast, []);\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getAnnotation(PrettyHookId);\nconst getMatcher = defaultPretty => ast => effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n  onNone: () => defaultPretty,\n  onSome: handler => handler()\n});\nconst toString = /*#__PURE__*/getMatcher(a => String(a));\nconst stringify = /*#__PURE__*/getMatcher(a => JSON.stringify(a));\nconst formatUnknown = /*#__PURE__*/getMatcher(_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown);\n/**\n * @since 0.67.0\n */\nconst match = {\n  \"Declaration\": (ast, go, path) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value(...ast.typeParameters.map(tp => go(tp, path)));\n    }\n    throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getPrettyMissingAnnotationErrorMessage(path, ast));\n  },\n  \"VoidKeyword\": /*#__PURE__*/getMatcher(() => \"void(0)\"),\n  \"NeverKeyword\": /*#__PURE__*/getMatcher(() => {\n    throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getPrettyNeverErrorMessage);\n  }),\n  \"Literal\": /*#__PURE__*/getMatcher(literal => typeof literal === \"bigint\" ? `${String(literal)}n` : JSON.stringify(literal)),\n  \"SymbolKeyword\": toString,\n  \"UniqueSymbol\": toString,\n  \"TemplateLiteral\": stringify,\n  \"UndefinedKeyword\": toString,\n  \"UnknownKeyword\": formatUnknown,\n  \"AnyKeyword\": formatUnknown,\n  \"ObjectKeyword\": formatUnknown,\n  \"StringKeyword\": stringify,\n  \"NumberKeyword\": toString,\n  \"BooleanKeyword\": toString,\n  \"BigIntKeyword\": /*#__PURE__*/getMatcher(a => `${String(a)}n`),\n  \"Enums\": stringify,\n  \"TupleType\": (ast, go, path) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const elements = ast.elements.map((e, i) => go(e.type, path.concat(i)));\n    const rest = ast.rest.map(annotatedAST => go(annotatedAST.type, path));\n    return input => {\n      const output = [];\n      let i = 0;\n      // ---------------------------------------------\n      // handle elements\n      // ---------------------------------------------\n      for (; i < elements.length; i++) {\n        if (input.length < i + 1) {\n          if (ast.elements[i].isOptional) {\n            continue;\n          }\n        } else {\n          output.push(elements[i](input[i]));\n        }\n      }\n      // ---------------------------------------------\n      // handle rest element\n      // ---------------------------------------------\n      if (effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(rest)) {\n        const [head, ...tail] = rest;\n        for (; i < input.length - tail.length; i++) {\n          output.push(head(input[i]));\n        }\n        // ---------------------------------------------\n        // handle post rest elements\n        // ---------------------------------------------\n        for (let j = 0; j < tail.length; j++) {\n          i += j;\n          output.push(tail[j](input[i]));\n        }\n      }\n      return \"[\" + output.join(\", \") + \"]\";\n    };\n  },\n  \"TypeLiteral\": (ast, go, path) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const propertySignaturesTypes = ast.propertySignatures.map(ps => go(ps.type, path.concat(ps.name)));\n    const indexSignatureTypes = ast.indexSignatures.map(is => go(is.type, path));\n    const expectedKeys = {};\n    for (let i = 0; i < propertySignaturesTypes.length; i++) {\n      expectedKeys[ast.propertySignatures[i].name] = null;\n    }\n    return input => {\n      const output = [];\n      // ---------------------------------------------\n      // handle property signatures\n      // ---------------------------------------------\n      for (let i = 0; i < propertySignaturesTypes.length; i++) {\n        const ps = ast.propertySignatures[i];\n        const name = ps.name;\n        if (ps.isOptional && !Object.prototype.hasOwnProperty.call(input, name)) {\n          continue;\n        }\n        output.push(`${_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatPropertyKey(name)}: ${propertySignaturesTypes[i](input[name])}`);\n      }\n      // ---------------------------------------------\n      // handle index signatures\n      // ---------------------------------------------\n      if (indexSignatureTypes.length > 0) {\n        for (let i = 0; i < indexSignatureTypes.length; i++) {\n          const type = indexSignatureTypes[i];\n          const keys = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.getKeysForIndexSignature(input, ast.indexSignatures[i].parameter);\n          for (const key of keys) {\n            if (Object.prototype.hasOwnProperty.call(expectedKeys, key)) {\n              continue;\n            }\n            output.push(`${_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatPropertyKey(key)}: ${type(input[key])}`);\n          }\n        }\n      }\n      return effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(output) ? \"{ \" + output.join(\", \") + \" }\" : \"{}\";\n    };\n  },\n  \"Union\": (ast, go, path) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const types = ast.types.map(ast => [_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is({\n      ast\n    }), go(ast, path)]);\n    return a => {\n      const index = types.findIndex(([is]) => is(a));\n      if (index === -1) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getPrettyNoMatchingSchemaErrorMessage(a, path, ast));\n      }\n      return types[index][1](a);\n    };\n  },\n  \"Suspend\": (ast, go, path) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.memoizeThunk(() => go(ast.f(), path));\n        return a => get()(a);\n      },\n      onSome: handler => handler()\n    });\n  },\n  \"Refinement\": (ast, go, path) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => go(ast.from, path),\n      onSome: handler => handler()\n    });\n  },\n  \"Transformation\": (ast, go, path) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => go(ast.to, path),\n      onSome: handler => handler()\n    });\n  }\n};\nconst compile = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getCompiler(match);\n//# sourceMappingURL=Pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Pretty.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Schema.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Schema.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* binding */ Any),\n/* harmony export */   Array: () => (/* binding */ Array$),\n/* harmony export */   Base64: () => (/* binding */ Base64),\n/* harmony export */   Base64Url: () => (/* binding */ Base64Url),\n/* harmony export */   BetweenBigDecimalTypeId: () => (/* binding */ BetweenBigDecimalTypeId),\n/* harmony export */   BetweenBigIntTypeId: () => (/* binding */ BetweenBigIntTypeId),\n/* harmony export */   BetweenDurationTypeId: () => (/* binding */ BetweenDurationTypeId),\n/* harmony export */   BetweenTypeId: () => (/* binding */ BetweenTypeId),\n/* harmony export */   BigDecimal: () => (/* binding */ BigDecimal),\n/* harmony export */   BigDecimalFromNumber: () => (/* binding */ BigDecimalFromNumber),\n/* harmony export */   BigDecimalFromSelf: () => (/* binding */ BigDecimalFromSelf),\n/* harmony export */   BigInt: () => (/* binding */ BigInt$),\n/* harmony export */   BigIntFromNumber: () => (/* binding */ BigIntFromNumber),\n/* harmony export */   BigIntFromSelf: () => (/* binding */ BigIntFromSelf),\n/* harmony export */   Boolean: () => (/* binding */ Boolean$),\n/* harmony export */   BooleanFromUnknown: () => (/* binding */ BooleanFromUnknown),\n/* harmony export */   BrandTypeId: () => (/* binding */ BrandTypeId),\n/* harmony export */   Cause: () => (/* binding */ Cause),\n/* harmony export */   CauseDefectUnknown: () => (/* binding */ CauseDefectUnknown),\n/* harmony export */   CauseFromSelf: () => (/* binding */ CauseFromSelf),\n/* harmony export */   Char: () => (/* binding */ Char),\n/* harmony export */   Chunk: () => (/* binding */ Chunk),\n/* harmony export */   ChunkFromSelf: () => (/* binding */ ChunkFromSelf),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   Config: () => (/* binding */ Config),\n/* harmony export */   Data: () => (/* binding */ Data),\n/* harmony export */   DataFromSelf: () => (/* binding */ DataFromSelf),\n/* harmony export */   Date: () => (/* binding */ Date$),\n/* harmony export */   DateFromNumber: () => (/* binding */ DateFromNumber),\n/* harmony export */   DateFromSelf: () => (/* binding */ DateFromSelf),\n/* harmony export */   DateFromString: () => (/* binding */ DateFromString),\n/* harmony export */   Duration: () => (/* binding */ Duration),\n/* harmony export */   DurationFromMillis: () => (/* binding */ DurationFromMillis),\n/* harmony export */   DurationFromNanos: () => (/* binding */ DurationFromNanos),\n/* harmony export */   DurationFromSelf: () => (/* binding */ DurationFromSelf),\n/* harmony export */   Either: () => (/* binding */ Either),\n/* harmony export */   EitherFromSelf: () => (/* binding */ EitherFromSelf),\n/* harmony export */   EitherFromUnion: () => (/* binding */ EitherFromUnion),\n/* harmony export */   EndsWithTypeId: () => (/* binding */ EndsWithTypeId),\n/* harmony export */   Enums: () => (/* binding */ Enums),\n/* harmony export */   Exit: () => (/* binding */ Exit),\n/* harmony export */   ExitFromSelf: () => (/* binding */ ExitFromSelf),\n/* harmony export */   FiberId: () => (/* binding */ FiberId),\n/* harmony export */   FiberIdFromSelf: () => (/* binding */ FiberIdFromSelf),\n/* harmony export */   Finite: () => (/* binding */ Finite),\n/* harmony export */   FiniteTypeId: () => (/* binding */ FiniteTypeId),\n/* harmony export */   FromPropertySignature: () => (/* binding */ FromPropertySignature),\n/* harmony export */   GreaterThanBigDecimalTypeId: () => (/* binding */ GreaterThanBigDecimalTypeId),\n/* harmony export */   GreaterThanBigIntTypeId: () => (/* binding */ GreaterThanBigIntTypeId),\n/* harmony export */   GreaterThanDurationTypeId: () => (/* binding */ GreaterThanDurationTypeId),\n/* harmony export */   GreaterThanOrEqualToBigDecimalTypeId: () => (/* binding */ GreaterThanOrEqualToBigDecimalTypeId),\n/* harmony export */   GreaterThanOrEqualToBigIntTypeId: () => (/* binding */ GreaterThanOrEqualToBigIntTypeId),\n/* harmony export */   GreaterThanOrEqualToDurationTypeId: () => (/* binding */ GreaterThanOrEqualToDurationTypeId),\n/* harmony export */   GreaterThanOrEqualToTypeId: () => (/* binding */ GreaterThanOrEqualToTypeId),\n/* harmony export */   GreaterThanTypeId: () => (/* binding */ GreaterThanTypeId),\n/* harmony export */   HashMap: () => (/* binding */ HashMap),\n/* harmony export */   HashMapFromSelf: () => (/* binding */ HashMapFromSelf),\n/* harmony export */   HashSet: () => (/* binding */ HashSet),\n/* harmony export */   HashSetFromSelf: () => (/* binding */ HashSetFromSelf),\n/* harmony export */   Hex: () => (/* binding */ Hex),\n/* harmony export */   IncludesTypeId: () => (/* binding */ IncludesTypeId),\n/* harmony export */   InstanceOfTypeId: () => (/* binding */ InstanceOfTypeId),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   IntTypeId: () => (/* binding */ IntTypeId),\n/* harmony export */   ItemsCountTypeId: () => (/* binding */ ItemsCountTypeId),\n/* harmony export */   JsonNumber: () => (/* binding */ JsonNumber),\n/* harmony export */   JsonNumberTypeId: () => (/* binding */ JsonNumberTypeId),\n/* harmony export */   LengthTypeId: () => (/* binding */ LengthTypeId),\n/* harmony export */   LessThanBigDecimalTypeId: () => (/* binding */ LessThanBigDecimalTypeId),\n/* harmony export */   LessThanBigIntTypeId: () => (/* binding */ LessThanBigIntTypeId),\n/* harmony export */   LessThanDurationTypeId: () => (/* binding */ LessThanDurationTypeId),\n/* harmony export */   LessThanOrEqualToBigDecimalTypeId: () => (/* binding */ LessThanOrEqualToBigDecimalTypeId),\n/* harmony export */   LessThanOrEqualToBigIntTypeId: () => (/* binding */ LessThanOrEqualToBigIntTypeId),\n/* harmony export */   LessThanOrEqualToDurationTypeId: () => (/* binding */ LessThanOrEqualToDurationTypeId),\n/* harmony export */   LessThanOrEqualToTypeId: () => (/* binding */ LessThanOrEqualToTypeId),\n/* harmony export */   LessThanTypeId: () => (/* binding */ LessThanTypeId),\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   ListFromSelf: () => (/* binding */ ListFromSelf),\n/* harmony export */   Literal: () => (/* binding */ Literal),\n/* harmony export */   Lowercase: () => (/* binding */ Lowercase),\n/* harmony export */   Lowercased: () => (/* binding */ Lowercased),\n/* harmony export */   LowercasedTypeId: () => (/* binding */ LowercasedTypeId),\n/* harmony export */   Map: () => (/* binding */ map),\n/* harmony export */   MapFromSelf: () => (/* binding */ MapFromSelf),\n/* harmony export */   MaxItemsTypeId: () => (/* binding */ MaxItemsTypeId),\n/* harmony export */   MaxLengthTypeId: () => (/* binding */ MaxLengthTypeId),\n/* harmony export */   MinItemsTypeId: () => (/* binding */ MinItemsTypeId),\n/* harmony export */   MinLengthTypeId: () => (/* binding */ MinLengthTypeId),\n/* harmony export */   MultipleOfTypeId: () => (/* binding */ MultipleOfTypeId),\n/* harmony export */   Negative: () => (/* binding */ Negative),\n/* harmony export */   NegativeBigDecimalFromSelf: () => (/* binding */ NegativeBigDecimalFromSelf),\n/* harmony export */   NegativeBigDecimalTypeId: () => (/* binding */ NegativeBigDecimalTypeId),\n/* harmony export */   NegativeBigInt: () => (/* binding */ NegativeBigInt),\n/* harmony export */   NegativeBigIntFromSelf: () => (/* binding */ NegativeBigIntFromSelf),\n/* harmony export */   Never: () => (/* binding */ Never),\n/* harmony export */   NonEmpty: () => (/* binding */ NonEmpty),\n/* harmony export */   NonEmptyArray: () => (/* binding */ NonEmptyArray),\n/* harmony export */   NonEmptyChunk: () => (/* binding */ NonEmptyChunk),\n/* harmony export */   NonEmptyChunkFromSelf: () => (/* binding */ NonEmptyChunkFromSelf),\n/* harmony export */   NonNaN: () => (/* binding */ NonNaN),\n/* harmony export */   NonNaNTypeId: () => (/* binding */ NonNaNTypeId),\n/* harmony export */   NonNegative: () => (/* binding */ NonNegative),\n/* harmony export */   NonNegativeBigDecimalFromSelf: () => (/* binding */ NonNegativeBigDecimalFromSelf),\n/* harmony export */   NonNegativeBigDecimalTypeId: () => (/* binding */ NonNegativeBigDecimalTypeId),\n/* harmony export */   NonNegativeBigInt: () => (/* binding */ NonNegativeBigInt),\n/* harmony export */   NonNegativeBigIntFromSelf: () => (/* binding */ NonNegativeBigIntFromSelf),\n/* harmony export */   NonPositive: () => (/* binding */ NonPositive),\n/* harmony export */   NonPositiveBigDecimalFromSelf: () => (/* binding */ NonPositiveBigDecimalFromSelf),\n/* harmony export */   NonPositiveBigDecimalTypeId: () => (/* binding */ NonPositiveBigDecimalTypeId),\n/* harmony export */   NonPositiveBigInt: () => (/* binding */ NonPositiveBigInt),\n/* harmony export */   NonPositiveBigIntFromSelf: () => (/* binding */ NonPositiveBigIntFromSelf),\n/* harmony export */   Not: () => (/* binding */ Not),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NullOr: () => (/* binding */ NullOr),\n/* harmony export */   NullishOr: () => (/* binding */ NullishOr),\n/* harmony export */   Number: () => (/* binding */ Number$),\n/* harmony export */   NumberFromString: () => (/* binding */ NumberFromString),\n/* harmony export */   Object: () => (/* binding */ Object$),\n/* harmony export */   Option: () => (/* binding */ Option),\n/* harmony export */   OptionFromNullOr: () => (/* binding */ OptionFromNullOr),\n/* harmony export */   OptionFromNullishOr: () => (/* binding */ OptionFromNullishOr),\n/* harmony export */   OptionFromSelf: () => (/* binding */ OptionFromSelf),\n/* harmony export */   OptionFromUndefinedOr: () => (/* binding */ OptionFromUndefinedOr),\n/* harmony export */   PatternTypeId: () => (/* binding */ PatternTypeId),\n/* harmony export */   Positive: () => (/* binding */ Positive),\n/* harmony export */   PositiveBigDecimalFromSelf: () => (/* binding */ PositiveBigDecimalFromSelf),\n/* harmony export */   PositiveBigDecimalTypeId: () => (/* binding */ PositiveBigDecimalTypeId),\n/* harmony export */   PositiveBigInt: () => (/* binding */ PositiveBigInt),\n/* harmony export */   PositiveBigIntFromSelf: () => (/* binding */ PositiveBigIntFromSelf),\n/* harmony export */   PropertySignatureDeclaration: () => (/* binding */ PropertySignatureDeclaration),\n/* harmony export */   PropertySignatureTransformation: () => (/* binding */ PropertySignatureTransformation),\n/* harmony export */   PropertySignatureTypeId: () => (/* binding */ PropertySignatureTypeId),\n/* harmony export */   ReadonlyMap: () => (/* binding */ ReadonlyMap),\n/* harmony export */   ReadonlyMapFromSelf: () => (/* binding */ ReadonlyMapFromSelf),\n/* harmony export */   ReadonlySet: () => (/* binding */ ReadonlySet),\n/* harmony export */   ReadonlySetFromSelf: () => (/* binding */ ReadonlySetFromSelf),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   Redacted: () => (/* binding */ Redacted),\n/* harmony export */   RedactedFromSelf: () => (/* binding */ RedactedFromSelf),\n/* harmony export */   Set: () => (/* binding */ set),\n/* harmony export */   SetFromSelf: () => (/* binding */ SetFromSelf),\n/* harmony export */   SortedSet: () => (/* binding */ SortedSet),\n/* harmony export */   SortedSetFromSelf: () => (/* binding */ SortedSetFromSelf),\n/* harmony export */   StartsWithTypeId: () => (/* binding */ StartsWithTypeId),\n/* harmony export */   String: () => (/* binding */ String$),\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   Symbol: () => (/* binding */ Symbol$),\n/* harmony export */   SymbolFromSelf: () => (/* binding */ SymbolFromSelf),\n/* harmony export */   TaggedClass: () => (/* binding */ TaggedClass),\n/* harmony export */   TaggedError: () => (/* binding */ TaggedError),\n/* harmony export */   TaggedRequest: () => (/* binding */ TaggedRequest),\n/* harmony export */   TaggedStruct: () => (/* binding */ TaggedStruct),\n/* harmony export */   TemplateLiteral: () => (/* binding */ TemplateLiteral),\n/* harmony export */   ToPropertySignature: () => (/* binding */ ToPropertySignature),\n/* harmony export */   Trim: () => (/* binding */ Trim),\n/* harmony export */   Trimmed: () => (/* binding */ Trimmed),\n/* harmony export */   TrimmedTypeId: () => (/* binding */ TrimmedTypeId),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   ULID: () => (/* binding */ ULID),\n/* harmony export */   ULIDTypeId: () => (/* binding */ ULIDTypeId),\n/* harmony export */   UUID: () => (/* binding */ UUID),\n/* harmony export */   UUIDTypeId: () => (/* binding */ UUIDTypeId),\n/* harmony export */   Uint8Array: () => (/* binding */ Uint8Array$),\n/* harmony export */   Uint8ArrayFromSelf: () => (/* binding */ Uint8ArrayFromSelf),\n/* harmony export */   Undefined: () => (/* binding */ Undefined),\n/* harmony export */   UndefinedOr: () => (/* binding */ UndefinedOr),\n/* harmony export */   Union: () => (/* binding */ Union),\n/* harmony export */   UniqueSymbolFromSelf: () => (/* binding */ UniqueSymbolFromSelf),\n/* harmony export */   Unknown: () => (/* binding */ Unknown),\n/* harmony export */   Uppercase: () => (/* binding */ Uppercase),\n/* harmony export */   Uppercased: () => (/* binding */ Uppercased),\n/* harmony export */   UppercasedTypeId: () => (/* binding */ UppercasedTypeId),\n/* harmony export */   ValidDateFromSelf: () => (/* binding */ ValidDateFromSelf),\n/* harmony export */   ValidDateTypeId: () => (/* binding */ ValidDateTypeId),\n/* harmony export */   Void: () => (/* binding */ Void),\n/* harmony export */   annotations: () => (/* binding */ annotations),\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   asserts: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.asserts),\n/* harmony export */   attachPropertySignature: () => (/* binding */ attachPropertySignature),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   betweenBigDecimal: () => (/* binding */ betweenBigDecimal),\n/* harmony export */   betweenBigInt: () => (/* binding */ betweenBigInt),\n/* harmony export */   betweenDuration: () => (/* binding */ betweenDuration),\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   clampBigDecimal: () => (/* binding */ clampBigDecimal),\n/* harmony export */   clampBigInt: () => (/* binding */ clampBigInt),\n/* harmony export */   clampDuration: () => (/* binding */ clampDuration),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   declare: () => (/* binding */ declare),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeEither: () => (/* binding */ decodeEither),\n/* harmony export */   decodeOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeOption),\n/* harmony export */   decodePromise: () => (/* binding */ decodePromise),\n/* harmony export */   decodeSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeSync),\n/* harmony export */   decodeUnknown: () => (/* binding */ decodeUnknown),\n/* harmony export */   decodeUnknownEither: () => (/* binding */ decodeUnknownEither),\n/* harmony export */   decodeUnknownOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownOption),\n/* harmony export */   decodeUnknownPromise: () => (/* binding */ decodeUnknownPromise),\n/* harmony export */   decodeUnknownSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownSync),\n/* harmony export */   element: () => (/* binding */ element),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeEither: () => (/* binding */ encodeEither),\n/* harmony export */   encodeOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeOption),\n/* harmony export */   encodePromise: () => (/* binding */ encodePromise),\n/* harmony export */   encodeSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeSync),\n/* harmony export */   encodeUnknown: () => (/* binding */ encodeUnknown),\n/* harmony export */   encodeUnknownEither: () => (/* binding */ encodeUnknownEither),\n/* harmony export */   encodeUnknownOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownOption),\n/* harmony export */   encodeUnknownPromise: () => (/* binding */ encodeUnknownPromise),\n/* harmony export */   encodeUnknownSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownSync),\n/* harmony export */   encodedBoundSchema: () => (/* binding */ encodedBoundSchema),\n/* harmony export */   encodedSchema: () => (/* binding */ encodedSchema),\n/* harmony export */   endsWith: () => (/* binding */ endsWith),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   finite: () => (/* binding */ finite),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   fromBrand: () => (/* binding */ fromBrand),\n/* harmony export */   fromKey: () => (/* binding */ fromKey),\n/* harmony export */   getClassTag: () => (/* binding */ getClassTag),\n/* harmony export */   getNumberIndexedAccess: () => (/* binding */ getNumberIndexedAccess),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanBigDecimal: () => (/* binding */ greaterThanBigDecimal),\n/* harmony export */   greaterThanBigInt: () => (/* binding */ greaterThanBigInt),\n/* harmony export */   greaterThanDuration: () => (/* binding */ greaterThanDuration),\n/* harmony export */   greaterThanOrEqualTo: () => (/* binding */ greaterThanOrEqualTo),\n/* harmony export */   greaterThanOrEqualToBigDecimal: () => (/* binding */ greaterThanOrEqualToBigDecimal),\n/* harmony export */   greaterThanOrEqualToBigInt: () => (/* binding */ greaterThanOrEqualToBigInt),\n/* harmony export */   greaterThanOrEqualToDuration: () => (/* binding */ greaterThanOrEqualToDuration),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   headOrElse: () => (/* binding */ headOrElse),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instanceOf: () => (/* binding */ instanceOf),\n/* harmony export */   int: () => (/* binding */ int),\n/* harmony export */   is: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is),\n/* harmony export */   isSchema: () => (/* binding */ isSchema),\n/* harmony export */   itemsCount: () => (/* binding */ itemsCount),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanBigDecimal: () => (/* binding */ lessThanBigDecimal),\n/* harmony export */   lessThanBigInt: () => (/* binding */ lessThanBigInt),\n/* harmony export */   lessThanDuration: () => (/* binding */ lessThanDuration),\n/* harmony export */   lessThanOrEqualTo: () => (/* binding */ lessThanOrEqualTo),\n/* harmony export */   lessThanOrEqualToBigDecimal: () => (/* binding */ lessThanOrEqualToBigDecimal),\n/* harmony export */   lessThanOrEqualToBigInt: () => (/* binding */ lessThanOrEqualToBigInt),\n/* harmony export */   lessThanOrEqualToDuration: () => (/* binding */ lessThanOrEqualToDuration),\n/* harmony export */   lowercased: () => (/* binding */ lowercased),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makePropertySignature: () => (/* binding */ makePropertySignature),\n/* harmony export */   maxItems: () => (/* binding */ maxItems),\n/* harmony export */   maxLength: () => (/* binding */ maxLength),\n/* harmony export */   minItems: () => (/* binding */ minItems),\n/* harmony export */   minLength: () => (/* binding */ minLength),\n/* harmony export */   multipleOf: () => (/* binding */ multipleOf),\n/* harmony export */   mutable: () => (/* binding */ mutable),\n/* harmony export */   negative: () => (/* binding */ negative),\n/* harmony export */   negativeBigDecimal: () => (/* binding */ negativeBigDecimal),\n/* harmony export */   negativeBigInt: () => (/* binding */ negativeBigInt),\n/* harmony export */   nonEmpty: () => (/* binding */ nonEmpty),\n/* harmony export */   nonNaN: () => (/* binding */ nonNaN),\n/* harmony export */   nonNegative: () => (/* binding */ nonNegative),\n/* harmony export */   nonNegativeBigDecimal: () => (/* binding */ nonNegativeBigDecimal),\n/* harmony export */   nonNegativeBigInt: () => (/* binding */ nonNegativeBigInt),\n/* harmony export */   nonPositive: () => (/* binding */ nonPositive),\n/* harmony export */   nonPositiveBigDecimal: () => (/* binding */ nonPositiveBigDecimal),\n/* harmony export */   nonPositiveBigInt: () => (/* binding */ nonPositiveBigInt),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   optionalElement: () => (/* binding */ optionalElement),\n/* harmony export */   optionalToOptional: () => (/* binding */ optionalToOptional),\n/* harmony export */   optionalToRequired: () => (/* binding */ optionalToRequired),\n/* harmony export */   parseJson: () => (/* binding */ parseJson),\n/* harmony export */   parseNumber: () => (/* binding */ parseNumber),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   pattern: () => (/* binding */ pattern),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   pickLiteral: () => (/* binding */ pickLiteral),\n/* harmony export */   pluck: () => (/* binding */ pluck),\n/* harmony export */   positive: () => (/* binding */ positive),\n/* harmony export */   positiveBigDecimal: () => (/* binding */ positiveBigDecimal),\n/* harmony export */   positiveBigInt: () => (/* binding */ positiveBigInt),\n/* harmony export */   propertySignature: () => (/* binding */ propertySignature),\n/* harmony export */   refineTypeId: () => (/* binding */ refineTypeId),\n/* harmony export */   rename: () => (/* binding */ rename),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   requiredToOptional: () => (/* binding */ requiredToOptional),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   startsWith: () => (/* binding */ startsWith),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   tag: () => (/* binding */ tag),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformLiteral: () => (/* binding */ transformLiteral),\n/* harmony export */   transformLiterals: () => (/* binding */ transformLiterals),\n/* harmony export */   transformOrFail: () => (/* binding */ transformOrFail),\n/* harmony export */   trimmed: () => (/* binding */ trimmed),\n/* harmony export */   typeSchema: () => (/* binding */ typeSchema),\n/* harmony export */   uppercased: () => (/* binding */ uppercased),\n/* harmony export */   validDate: () => (/* binding */ validDate),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validateEither: () => (/* binding */ validateEither),\n/* harmony export */   validateOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateOption),\n/* harmony export */   validatePromise: () => (/* binding */ validatePromise),\n/* harmony export */   validateSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync),\n/* harmony export */   withConstructorDefault: () => (/* binding */ withConstructorDefault),\n/* harmony export */   withDecodingDefault: () => (/* binding */ withDecodingDefault),\n/* harmony export */   withDefaults: () => (/* binding */ withDefaults)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! effect/BigDecimal */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/BigDecimal.js\");\n/* harmony import */ var effect_BigInt__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! effect/BigInt */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/BigInt.js\");\n/* harmony import */ var effect_Boolean__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! effect/Boolean */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Boolean.js\");\n/* harmony import */ var effect_Cause__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! effect/Cause */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Cause.js\");\n/* harmony import */ var effect_Chunk__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! effect/Chunk */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Chunk.js\");\n/* harmony import */ var effect_Config__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! effect/Config */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Config.js\");\n/* harmony import */ var effect_ConfigError__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! effect/ConfigError */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/ConfigError.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Duration__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! effect/Duration */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Duration.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Either__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Either */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var effect_Encoding__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! effect/Encoding */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Encoding.js\");\n/* harmony import */ var effect_Equal__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! effect/Equal */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! effect/Equivalence */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var effect_Exit__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! effect/Exit */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Exit.js\");\n/* harmony import */ var effect_FiberId__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! effect/FiberId */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/FiberId.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_HashMap__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! effect/HashMap */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/HashMap.js\");\n/* harmony import */ var effect_HashSet__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! effect/HashSet */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/HashSet.js\");\n/* harmony import */ var effect_List__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! effect/List */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/List.js\");\n/* harmony import */ var effect_Number__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! effect/Number */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Number.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Pipeable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Pipeable */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var effect_Redacted__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! effect/Redacted */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Redacted.js\");\n/* harmony import */ var effect_Request__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! effect/Request */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Request.js\");\n/* harmony import */ var effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! effect/SortedSet */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/SortedSet.js\");\n/* harmony import */ var effect_String__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! effect/String */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/String.js\");\n/* harmony import */ var _Arbitrary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Arbitrary.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Arbitrary.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Equivalence.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Equivalence.js\");\n/* harmony import */ var _FastCheck_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./FastCheck.js */ \"(rsc)/./node_modules/.pnpm/fast-check@3.23.2/node_modules/fast-check/lib/esm/fast-check.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./internal/filters.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/filters.js\");\n/* harmony import */ var _internal_serializable_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./internal/serializable.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/serializable.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/* harmony import */ var _Pretty_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Pretty.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Pretty.js\");\n/* harmony import */ var _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./TreeFormatter.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/TreeFormatter.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 0.67.0\n * @category symbol\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/Schema\");\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst make = ast => class SchemaClass {\n  [TypeId] = variance;\n  static Type;\n  static Encoded;\n  static [TypeId] = variance;\n  static ast = ast;\n  static annotations(annotations) {\n    return make(mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static pipe() {\n    return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_0__.pipeArguments)(this, arguments);\n  }\n  static toString() {\n    return String(ast);\n  }\n};\nconst variance = {\n  /* c8 ignore next */\n  _A: _ => _,\n  /* c8 ignore next */\n  _I: _ => _,\n  /* c8 ignore next */\n  _R: _ => _\n};\nconst toASTAnnotations = annotations => {\n  if (!annotations) {\n    return {};\n  }\n  const out = {};\n  // symbols are reserved for custom annotations\n  const custom = Object.getOwnPropertySymbols(annotations);\n  for (const sym of custom) {\n    out[sym] = annotations[sym];\n  }\n  // string keys are reserved as /schema namespace\n  if (annotations.typeId !== undefined) {\n    const typeId = annotations.typeId;\n    if (typeof typeId === \"object\") {\n      out[_AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeAnnotationId] = typeId.id;\n      out[typeId.id] = typeId.annotation;\n    } else {\n      out[_AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeAnnotationId] = typeId;\n    }\n  }\n  const move = (from, to) => {\n    if (annotations[from] !== undefined) {\n      out[to] = annotations[from];\n    }\n  };\n  move(\"message\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.MessageAnnotationId);\n  move(\"missingMessage\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.MissingMessageAnnotationId);\n  move(\"identifier\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.IdentifierAnnotationId);\n  move(\"title\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId);\n  move(\"description\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.DescriptionAnnotationId);\n  move(\"examples\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.ExamplesAnnotationId);\n  move(\"default\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.DefaultAnnotationId);\n  move(\"documentation\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.DocumentationAnnotationId);\n  move(\"jsonSchema\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.JSONSchemaAnnotationId);\n  move(\"arbitrary\", _Arbitrary_js__WEBPACK_IMPORTED_MODULE_2__.ArbitraryHookId);\n  move(\"pretty\", _Pretty_js__WEBPACK_IMPORTED_MODULE_3__.PrettyHookId);\n  move(\"equivalence\", _Equivalence_js__WEBPACK_IMPORTED_MODULE_4__.EquivalenceHookId);\n  move(\"concurrency\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.ConcurrencyAnnotationId);\n  move(\"batching\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.BatchingAnnotationId);\n  move(\"parseIssueTitle\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.ParseIssueTitleAnnotationId);\n  move(\"parseOptions\", _AST_js__WEBPACK_IMPORTED_MODULE_1__.ParseOptionsAnnotationId);\n  return out;\n};\nconst mergeSchemaAnnotations = (ast, annotations) => _AST_js__WEBPACK_IMPORTED_MODULE_1__.annotations(ast, toASTAnnotations(annotations));\n/**\n * @since 0.67.0\n */\nconst asSchema = schema => schema;\n/**\n * @category formatting\n * @since 0.67.0\n */\nconst format = schema => String(schema.ast);\n/**\n * The `encodedSchema` function allows you to extract the `Encoded` portion of a\n * schema, creating a new schema that conforms to the properties defined in the\n * original schema without retaining any refinements or transformations that\n * were applied previously.\n *\n * @since 0.67.0\n */\nconst encodedSchema = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.encodedAST(schema.ast));\n/**\n * The `encodedBoundSchema` function is similar to `encodedSchema` but preserves\n * the refinements up to the first transformation point in the original schema.\n *\n * @since 0.67.17\n */\nconst encodedBoundSchema = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.encodedBoundAST(schema.ast));\n/**\n * The `typeSchema` function allows you to extract the `Type` portion of a\n * schema, creating a new schema that conforms to the properties defined in the\n * original schema without considering the initial encoding or transformation\n * processes.\n *\n * @since 0.67.0\n */\nconst typeSchema = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(schema.ast));\n/* c8 ignore start */\n\n/* c8 ignore end */\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknown = (schema, options) => {\n  const encodeUnknown = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(encodeUnknown(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownEither = (schema, options) => {\n  const encodeUnknownEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(encodeUnknownEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeUnknownPromise = (schema, options) => {\n  const parser = encodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encode = encodeUnknown;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodeEither = encodeUnknownEither;\n/**\n * @category encoding\n * @since 0.67.0\n */\nconst encodePromise = encodeUnknownPromise;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknown = (schema, options) => {\n  const decodeUnknown = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(decodeUnknown(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownEither = (schema, options) => {\n  const decodeUnknownEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(decodeUnknownEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeUnknownPromise = (schema, options) => {\n  const parser = decodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decode = decodeUnknown;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodeEither = decodeUnknownEither;\n/**\n * @category decoding\n * @since 0.67.0\n */\nconst decodePromise = decodeUnknownPromise;\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validate = (schema, options) => {\n  const validate = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validate(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(validate(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validateEither = (schema, options) => {\n  const validateEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(validateEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category validation\n * @since 0.67.0\n */\nconst validatePromise = (schema, options) => {\n  const parser = validate(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * Tests if a value is a `Schema`.\n *\n * @category guards\n * @since 0.67.0\n */\nconst isSchema = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, TypeId) && effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(u[TypeId]);\nconst getDefaultLiteralAST = literals => _AST_js__WEBPACK_IMPORTED_MODULE_1__.isMembers(literals) ? _AST_js__WEBPACK_IMPORTED_MODULE_1__.Union.make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.mapMembers(literals, literal => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Literal(literal))) : new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Literal(literals[0]);\nconst makeLiteralClass = (literals, ast = getDefaultLiteralAST(literals)) => class LiteralClass extends make(ast) {\n  static annotations(annotations) {\n    return makeLiteralClass(this.literals, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static literals = [...literals];\n};\nfunction Literal(...literals) {\n  return effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(literals) ? makeLiteralClass(literals) : Never;\n}\n/**\n * Creates a new `Schema` from a literal schema.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n * import { Either } from \"effect\"\n *\n * const schema = S.Literal(\"a\", \"b\", \"c\").pipe(S.pickLiteral(\"a\", \"b\"))\n *\n * assert.deepStrictEqual(S.decodeSync(schema)(\"a\"), \"a\")\n * assert.deepStrictEqual(S.decodeSync(schema)(\"b\"), \"b\")\n * assert.strictEqual(Either.isLeft(S.decodeUnknownEither(schema)(\"c\")), true)\n *\n * @category constructors\n * @since 0.67.0\n */\nconst pickLiteral = (...literals) => _schema => Literal(...literals);\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst UniqueSymbolFromSelf = symbol => make(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.UniqueSymbol(symbol));\nconst getDefaultEnumsAST = enums => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Enums(Object.keys(enums).filter(key => typeof enums[enums[key]] !== \"number\").map(key => [key, enums[key]]));\nconst makeEnumsClass = (enums, ast = getDefaultEnumsAST(enums)) => class EnumsClass extends make(ast) {\n  static annotations(annotations) {\n    return makeEnumsClass(this.enums, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static enums = {\n    ...enums\n  };\n};\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst Enums = enums => makeEnumsClass(enums);\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst TemplateLiteral = (...[head, ...tail]) => {\n  let astOrs = getTemplateLiterals(getTemplateLiteralParameterAST(head));\n  for (const span of tail) {\n    astOrs = effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(astOrs, a => getTemplateLiterals(getTemplateLiteralParameterAST(span)).map(b => combineTemplateLiterals(a, b)));\n  }\n  return make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.Union.make(astOrs.map(astOr => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(astOr) ? new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Literal(astOr) : astOr)));\n};\nconst getTemplateLiteralParameterAST = span => isSchema(span) ? span.ast : new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Literal(String(span));\nconst combineTemplateLiterals = (a, b) => {\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(a)) {\n    return effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(b) ? a + b : new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteral(a + b.head, b.spans);\n  }\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(b)) {\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteral(a.head, effect_Array__WEBPACK_IMPORTED_MODULE_9__.modifyNonEmptyLast(a.spans, span => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteralSpan(span.type, span.literal + b)));\n  }\n  return new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteral(a.head, effect_Array__WEBPACK_IMPORTED_MODULE_9__.appendAll(effect_Array__WEBPACK_IMPORTED_MODULE_9__.modifyNonEmptyLast(a.spans, span => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteralSpan(span.type, span.literal + String(b.head))), b.spans));\n};\nconst getTemplateLiterals = ast => {\n  switch (ast._tag) {\n    case \"Literal\":\n      return [String(ast.literal)];\n    case \"NumberKeyword\":\n    case \"StringKeyword\":\n      return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteral(\"\", [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TemplateLiteralSpan(ast, \"\")])];\n    case \"Union\":\n      return effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(ast.types, getTemplateLiterals);\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_10__.getSchemaUnsupportedLiteralSpanErrorMessage(ast));\n};\nconst declareConstructor = (typeParameters, options, annotations) => make(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Declaration(typeParameters.map(tp => tp.ast), (...typeParameters) => options.decode(...typeParameters.map(make)), (...typeParameters) => options.encode(...typeParameters.map(make)), toASTAnnotations(annotations)));\nconst declarePrimitive = (is, annotations) => {\n  const decodeUnknown = () => (input, _, ast) => is(input) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input));\n  const encodeUnknown = decodeUnknown;\n  return make(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Declaration([], decodeUnknown, encodeUnknown, toASTAnnotations(annotations)));\n};\n/**\n * The constraint `R extends Schema.Context<P[number]>` enforces dependencies solely from `typeParameters`.\n * This ensures that when you call `Schema.to` or `Schema.from`, you receive a schema with a `never` context.\n *\n * @category constructors\n * @since 0.67.0\n */\nconst declare = function () {\n  if (Array.isArray(arguments[0])) {\n    const typeParameters = arguments[0];\n    const options = arguments[1];\n    const annotations = arguments[2];\n    return declareConstructor(typeParameters, options, annotations);\n  }\n  const is = arguments[0];\n  const annotations = arguments[1];\n  return declarePrimitive(is, annotations);\n};\n/**\n * @category type id\n * @since 0.67.0\n */\nconst BrandTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Brand\");\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst fromBrand = (constructor, annotations) => self => makeBrandClass(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Refinement(self.ast, function predicate(a, _, ast) {\n  const either = constructor.either(a);\n  return effect_Either__WEBPACK_IMPORTED_MODULE_6__.isLeft(either) ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, a, either.left.map(v => v.message).join(\", \"))) : effect_Option__WEBPACK_IMPORTED_MODULE_11__.none();\n}, toASTAnnotations({\n  typeId: {\n    id: BrandTypeId,\n    annotation: {\n      constructor\n    }\n  },\n  ...annotations\n})));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst InstanceOfTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/InstanceOf\");\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst instanceOf = (constructor, annotations) => declare(u => u instanceof constructor, {\n  title: constructor.name,\n  description: `an instance of ${constructor.name}`,\n  pretty: () => String,\n  typeId: {\n    id: InstanceOfTypeId,\n    annotation: {\n      constructor\n    }\n  },\n  ...annotations\n});\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Undefined extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.undefinedKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Void extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.voidKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Null extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__[\"null\"]) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Never extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.neverKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Unknown extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.unknownKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass Any extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.anyKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass BigIntFromSelf extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.bigIntKeyword) {\n  static annotations = super.annotations;\n}\n/**\n * @category primitives\n * @since 0.67.0\n */\nclass SymbolFromSelf extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.symbolKeyword) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass String$ extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.stringKeyword) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass Number$ extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.numberKeyword) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass Boolean$ extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.booleanKeyword) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass Object$ extends make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.objectKeyword) {\n  static annotations = super.annotations;\n}\n\nconst getDefaultUnionAST = members => _AST_js__WEBPACK_IMPORTED_MODULE_1__.Union.members(members.map(m => m.ast));\nconst makeUnionClass = (members, ast = getDefaultUnionAST(members)) => class UnionClass extends make(ast) {\n  static annotations(annotations) {\n    return makeUnionClass(this.members, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static members = [...members];\n};\nfunction Union(...members) {\n  return _AST_js__WEBPACK_IMPORTED_MODULE_1__.isMembers(members) ? makeUnionClass(members) : effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(members) ? members[0] : Never;\n}\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst NullOr = self => Union(self, Null);\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst UndefinedOr = self => Union(self, Undefined);\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst NullishOr = self => Union(self, Null, Undefined);\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst keyof = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.keyof(self.ast));\n/**\n * @since 0.68.0\n */\nconst element = self => new ElementImpl(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType(self.ast, false), self);\n/**\n * @since 0.67.0\n */\nconst optionalElement = self => new ElementImpl(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType(self.ast, true), self);\nclass ElementImpl {\n  ast;\n  from;\n  [TypeId];\n  _Token;\n  constructor(ast, from) {\n    this.ast = ast;\n    this.from = from;\n  }\n  annotations(annotations) {\n    return new ElementImpl(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType(this.ast.type, this.ast.isOptional, {\n      ...this.ast.annotations,\n      ...toASTAnnotations(annotations)\n    }), this.from);\n  }\n  toString() {\n    return `${this.ast.type}${this.ast.isOptional ? \"?\" : \"\"}`;\n  }\n}\nconst getDefaultTupleTypeAST = (elements, rest) => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TupleType(elements.map(el => isSchema(el) ? new _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType(el.ast, false) : el.ast), rest.map(el => isSchema(el) ? new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Type(el.ast) : el.ast), true);\nconst makeTupleTypeClass = (elements, rest, ast = getDefaultTupleTypeAST(elements, rest)) => class TupleTypeClass extends make(ast) {\n  static annotations(annotations) {\n    return makeTupleTypeClass(this.elements, this.rest, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static elements = [...elements];\n  static rest = [...rest];\n};\nfunction Tuple(...args) {\n  return Array.isArray(args[0]) ? makeTupleTypeClass(args[0], args.slice(1)) : makeTupleTypeClass(args, []);\n}\nconst makeArrayClass = (value, ast) => class ArrayClass extends makeTupleTypeClass([], [value], ast) {\n  static annotations(annotations) {\n    return makeArrayClass(this.value, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static value = value;\n};\nconst Array$ = value => makeArrayClass(value);\n\nconst makeNonEmptyArrayClass = (value, ast) => class NonEmptyArrayClass extends makeTupleTypeClass([value], [value], ast) {\n  static annotations(annotations) {\n    return makeNonEmptyArrayClass(this.value, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static value = value;\n};\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst NonEmptyArray = value => makeNonEmptyArrayClass(value);\nconst formatPropertySignatureToken = isOptional => isOptional ? \"\\\"?:\\\"\" : \"\\\":\\\"\";\n/**\n * @category PropertySignature\n * @since 0.67.0\n */\nclass PropertySignatureDeclaration extends _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType {\n  isReadonly;\n  defaultValue;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"PropertySignatureDeclaration\";\n  constructor(type, isOptional, isReadonly, annotations, defaultValue) {\n    super(type, isOptional, annotations);\n    this.isReadonly = isReadonly;\n    this.defaultValue = defaultValue;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    const token = formatPropertySignatureToken(this.isOptional);\n    const type = String(this.type);\n    return `PropertySignature<${token}, ${type}, never, ${token}, ${type}>`;\n  }\n}\n/**\n * @category PropertySignature\n * @since 0.67.0\n */\nclass FromPropertySignature extends _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType {\n  isReadonly;\n  fromKey;\n  constructor(type, isOptional, isReadonly, annotations, fromKey) {\n    super(type, isOptional, annotations);\n    this.isReadonly = isReadonly;\n    this.fromKey = fromKey;\n  }\n}\n/**\n * @category PropertySignature\n * @since 0.67.0\n */\nclass ToPropertySignature extends _AST_js__WEBPACK_IMPORTED_MODULE_1__.OptionalType {\n  isReadonly;\n  defaultValue;\n  constructor(type, isOptional, isReadonly, annotations, defaultValue) {\n    super(type, isOptional, annotations);\n    this.isReadonly = isReadonly;\n    this.defaultValue = defaultValue;\n  }\n}\nconst formatPropertyKey = p => {\n  if (p === undefined) {\n    return \"never\";\n  }\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(p)) {\n    return JSON.stringify(p);\n  }\n  return String(p);\n};\n/**\n * @category PropertySignature\n * @since 0.67.0\n */\nclass PropertySignatureTransformation {\n  from;\n  to;\n  decode;\n  encode;\n  /**\n   * @since 0.67.0\n   */\n  _tag = \"PropertySignatureTransformation\";\n  constructor(from, to, decode, encode) {\n    this.from = from;\n    this.to = to;\n    this.decode = decode;\n    this.encode = encode;\n  }\n  /**\n   * @since 0.67.0\n   */\n  toString() {\n    return `PropertySignature<${formatPropertySignatureToken(this.to.isOptional)}, ${this.to.type}, ${formatPropertyKey(this.from.fromKey)}, ${formatPropertySignatureToken(this.from.isOptional)}, ${this.from.type}>`;\n  }\n}\nconst mergeSignatureAnnotations = (ast, annotations) => {\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      {\n        return new PropertySignatureDeclaration(ast.type, ast.isOptional, ast.isReadonly, {\n          ...ast.annotations,\n          ...annotations\n        }, ast.defaultValue);\n      }\n    case \"PropertySignatureTransformation\":\n      {\n        return new PropertySignatureTransformation(new FromPropertySignature(ast.from.type, ast.from.isOptional, ast.from.isReadonly, ast.from.annotations), new ToPropertySignature(ast.to.type, ast.to.isOptional, ast.to.isReadonly, {\n          ...ast.to.annotations,\n          ...annotations\n        }, ast.to.defaultValue), ast.decode, ast.encode);\n      }\n  }\n};\n/**\n * @since 0.68.0\n * @category symbol\n */\nconst PropertySignatureTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/PropertySignature\");\nclass PropertySignatureImpl {\n  ast;\n  [TypeId];\n  [PropertySignatureTypeId] = null;\n  _TypeToken;\n  _Key;\n  _EncodedToken;\n  _HasDefault;\n  constructor(ast) {\n    this.ast = ast;\n  }\n  pipe() {\n    return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_0__.pipeArguments)(this, arguments);\n  }\n  annotations(annotations) {\n    return new PropertySignatureImpl(mergeSignatureAnnotations(this.ast, toASTAnnotations(annotations)));\n  }\n  toString() {\n    return String(this.ast);\n  }\n}\n/**\n * @category PropertySignature\n * @since 0.67.15\n */\nconst makePropertySignature = ast => new PropertySignatureImpl(ast);\nclass PropertySignatureWithFromImpl extends PropertySignatureImpl {\n  from;\n  constructor(ast, from) {\n    super(ast);\n    this.from = from;\n  }\n  annotations(annotations) {\n    return new PropertySignatureWithFromImpl(mergeSignatureAnnotations(this.ast, toASTAnnotations(annotations)), this.from);\n  }\n}\n/**\n * Lifts a `Schema` into a `PropertySignature`.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst propertySignature = self => new PropertySignatureWithFromImpl(new PropertySignatureDeclaration(self.ast, false, true, {}, undefined), self);\n/**\n * Enhances a property signature with a default constructor value.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst withConstructorDefault = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, defaultValue) => {\n  const ast = self.ast;\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      return makePropertySignature(new PropertySignatureDeclaration(ast.type, ast.isOptional, ast.isReadonly, ast.annotations, defaultValue));\n    case \"PropertySignatureTransformation\":\n      return makePropertySignature(new PropertySignatureTransformation(ast.from, new ToPropertySignature(ast.to.type, ast.to.isOptional, ast.to.isReadonly, ast.to.annotations, defaultValue), ast.decode, ast.encode));\n  }\n});\nconst applyDefaultValue = (o, defaultValue) => effect_Option__WEBPACK_IMPORTED_MODULE_11__.match(o, {\n  onNone: () => effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(defaultValue()),\n  onSome: value => effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(value === undefined ? defaultValue() : value)\n});\n/**\n * Enhances a property signature with a default decoding value.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst withDecodingDefault = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, defaultValue) => {\n  const ast = self.ast;\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      return makePropertySignature(new PropertySignatureTransformation(ast, new ToPropertySignature(_AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(ast.type), false, true, {}, undefined), o => applyDefaultValue(o, defaultValue), effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity));\n    case \"PropertySignatureTransformation\":\n      return makePropertySignature(new PropertySignatureTransformation(ast.from, new ToPropertySignature(ast.to.type, false, ast.to.isReadonly, ast.to.annotations, ast.to.defaultValue), o => applyDefaultValue(ast.decode(o), defaultValue), ast.encode));\n  }\n});\n/**\n * Enhances a property signature with a default decoding value and a default constructor value.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst withDefaults = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, defaults) => self.pipe(withDecodingDefault(defaults.decoding), withConstructorDefault(defaults.constructor)));\n/**\n * Enhances a property signature by specifying a different key for it in the Encoded type.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst fromKey = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, key) => {\n  const ast = self.ast;\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      {\n        return makePropertySignature(new PropertySignatureTransformation(new FromPropertySignature(ast.type, ast.isOptional, ast.isReadonly, ast.annotations, key), new ToPropertySignature(_AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(ast.type), ast.isOptional, ast.isReadonly, {}, ast.defaultValue), effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity, effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity));\n      }\n    case \"PropertySignatureTransformation\":\n      return makePropertySignature(new PropertySignatureTransformation(new FromPropertySignature(ast.from.type, ast.from.isOptional, ast.from.isReadonly, ast.from.annotations, key), ast.to, ast.decode, ast.encode));\n  }\n});\n/**\n * Converts an optional property to a required one through a transformation `Option -> Type`.\n *\n * - `decode`: `none` as argument means the value is missing in the input.\n * - `encode`: `none` as return value means the value will be missing in the output.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst optionalToRequired = (from, to, options) => makePropertySignature(new PropertySignatureTransformation(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, false, true, {}, undefined), o => effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(options.decode(o)), effect_Option__WEBPACK_IMPORTED_MODULE_11__.flatMap(options.encode)));\n/**\n * Converts an optional property to a required one through a transformation `Type -> Option`.\n *\n * - `decode`: `none` as return value means the value will be missing in the output.\n * - `encode`: `none` as argument means the value is missing in the input.\n *\n * @category PropertySignature\n * @since 0.67.15\n */\nconst requiredToOptional = (from, to, options) => makePropertySignature(new PropertySignatureTransformation(new FromPropertySignature(from.ast, false, true, {}, undefined), new ToPropertySignature(to.ast, true, true, {}, undefined), effect_Option__WEBPACK_IMPORTED_MODULE_11__.flatMap(options.decode), o => effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(options.encode(o))));\n/**\n * Converts an optional property to another optional property through a transformation `Option -> Option`.\n *\n * - `decode`:\n *   - `none` as argument means the value is missing in the input.\n *   - `none` as return value means the value will be missing in the output.\n * - `encode`:\n *   - `none` as argument means the value is missing in the input.\n *   - `none` as return value means the value will be missing in the output.\n *\n * @category PropertySignature\n * @since 0.67.0\n */\nconst optionalToOptional = (from, to, options) => makePropertySignature(new PropertySignatureTransformation(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, true, true, {}, undefined), options.decode, options.encode));\nconst optionalPropertySignatureAST = (from, options) => {\n  const isExact = options?.exact;\n  const defaultValue = options?.default;\n  const isNullable = options?.nullable;\n  const asOption = options?.as == \"Option\";\n  const asOptionEncode = options?.onNoneEncoding ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.orElse(options.onNoneEncoding) : effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity;\n  if (isExact) {\n    if (defaultValue) {\n      if (isNullable) {\n        return withConstructorDefault(optionalToRequired(NullOr(from), typeSchema(from), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n            onNone: defaultValue,\n            onSome: a => a === null ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.some\n        }), defaultValue).ast;\n      } else {\n        return withConstructorDefault(optionalToRequired(from, typeSchema(from), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n            onNone: defaultValue,\n            onSome: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.some\n        }), defaultValue).ast;\n      }\n    } else if (asOption) {\n      if (isNullable) {\n        return optionalToRequired(NullOr(from), OptionFromSelf(typeSchema(from)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: asOptionEncode\n        }).ast;\n      } else {\n        return optionalToRequired(from, OptionFromSelf(typeSchema(from)), {\n          decode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity,\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n        }).ast;\n      }\n    } else {\n      if (isNullable) {\n        return optionalToOptional(NullOr(from), typeSchema(from), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n        }).ast;\n      } else {\n        return new PropertySignatureDeclaration(from.ast, true, true, {}, undefined);\n      }\n    }\n  } else {\n    if (defaultValue) {\n      if (isNullable) {\n        return withConstructorDefault(optionalToRequired(NullishOr(from), typeSchema(from), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n            onNone: defaultValue,\n            onSome: a => a == null ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.some\n        }), defaultValue).ast;\n      } else {\n        return withConstructorDefault(optionalToRequired(UndefinedOr(from), typeSchema(from), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n            onNone: defaultValue,\n            onSome: a => a === undefined ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.some\n        }), defaultValue).ast;\n      }\n    } else if (asOption) {\n      if (isNullable) {\n        return optionalToRequired(NullishOr(from), OptionFromSelf(typeSchema(from)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.filter(a => a != null),\n          encode: asOptionEncode\n        }).ast;\n      } else {\n        return optionalToRequired(UndefinedOr(from), OptionFromSelf(typeSchema(from)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotUndefined),\n          encode: asOptionEncode\n        }).ast;\n      }\n    } else {\n      if (isNullable) {\n        return optionalToOptional(NullishOr(from), UndefinedOr(typeSchema(from)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n        }).ast;\n      } else {\n        return new PropertySignatureDeclaration(UndefinedOr(from).ast, true, true, {}, undefined);\n      }\n    }\n  }\n};\n/**\n * @category PropertySignature\n * @since 0.67.0\n */\nconst optional = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]), (from, options) => {\n  // Note: `Schema.All extends S ? \"you can't...` is used to prevent the case where `optional` is implicitly applied.\n  // For example: `S.String.pipe(S.optional)` would result in `S.String` being inferred as `Schema.All`,\n  // which is not the intended behavior. This is mostly an aesthetic consideration, so if it causes issues, we can remove it.\n  return new PropertySignatureWithFromImpl(optionalPropertySignatureAST(from, options), from);\n});\nconst isPropertySignature = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, PropertySignatureTypeId);\nconst getDefaultTypeLiteralAST = (fields, records) => {\n  const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_13__.ownKeys(fields);\n  const pss = [];\n  if (ownKeys.length > 0) {\n    const from = [];\n    const to = [];\n    const transformations = [];\n    for (let i = 0; i < ownKeys.length; i++) {\n      const key = ownKeys[i];\n      const field = fields[key];\n      if (isPropertySignature(field)) {\n        const ast = field.ast;\n        switch (ast._tag) {\n          case \"PropertySignatureDeclaration\":\n            {\n              const type = ast.type;\n              const isOptional = ast.isOptional;\n              const toAnnotations = ast.annotations;\n              from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, type, isOptional, true));\n              to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, _AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(type), isOptional, true, toAnnotations));\n              pss.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, type, isOptional, true, toAnnotations));\n              break;\n            }\n          case \"PropertySignatureTransformation\":\n            {\n              const fromKey = ast.from.fromKey ?? key;\n              from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(fromKey, ast.from.type, ast.from.isOptional, true, ast.from.annotations));\n              to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, ast.to.type, ast.to.isOptional, true, ast.to.annotations));\n              transformations.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignatureTransformation(fromKey, key, ast.decode, ast.encode));\n              break;\n            }\n        }\n      } else {\n        from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, field.ast, false, true));\n        to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, _AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(field.ast), false, true));\n        pss.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(key, field.ast, false, true));\n      }\n    }\n    if (effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(transformations)) {\n      const issFrom = [];\n      const issTo = [];\n      for (const r of records) {\n        const {\n          indexSignatures,\n          propertySignatures\n        } = _AST_js__WEBPACK_IMPORTED_MODULE_1__.record(r.key.ast, r.value.ast);\n        propertySignatures.forEach(ps => {\n          from.push(ps);\n          to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(ps.name, _AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations));\n        });\n        indexSignatures.forEach(is => {\n          issFrom.push(is);\n          issTo.push(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.IndexSignature(is.parameter, _AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(is.type), is.isReadonly));\n        });\n      }\n      return new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteral(from, issFrom, {\n        [_AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId]: \"Struct (Encoded side)\"\n      }), new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteral(to, issTo, {\n        [_AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId]: \"Struct (Type side)\"\n      }), new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteralTransformation(transformations));\n    }\n  }\n  const iss = [];\n  for (const r of records) {\n    const {\n      indexSignatures,\n      propertySignatures\n    } = _AST_js__WEBPACK_IMPORTED_MODULE_1__.record(r.key.ast, r.value.ast);\n    propertySignatures.forEach(ps => pss.push(ps));\n    indexSignatures.forEach(is => iss.push(is));\n  }\n  return new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteral(pss, iss);\n};\nconst lazilyMergeDefaults = (fields, out) => {\n  const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_13__.ownKeys(fields);\n  for (const key of ownKeys) {\n    const field = fields[key];\n    if (out[key] === undefined && isPropertySignature(field)) {\n      const ast = field.ast;\n      const defaultValue = ast._tag === \"PropertySignatureDeclaration\" ? ast.defaultValue : ast.to.defaultValue;\n      if (defaultValue !== undefined) {\n        out[key] = defaultValue();\n      }\n    }\n  }\n  return out;\n};\nconst makeTypeLiteralClass = (fields, records, ast = getDefaultTypeLiteralAST(fields, records)) => {\n  return class TypeLiteralClass extends make(ast) {\n    static annotations(annotations) {\n      return makeTypeLiteralClass(this.fields, this.records, mergeSchemaAnnotations(this.ast, annotations));\n    }\n    static fields = {\n      ...fields\n    };\n    static records = [...records];\n    static make = (props, options) => {\n      const propsWithDefaults = lazilyMergeDefaults(fields, {\n        ...props\n      });\n      return getDisableValidationMakeOption(options) ? propsWithDefaults : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync(this)(propsWithDefaults);\n    };\n  };\n};\nfunction Struct(fields, ...records) {\n  return makeTypeLiteralClass(fields, records);\n}\n/**\n * Returns a property signature that represents a tag.\n * A tag is a literal value that is used to distinguish between different types of objects.\n * The tag is optional when using the `make` method.\n *\n * @see {@link TaggedStruct}\n *\n * @example\n * import { Schema } from \"@effect/schema\"\n *\n * const User = Schema.Struct({\n *   _tag: Schema.tag(\"User\"),\n *   name: Schema.String,\n *   age: Schema.Number\n * })\n *\n * assert.deepStrictEqual(User.make({ name: \"John\", age: 44 }), { _tag: \"User\", name: \"John\", age: 44 })\n *\n * @since 0.67.14\n */\nconst tag = tag => Literal(tag).pipe(propertySignature, withConstructorDefault(() => tag));\n/**\n * A tagged struct is a struct that has a tag property that is used to distinguish between different types of objects.\n *\n * The tag is optional when using the `make` method.\n *\n * @example\n * import { Schema } from \"@effect/schema\"\n *\n * const User = Schema.TaggedStruct(\"User\", {\n *   name: Schema.String,\n *   age: Schema.Number\n * })\n *\n * assert.deepStrictEqual(User.make({ name: \"John\", age: 44 }), { _tag: \"User\", name: \"John\", age: 44 })\n *\n * @category constructors\n * @since 0.67.14\n */\nconst TaggedStruct = (value, fields) => Struct({\n  _tag: tag(value),\n  ...fields\n});\nconst makeRecordClass = (key, value, ast) => class RecordClass extends makeTypeLiteralClass({}, [{\n  key,\n  value\n}], ast) {\n  static annotations(annotations) {\n    return makeRecordClass(key, value, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static key = key;\n  static value = value;\n};\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst Record = (key, value) => makeRecordClass(key, value);\n/**\n * @category struct transformations\n * @since 0.67.0\n */\nconst pick = (...keys) => self => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.pick(self.ast, keys));\n/**\n * @category struct transformations\n * @since 0.67.0\n */\nconst omit = (...keys) => self => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.omit(self.ast, keys));\n/**\n * Given a schema `Schema<A, I, R>` and a key `key: K`, this function extracts a specific field from the `A` type,\n * producing a new schema that represents a transformation from the `{ readonly [key]: I[K] }` type to `A[K]`.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * // ---------------------------------------------\n * // use case: pull out a single field from a\n * // struct through a transformation\n * // ---------------------------------------------\n *\n * const mytable = S.Struct({\n *   column1: S.NumberFromString,\n *   column2: S.Number\n * })\n *\n * // const pullOutColumn: S.Schema<number, {\n * //     readonly column1: string;\n * // }, never>\n * const pullOutColumn = mytable.pipe(S.pluck(\"column1\"))\n *\n * console.log(S.decodeUnknownEither(S.Array(pullOutColumn))([{ column1: \"1\", column2: 100 }, { column1: \"2\", column2: 300 }]))\n * // Output: { _id: 'Either', _tag: 'Right', right: [ 1, 2 ] }\n *\n * @category struct transformations\n * @since 0.67.0\n */\nconst pluck = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (schema, key) => {\n  const ps = _AST_js__WEBPACK_IMPORTED_MODULE_1__.getPropertyKeyIndexedAccess(_AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(schema.ast), key);\n  const value = make(ps.isOptional ? _AST_js__WEBPACK_IMPORTED_MODULE_1__.orUndefined(ps.type) : ps.type);\n  return transform(schema.pipe(pick(key)), value, {\n    decode: a => a[key],\n    encode: ak => ps.isOptional && ak === undefined ? {} : {\n      [key]: ak\n    }\n  });\n});\nconst makeBrandClass = ast => class BrandClass extends make(ast) {\n  static annotations(annotations) {\n    return makeBrandClass(mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static make = (a, options) => {\n    return getDisableValidationMakeOption(options) ? a : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync(this)(a);\n  };\n};\n/**\n * Returns a nominal branded schema by applying a brand to a given schema.\n *\n * ```\n * Schema<A> + B -> Schema<A & Brand<B>>\n * ```\n *\n * @param self - The input schema to be combined with the brand.\n * @param brand - The brand to apply.\n *\n * @example\n * import * as Schema from \"@effect/schema/Schema\"\n *\n * const Int = Schema.Number.pipe(Schema.int(), Schema.brand(\"Int\"))\n * type Int = Schema.Schema.Type<typeof Int> // number & Brand<\"Int\">\n *\n * @category branding\n * @since 0.67.0\n */\nconst brand = (brand, annotations) => self => {\n  const annotation = effect_Option__WEBPACK_IMPORTED_MODULE_11__.match(_AST_js__WEBPACK_IMPORTED_MODULE_1__.getBrandAnnotation(self.ast), {\n    onNone: () => [brand],\n    onSome: brands => [...brands, brand]\n  });\n  const ast = _AST_js__WEBPACK_IMPORTED_MODULE_1__.annotations(self.ast, toASTAnnotations({\n    // add a default title annotation containing the brand\n    title: String(self.ast) + ` & Brand<${_internal_util_js__WEBPACK_IMPORTED_MODULE_13__.formatUnknown(brand)}>`,\n    ...annotations,\n    [_AST_js__WEBPACK_IMPORTED_MODULE_1__.BrandAnnotationId]: annotation\n  }));\n  return makeBrandClass(ast);\n};\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst partial = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]), (self, options) => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.partial(self.ast, options)));\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst required = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.required(self.ast));\n/**\n * Creates a new schema with shallow mutability applied to its properties.\n *\n * @param schema - The original schema to make properties mutable (shallowly).\n *\n * @category combinators\n * @since 0.67.0\n */\nconst mutable = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.mutable(schema.ast));\nconst intersectTypeLiterals = (x, y, path) => {\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isTypeLiteral(x) && _AST_js__WEBPACK_IMPORTED_MODULE_1__.isTypeLiteral(y)) {\n    const propertySignatures = [...x.propertySignatures];\n    for (const ps of y.propertySignatures) {\n      const name = ps.name;\n      const i = propertySignatures.findIndex(ps => ps.name === name);\n      if (i === -1) {\n        propertySignatures.push(ps);\n      } else {\n        const {\n          isOptional,\n          type\n        } = propertySignatures[i];\n        propertySignatures[i] = new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignature(name, extendAST(type, ps.type, path.concat(name)), isOptional, true);\n      }\n    }\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteral(propertySignatures, x.indexSignatures.concat(y.indexSignatures));\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_10__.getSchemaExtendErrorMessage(x, y, path));\n};\nconst preserveRefinementAnnotations = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_1__.preserveAnnotations([_AST_js__WEBPACK_IMPORTED_MODULE_1__.MessageAnnotationId, _AST_js__WEBPACK_IMPORTED_MODULE_1__.JSONSchemaAnnotationId]);\nconst addRefinementToMembers = (refinement, asts) => asts.map(ast => new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Refinement(ast, refinement.filter, preserveRefinementAnnotations(refinement)));\nconst extendAST = (x, y, path) => _AST_js__WEBPACK_IMPORTED_MODULE_1__.Union.make(intersectUnionMembers([x], [y], path));\nconst getTypes = ast => _AST_js__WEBPACK_IMPORTED_MODULE_1__.isUnion(ast) ? ast.types : [ast];\nconst intersectUnionMembers = (xs, ys, path) => effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(xs, x => effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(ys, y => {\n  switch (x._tag) {\n    case \"Union\":\n      return intersectUnionMembers(x.types, getTypes(y), path);\n    case \"Suspend\":\n      return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Suspend(() => extendAST(x.f(), y, path))];\n    case \"Refinement\":\n      return addRefinementToMembers(x, intersectUnionMembers(getTypes(x.from), getTypes(y), path));\n    case \"TypeLiteral\":\n      {\n        switch (y._tag) {\n          case \"Union\":\n            return intersectUnionMembers([x], y.types, path);\n          case \"Suspend\":\n            return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Suspend(() => extendAST(x, y.f(), path))];\n          case \"Refinement\":\n            return addRefinementToMembers(y, intersectUnionMembers([x], getTypes(y.from), path));\n          case \"TypeLiteral\":\n            return [intersectTypeLiterals(x, y, path)];\n          case \"Transformation\":\n            {\n              if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isTypeLiteralTransformation(y.transformation)) {\n                return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(intersectTypeLiterals(x, y.from, path), intersectTypeLiterals(_AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(x), y.to, path), new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteralTransformation(y.transformation.propertySignatureTransformations))];\n              }\n              break;\n            }\n        }\n        break;\n      }\n    case \"Transformation\":\n      {\n        if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isTypeLiteralTransformation(x.transformation)) {\n          switch (y._tag) {\n            case \"TypeLiteral\":\n              return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(intersectTypeLiterals(x.from, y, path), intersectTypeLiterals(x.to, _AST_js__WEBPACK_IMPORTED_MODULE_1__.typeAST(y), path), new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteralTransformation(x.transformation.propertySignatureTransformations))];\n            case \"Transformation\":\n              {\n                if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isTypeLiteralTransformation(y.transformation)) {\n                  return [new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(intersectTypeLiterals(x.from, y.from, path), intersectTypeLiterals(x.to, y.to, path), new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteralTransformation(x.transformation.propertySignatureTransformations.concat(y.transformation.propertySignatureTransformations)))];\n                }\n              }\n              break;\n          }\n        }\n        break;\n      }\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_10__.getSchemaExtendErrorMessage(x, y, path));\n}));\n/**\n * Extends a schema by adding additional fields or index signatures.\n *\n * 1) It only supports **structs**, refinements of structs, unions of structs, suspensions of structs\n * (informally `Supported = Struct | Refinement of Supported | Union of Supported | suspend(() => Supported)`)\n * 2) The arguments must represent disjoint types (e.g., `extend(Struct({ a: String }), Struct({ a: String })))` raises an error)\n *\n * @example\n * import * as Schema from \"@effect/schema/Schema\"\n *\n * const schema = Schema.Struct({\n *   a: Schema.String,\n *   b: Schema.String\n * })\n *\n * // const extended: S.Schema<{\n * //     readonly [x: string]: string;\n * //     readonly a: string;\n * //     readonly b: string;\n * //     readonly c: string;\n * // }>\n * const extended = Schema.asSchema(schema.pipe(\n *   Schema.extend(Schema.Struct({ c: Schema.String })), // <= you can add more fields\n *   Schema.extend(Schema.Record(Schema.String, Schema.String)) // <= you can add index signatures\n * ))\n *\n * @category combinators\n * @since 0.67.0\n */\nconst extend = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, that) => make(extendAST(self.ast, that.ast, [])));\n/**\n * @category combinators\n * @since 0.67.0\n */\nconst compose = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[1]), (from, to) => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.compose(from.ast, to.ast)));\n/**\n * @category constructors\n * @since 0.67.0\n */\nconst suspend = f => make(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Suspend(() => f().ast));\n/**\n * @since 0.68.8\n * @category symbol\n */\nconst refineTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/refine\");\nconst makeRefineClass = (from, filter, ast) => class RefineClass extends make(ast) {\n  static annotations(annotations) {\n    return makeRefineClass(this.from, this.filter, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static [refineTypeId] = from;\n  static from = from;\n  static filter = filter;\n  static make = (a, options) => {\n    return getDisableValidationMakeOption(options) ? a : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync(this)(a);\n  };\n};\nconst fromFilterPredicateReturnTypeItem = (item, ast, input) => {\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isBoolean(item)) {\n    return item ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.none() : effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input));\n  }\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(item)) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input, item));\n  }\n  if (item !== undefined) {\n    if (\"_tag\" in item) {\n      return effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(item);\n    }\n    const issue = new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input, item.message);\n    return effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(item.path) ? new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Pointer(item.path, input, issue) : issue);\n  }\n  return effect_Option__WEBPACK_IMPORTED_MODULE_11__.none();\n};\nconst toFilterParseIssue = (out, ast, input) => {\n  if (_internal_util_js__WEBPACK_IMPORTED_MODULE_13__.isSingle(out)) {\n    return fromFilterPredicateReturnTypeItem(out, ast, input);\n  }\n  if (effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(out)) {\n    const issues = effect_Array__WEBPACK_IMPORTED_MODULE_9__.filterMap(out, issue => fromFilterPredicateReturnTypeItem(issue, ast, input));\n    if (effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(issues)) {\n      return effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(issues.length === 1 ? issues[0] : new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Composite(ast, input, issues));\n    }\n  }\n  return effect_Option__WEBPACK_IMPORTED_MODULE_11__.none();\n};\nfunction filter(predicate, annotations) {\n  return self => {\n    function filter(input, options, ast) {\n      return toFilterParseIssue(predicate(input, options, ast), ast, input);\n    }\n    const ast = new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Refinement(self.ast, filter, toASTAnnotations(annotations));\n    return makeRefineClass(self, filter, ast);\n  };\n}\nconst makeTransformationClass = (from, to, ast) => class TransformationClass extends make(ast) {\n  static annotations(annotations) {\n    return makeTransformationClass(this.from, this.to, mergeSchemaAnnotations(this.ast, annotations));\n  }\n  static from = from;\n  static to = to;\n};\n/**\n * Create a new `Schema` by transforming the input and output of an existing `Schema`\n * using the provided decoding functions.\n *\n * @category combinators\n * @since 0.67.0\n */\nconst transformOrFail = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]) && isSchema(args[1]), (from, to, options) => makeTransformationClass(from, to, new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(from.ast, to.ast, new _AST_js__WEBPACK_IMPORTED_MODULE_1__.FinalTransformation(options.decode, options.encode))));\n/**\n * Create a new `Schema` by transforming the input and output of an existing `Schema`\n * using the provided mapping functions.\n *\n * @category combinators\n * @since 0.67.0\n */\nconst transform = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]) && isSchema(args[1]), (from, to, options) => transformOrFail(from, to, {\n  decode: fromA => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(options.decode(fromA)),\n  encode: toI => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(options.encode(toI))\n}));\n/**\n * Creates a new `Schema` which transforms literal values.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * const schema = S.transformLiteral(0, \"a\")\n *\n * assert.deepStrictEqual(S.decodeSync(schema)(0), \"a\")\n *\n * @category constructors\n * @since 0.67.0\n */\nconst transformLiteral = (from, to) => transform(Literal(from), Literal(to), {\n  decode: () => to,\n  encode: () => from\n});\nfunction transformLiterals(...pairs) {\n  return Union(...pairs.map(([from, to]) => transformLiteral(from, to)));\n}\n/**\n * Attaches a property signature with the specified key and value to the schema.\n * This API is useful when you want to add a property to your schema which doesn't describe the shape of the input,\n * but rather maps to another schema, for example when you want to add a discriminant to a simple union.\n *\n * @param self - The input schema.\n * @param key - The name of the property to add to the schema.\n * @param value - The value of the property to add to the schema.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n * import { pipe } from \"effect/Function\"\n *\n * const Circle = S.Struct({ radius: S.Number })\n * const Square = S.Struct({ sideLength: S.Number })\n * const Shape = S.Union(\n *   Circle.pipe(S.attachPropertySignature(\"kind\", \"circle\")),\n *   Square.pipe(S.attachPropertySignature(\"kind\", \"square\"))\n * )\n *\n * assert.deepStrictEqual(S.decodeSync(Shape)({ radius: 10 }), {\n *   kind: \"circle\",\n *   radius: 10\n * })\n *\n * @category combinators\n * @since 0.67.0\n */\nconst attachPropertySignature = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]), (schema, key, value, annotations) => {\n  const ast = extend(typeSchema(schema), Struct({\n    [key]: effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isSymbol(value) ? UniqueSymbolFromSelf(value) : Literal(value)\n  })).ast;\n  return make(new _AST_js__WEBPACK_IMPORTED_MODULE_1__.Transformation(schema.ast, annotations ? mergeSchemaAnnotations(ast, annotations) : ast, new _AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeLiteralTransformation([new _AST_js__WEBPACK_IMPORTED_MODULE_1__.PropertySignatureTransformation(key, key, () => effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(value), () => effect_Option__WEBPACK_IMPORTED_MODULE_11__.none())])));\n});\n/**\n * @category annotations\n * @since 0.67.0\n */\nconst annotations = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, annotations) => self.annotations(annotations));\n/**\n * @category renaming\n * @since 0.67.0\n */\nconst rename = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(2, (self, mapping) => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.rename(self.ast, mapping)));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst TrimmedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Trimmed\");\n/**\n * Verifies that a string contains no leading or trailing whitespaces.\n *\n * Note. This combinator does not make any transformations, it only validates.\n * If what you were looking for was a combinator to trim strings, then check out the `trim` combinator.\n *\n * @category string filters\n * @since 0.67.0\n */\nconst trimmed = annotations => self => self.pipe(filter(a => a === a.trim(), {\n  typeId: TrimmedTypeId,\n  description: \"a string with no leading or trailing whitespace\",\n  jsonSchema: {\n    pattern: \"^\\\\S[\\\\s\\\\S]*\\\\S$|^\\\\S$|^$\"\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst MaxLengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.MaxLengthTypeId;\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst maxLength = (maxLength, annotations) => self => self.pipe(filter(a => a.length <= maxLength, {\n  typeId: MaxLengthTypeId,\n  description: `a string at most ${maxLength} character(s) long`,\n  jsonSchema: {\n    maxLength\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst MinLengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.MinLengthTypeId;\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst minLength = (minLength, annotations) => self => self.pipe(filter(a => a.length >= minLength, {\n  typeId: MinLengthTypeId,\n  description: `a string at least ${minLength} character(s) long`,\n  jsonSchema: {\n    minLength\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst PatternTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Pattern\");\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst pattern = (regex, annotations) => self => {\n  const pattern = regex.source;\n  return self.pipe(filter(a => {\n    // The following line ensures that `lastIndex` is reset to `0` in case the user has specified the `g` flag\n    regex.lastIndex = 0;\n    return regex.test(a);\n  }, {\n    typeId: {\n      id: PatternTypeId,\n      annotation: {\n        regex\n      }\n    },\n    description: `a string matching the pattern ${pattern}`,\n    jsonSchema: {\n      pattern\n    },\n    arbitrary: () => fc => fc.stringMatching(regex),\n    ...annotations\n  }));\n};\n/**\n * @category type id\n * @since 0.67.0\n */\nconst StartsWithTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/StartsWith\");\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst startsWith = (startsWith, annotations) => self => self.pipe(filter(a => a.startsWith(startsWith), {\n  typeId: {\n    id: StartsWithTypeId,\n    annotation: {\n      startsWith\n    }\n  },\n  description: `a string starting with ${JSON.stringify(startsWith)}`,\n  jsonSchema: {\n    pattern: `^${startsWith}`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst EndsWithTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/EndsWith\");\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst endsWith = (endsWith, annotations) => self => self.pipe(filter(a => a.endsWith(endsWith), {\n  typeId: {\n    id: EndsWithTypeId,\n    annotation: {\n      endsWith\n    }\n  },\n  description: `a string ending with ${JSON.stringify(endsWith)}`,\n  jsonSchema: {\n    pattern: `^.*${endsWith}$`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst IncludesTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Includes\");\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst includes = (searchString, annotations) => self => self.pipe(filter(a => a.includes(searchString), {\n  typeId: {\n    id: IncludesTypeId,\n    annotation: {\n      includes: searchString\n    }\n  },\n  description: `a string including ${JSON.stringify(searchString)}`,\n  jsonSchema: {\n    pattern: `.*${searchString}.*`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LowercasedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Lowercased\");\n/**\n * Verifies that a string is lowercased.\n *\n * @category string filters\n * @since 0.67.0\n */\nconst lowercased = annotations => self => self.pipe(filter(a => a === a.toLowerCase(), {\n  typeId: LowercasedTypeId,\n  description: \"a lowercase string\",\n  ...annotations\n}));\n/**\n * @category string constructors\n * @since 0.67.0\n */\nclass Lowercased extends String$.pipe(lowercased({\n  identifier: \"Lowercased\",\n  title: \"Lowercased\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst UppercasedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Uppercased\");\n/**\n * Verifies that a string is uppercased.\n *\n * @category string filters\n * @since 0.67.0\n */\nconst uppercased = annotations => self => self.pipe(filter(a => a === a.toUpperCase(), {\n  typeId: UppercasedTypeId,\n  description: \"an uppercase string\",\n  ...annotations\n}));\n/**\n * @category string constructors\n * @since 0.67.0\n */\nclass Uppercased extends String$.pipe(uppercased({\n  identifier: \"Uppercased\",\n  title: \"Uppercased\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.LengthTypeId;\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst length = (length, annotations) => self => {\n  const minLength = effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(length) ? Math.max(0, Math.floor(length.min)) : Math.max(0, Math.floor(length));\n  const maxLength = effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(length) ? Math.max(minLength, Math.floor(length.max)) : minLength;\n  if (minLength !== maxLength) {\n    return self.pipe(filter(a => a.length >= minLength && a.length <= maxLength, {\n      typeId: LengthTypeId,\n      description: `a string at least ${minLength} character(s) and at most ${maxLength} character(s) long`,\n      jsonSchema: {\n        minLength,\n        maxLength\n      },\n      ...annotations\n    }));\n  }\n  return self.pipe(filter(a => a.length === minLength, {\n    typeId: LengthTypeId,\n    description: minLength === 1 ? `a single character` : `a string ${minLength} character(s) long`,\n    jsonSchema: {\n      minLength,\n      maxLength: minLength\n    },\n    ...annotations\n  }));\n};\n/**\n * A schema representing a single character.\n *\n * @category string constructors\n * @since 0.67.0\n */\nclass Char extends String$.pipe(length(1, {\n  identifier: \"Char\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category string filters\n * @since 0.67.0\n */\nconst nonEmpty = annotations => minLength(1, {\n  description: \"a non empty string\",\n  ...annotations\n});\n/**\n * This schema converts a string to lowercase.\n *\n * @category string transformations\n * @since 0.67.0\n */\nclass Lowercase extends transform(String$, Lowercased, {\n  decode: s => s.toLowerCase(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n}).annotations({\n  identifier: \"Lowercase\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * This schema converts a string to uppercase.\n *\n * @category string transformations\n * @since 0.67.0\n */\nclass Uppercase extends transform(String$, Uppercased, {\n  decode: s => s.toUpperCase(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n}).annotations({\n  identifier: \"Uppercase\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * @category string constructors\n * @since 0.67.0\n */\nclass Trimmed extends String$.pipe(trimmed({\n  identifier: \"Trimmed\",\n  title: \"Trimmed\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * This schema allows removing whitespaces from the beginning and end of a string.\n *\n * @category string transformations\n * @since 0.67.0\n */\nclass Trim extends transform(String$, Trimmed, {\n  decode: s => s.trim(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n}).annotations({\n  identifier: \"Trim\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * Returns a schema that allows splitting a string into an array of strings.\n *\n * @category string transformations\n * @since 0.67.0\n */\nconst split = separator => transform(String$, Array$(String$), {\n  decode: effect_String__WEBPACK_IMPORTED_MODULE_15__.split(separator),\n  encode: effect_Array__WEBPACK_IMPORTED_MODULE_9__.join(separator)\n});\nconst JsonString = /*#__PURE__*/String$.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.IdentifierAnnotationId]: \"JsonString\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId]: \"JsonString\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.DescriptionAnnotationId]: \"a JSON string\"\n});\nconst getParseJsonTransformation = options => transformOrFail(JsonString, Unknown, {\n  decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__[\"try\"]({\n    try: () => JSON.parse(s, options?.reviver),\n    catch: e => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s, e.message)\n  }),\n  encode: (u, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__[\"try\"]({\n    try: () => JSON.stringify(u, options?.replacer, options?.space),\n    catch: e => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u, e.message)\n  })\n}).annotations({\n  typeId: _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.ParseJsonTypeId\n});\n/**\n * The `ParseJson` combinator provides a method to convert JSON strings into the `unknown` type using the underlying\n * functionality of `JSON.parse`. It also utilizes `JSON.stringify` for encoding.\n *\n * You can optionally provide a `ParseJsonOptions` to configure both `JSON.parse` and `JSON.stringify` executions.\n *\n * Optionally, you can pass a schema `Schema<A, I, R>` to obtain an `A` type instead of `unknown`.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * assert.deepStrictEqual(S.decodeUnknownSync(S.parseJson())(`{\"a\":\"1\"}`), { a: \"1\" })\n * assert.deepStrictEqual(S.decodeUnknownSync(S.parseJson(S.Struct({ a: S.NumberFromString })))(`{\"a\":\"1\"}`), { a: 1 })\n *\n * @category string transformations\n * @since 0.67.0\n */\nconst parseJson = (schema, o) => isSchema(schema) ? compose(parseJson(o), schema) : getParseJsonTransformation(schema);\n/**\n * @category string constructors\n * @since 0.67.0\n */\nclass NonEmpty extends String$.pipe(nonEmpty({\n  identifier: \"NonEmpty\",\n  title: \"NonEmpty\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst UUIDTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/UUID\");\nconst uuidRegexp = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Represents a Universally Unique Identifier (UUID).\n *\n * This schema ensures that the provided string adheres to the standard UUID format.\n *\n * @category string constructors\n * @since 0.67.0\n */\nclass UUID extends String$.pipe(pattern(uuidRegexp, {\n  typeId: UUIDTypeId,\n  identifier: \"UUID\",\n  title: \"UUID\",\n  description: \"a Universally Unique Identifier\",\n  arbitrary: () => fc => fc.uuid()\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst ULIDTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ULID\");\nconst ulidRegexp = /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i;\n/**\n * Represents a Universally Unique Lexicographically Sortable Identifier (ULID).\n *\n * ULIDs are designed to be compact, URL-safe, and ordered, making them suitable for use as identifiers.\n * This schema ensures that the provided string adheres to the standard ULID format.\n *\n * @category string constructors\n * @since 0.67.0\n */\nclass ULID extends String$.pipe(pattern(ulidRegexp, {\n  typeId: ULIDTypeId,\n  identifier: \"ULID\",\n  title: \"ULID\",\n  description: \"a Universally Unique Lexicographically Sortable Identifier\",\n  arbitrary: () => fc => fc.ulid()\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst FiniteTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Finite\");\n/**\n * Ensures that the provided value is a finite number.\n *\n * This schema filters out non-finite numeric values, allowing only finite numbers to pass through.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst finite = annotations => self => self.pipe(filter(a => Number.isFinite(a), {\n  typeId: FiniteTypeId,\n  description: \"a finite number\",\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.GreaterThanTypeId;\n/**\n * This filter checks whether the provided number is greater than the specified minimum.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst greaterThan = (min, annotations) => self => self.pipe(filter(a => a > min, {\n  typeId: GreaterThanTypeId,\n  description: min === 0 ? \"a positive number\" : `a number greater than ${min}`,\n  jsonSchema: {\n    exclusiveMinimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanOrEqualToTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.GreaterThanOrEqualToTypeId;\n/**\n * This filter checks whether the provided number is greater than or equal to the specified minimum.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst greaterThanOrEqualTo = (min, annotations) => self => self.pipe(filter(a => a >= min, {\n  typeId: GreaterThanOrEqualToTypeId,\n  description: min === 0 ? \"a non-negative number\" : `a number greater than or equal to ${min}`,\n  jsonSchema: {\n    minimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst MultipleOfTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MultipleOf\");\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst multipleOf = (divisor, annotations) => self => self.pipe(filter(a => effect_Number__WEBPACK_IMPORTED_MODULE_16__.remainder(a, divisor) === 0, {\n  typeId: MultipleOfTypeId,\n  description: `a number divisible by ${divisor}`,\n  jsonSchema: {\n    multipleOf: Math.abs(divisor)\n  },\n  // spec requires positive divisor\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst IntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.IntTypeId;\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst int = annotations => self => self.pipe(filter(a => Number.isSafeInteger(a), {\n  typeId: IntTypeId,\n  title: \"integer\",\n  description: \"an integer\",\n  jsonSchema: {\n    type: \"integer\"\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.LessThanTypeId;\n/**\n * This filter checks whether the provided number is less than the specified maximum.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst lessThan = (max, annotations) => self => self.pipe(filter(a => a < max, {\n  typeId: LessThanTypeId,\n  description: max === 0 ? \"a negative number\" : `a number less than ${max}`,\n  jsonSchema: {\n    exclusiveMaximum: max\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanOrEqualToTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.LessThanOrEqualToTypeId;\n/**\n * This schema checks whether the provided number is less than or equal to the specified maximum.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst lessThanOrEqualTo = (max, annotations) => self => self.pipe(filter(a => a <= max, {\n  typeId: LessThanOrEqualToTypeId,\n  description: max === 0 ? \"a non-positive number\" : `a number less than or equal to ${max}`,\n  jsonSchema: {\n    maximum: max\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst BetweenTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.BetweenTypeId;\n/**\n * This filter checks whether the provided number falls within the specified minimum and maximum values.\n *\n * @category number filters\n * @since 0.67.0\n */\nconst between = (min, max, annotations) => self => self.pipe(filter(a => a >= min && a <= max, {\n  typeId: BetweenTypeId,\n  description: `a number between ${min} and ${max}`,\n  jsonSchema: {\n    maximum: max,\n    minimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst NonNaNTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonNaN\");\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst nonNaN = annotations => self => self.pipe(filter(a => !Number.isNaN(a), {\n  typeId: NonNaNTypeId,\n  description: \"a number excluding NaN\",\n  ...annotations\n}));\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst positive = annotations => greaterThan(0, annotations);\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst negative = annotations => lessThan(0, annotations);\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst nonPositive = annotations => lessThanOrEqualTo(0, annotations);\n/**\n * @category number filters\n * @since 0.67.0\n */\nconst nonNegative = annotations => greaterThanOrEqualTo(0, annotations);\n/**\n * Clamps a number between a minimum and a maximum value.\n *\n * @category number transformations\n * @since 0.67.0\n */\nconst clamp = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, between(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_Number__WEBPACK_IMPORTED_MODULE_16__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n});\n/**\n * Transforms a `string` into a `number` by parsing the string using the `parse` function of the `effect/Number` module.\n *\n * It returns an error if the value can't be converted (for example when non-numeric characters are provided).\n *\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category number transformations\n * @since 0.67.0\n */\nconst parseNumber = self => transformOrFail(self, Number$, {\n  strict: false,\n  decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_Number__WEBPACK_IMPORTED_MODULE_16__.parse(s), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s)),\n  encode: n => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(String(n))\n});\n/**\n * This schema transforms a `string` into a `number` by parsing the string using the `parse` function of the `effect/Number` module.\n *\n * It returns an error if the value can't be converted (for example when non-numeric characters are provided).\n *\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category number constructors\n * @since 0.67.0\n */\nclass NumberFromString extends parseNumber(String$).annotations({\n  identifier: \"NumberFromString\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass Finite extends Number$.pipe(finite({\n  identifier: \"Finite\",\n  title: \"Finite\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass Int extends Number$.pipe(int({\n  identifier: \"Int\",\n  title: \"Int\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass NonNaN extends Number$.pipe(nonNaN({\n  identifier: \"NonNaN\",\n  title: \"NonNaN\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass Positive extends Number$.pipe(positive({\n  identifier: \"Positive\",\n  title: \"Positive\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass Negative extends Number$.pipe(negative({\n  identifier: \"Negative\",\n  title: \"Negative\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass NonPositive extends Number$.pipe(nonPositive({\n  identifier: \"NonPositive\",\n  title: \"NonPositive\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category number constructors\n * @since 0.67.0\n */\nclass NonNegative extends Number$.pipe(nonNegative({\n  identifier: \"NonNegative\",\n  title: \"NonNegative\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst JsonNumberTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/JsonNumber\");\n/**\n * The `JsonNumber` is a schema for representing JSON numbers. It ensures that the provided value is a valid\n * number by filtering out `NaN` and `(+/-) Infinity`. This is useful when you want to validate and represent numbers in JSON\n * format.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * const is = S.is(S.JsonNumber)\n *\n * assert.deepStrictEqual(is(42), true)\n * assert.deepStrictEqual(is(Number.NaN), false)\n * assert.deepStrictEqual(is(Number.POSITIVE_INFINITY), false)\n * assert.deepStrictEqual(is(Number.NEGATIVE_INFINITY), false)\n *\n * @category number constructors\n * @since 0.67.0\n */\nclass JsonNumber extends Number$.pipe(filter(n => !Number.isNaN(n) && Number.isFinite(n), {\n  typeId: JsonNumberTypeId,\n  identifier: \"JsonNumber\",\n  title: \"JSON-compatible number\",\n  description: \"a JSON-compatible number, excluding NaN, +Infinity, and -Infinity\",\n  jsonSchema: {\n    type: \"number\"\n  }\n})) {\n  static annotations = super.annotations;\n}\n/**\n * @category boolean transformations\n * @since 0.67.0\n */\nclass Not extends transform(Boolean$, Boolean$, {\n  decode: effect_Boolean__WEBPACK_IMPORTED_MODULE_17__.not,\n  encode: effect_Boolean__WEBPACK_IMPORTED_MODULE_17__.not\n}) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass Symbol$ extends transform(String$, SymbolFromSelf, {\n  strict: false,\n  decode: s => Symbol.for(s),\n  encode: sym => sym.description\n}).annotations({\n  identifier: \"symbol\"\n}) {\n  static annotations = super.annotations;\n}\n\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.GreaterThanBigintTypeId;\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst greaterThanBigInt = (min, annotations) => self => self.pipe(filter(a => a > min, {\n  typeId: {\n    id: GreaterThanBigIntTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: min === 0n ? \"a positive bigint\" : `a bigint greater than ${min}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanOrEqualToBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.GreaterThanOrEqualToBigIntTypeId;\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst greaterThanOrEqualToBigInt = (min, annotations) => self => self.pipe(filter(a => a >= min, {\n  typeId: {\n    id: GreaterThanOrEqualToBigIntTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: min === 0n ? \"a non-negative bigint\" : `a bigint greater than or equal to ${min}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.LessThanBigIntTypeId;\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst lessThanBigInt = (max, annotations) => self => self.pipe(filter(a => a < max, {\n  typeId: {\n    id: LessThanBigIntTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: max === 0n ? \"a negative bigint\" : `a bigint less than ${max}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanOrEqualToBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.LessThanOrEqualToBigIntTypeId;\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst lessThanOrEqualToBigInt = (max, annotations) => self => self.pipe(filter(a => a <= max, {\n  typeId: {\n    id: LessThanOrEqualToBigIntTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: max === 0n ? \"a non-positive bigint\" : `a bigint less than or equal to ${max}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst BetweenBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.BetweenBigintTypeId;\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst betweenBigInt = (min, max, annotations) => self => self.pipe(filter(a => a >= min && a <= max, {\n  typeId: {\n    id: BetweenBigIntTypeId,\n    annotation: {\n      max,\n      min\n    }\n  },\n  description: `a bigint between ${min}n and ${max}n`,\n  ...annotations\n}));\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst positiveBigInt = annotations => greaterThanBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst negativeBigInt = annotations => lessThanBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst nonNegativeBigInt = annotations => greaterThanOrEqualToBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 0.67.0\n */\nconst nonPositiveBigInt = annotations => lessThanOrEqualToBigInt(0n, annotations);\n/**\n * Clamps a bigint between a minimum and a maximum value.\n *\n * @category bigint transformations\n * @since 0.67.0\n */\nconst clampBigInt = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenBigInt(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_BigInt__WEBPACK_IMPORTED_MODULE_18__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n});\n/** @ignore */\nclass BigInt$ extends transformOrFail(String$, BigIntFromSelf, {\n  decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_18__.fromString(s), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s)),\n  encode: n => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(String(n))\n}).annotations({\n  identifier: \"bigint\"\n}) {\n  static annotations = super.annotations;\n}\n\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst PositiveBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/positiveBigInt({\n  identifier: \"PositiveBigintFromSelf\",\n  title: \"PositiveBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst PositiveBigInt = /*#__PURE__*/BigInt$.pipe( /*#__PURE__*/positiveBigInt({\n  identifier: \"PositiveBigint\",\n  title: \"PositiveBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NegativeBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/negativeBigInt({\n  identifier: \"NegativeBigintFromSelf\",\n  title: \"NegativeBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NegativeBigInt = /*#__PURE__*/BigInt$.pipe( /*#__PURE__*/negativeBigInt({\n  identifier: \"NegativeBigint\",\n  title: \"NegativeBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NonPositiveBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/nonPositiveBigInt({\n  identifier: \"NonPositiveBigintFromSelf\",\n  title: \"NonPositiveBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NonPositiveBigInt = /*#__PURE__*/BigInt$.pipe( /*#__PURE__*/nonPositiveBigInt({\n  identifier: \"NonPositiveBigint\",\n  title: \"NonPositiveBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NonNegativeBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/nonNegativeBigInt({\n  identifier: \"NonNegativeBigintFromSelf\",\n  title: \"NonNegativeBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 0.67.0\n */\nconst NonNegativeBigInt = /*#__PURE__*/BigInt$.pipe( /*#__PURE__*/nonNegativeBigInt({\n  identifier: \"NonNegativeBigint\",\n  title: \"NonNegativeBigint\"\n}));\n/**\n * This schema transforms a `number` into a `bigint` by parsing the number using the `BigInt` function.\n *\n * It returns an error if the value can't be safely encoded as a `number` due to being out of range.\n *\n * @category bigint transformations\n * @since 0.67.0\n */\nclass BigIntFromNumber extends transformOrFail(Number$, BigIntFromSelf, {\n  decode: (n, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_18__.fromNumber(n), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, n)),\n  encode: (b, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_18__.toNumber(b), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, b))\n}).annotations({\n  identifier: \"BigintFromNumber\"\n}) {\n  static annotations = super.annotations;\n}\nconst redactedArbitrary = value => fc => value(fc).map(x => effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.make(x));\nconst toComposite = (eff, onSuccess, ast, actual) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapBoth(eff, {\n  onFailure: e => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Composite(ast, actual, e),\n  onSuccess\n});\nconst redactedParse = decodeUnknown => (u, options, ast) => effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.isRedacted(u) ? toComposite(decodeUnknown(effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.value(u), options), effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.make, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Redacted constructors\n * @since 0.67.21\n */\nconst RedactedFromSelf = value => declare([value], {\n  decode: value => redactedParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(value)),\n  encode: value => redactedParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(value))\n}, {\n  description: \"Redacted(<redacted>)\",\n  pretty: () => () => \"Redacted(<redacted>)\",\n  arbitrary: redactedArbitrary,\n  equivalence: effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.getEquivalence\n});\n/**\n * A schema that transforms any type `A` into a `Redacted<A>`.\n *\n * @category Redacted transformations\n * @since 0.67.21\n */\nconst Redacted = value => {\n  return transform(value, RedactedFromSelf(typeSchema(value)), {\n    decode: value => effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.make(value),\n    encode: value => effect_Redacted__WEBPACK_IMPORTED_MODULE_19__.value(value)\n  });\n};\n/**\n * @category Duration constructors\n * @since 0.67.0\n */\nclass DurationFromSelf extends declare(effect_Duration__WEBPACK_IMPORTED_MODULE_20__.isDuration, {\n  identifier: \"DurationFromSelf\",\n  pretty: () => String,\n  arbitrary: () => fc => fc.oneof(fc.constant(effect_Duration__WEBPACK_IMPORTED_MODULE_20__.infinity), fc.bigUint().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.nanos(_)), fc.bigUint().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.micros(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.millis(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.seconds(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.minutes(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.hours(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.days(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.weeks(_))),\n  equivalence: () => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.Equivalence\n}) {\n  static annotations = super.annotations;\n}\n/**\n * A schema that transforms a `bigint` tuple into a `Duration`.\n * Treats the value as the number of nanoseconds.\n *\n * @category Duration transformations\n * @since 0.67.0\n */\nclass DurationFromNanos extends transformOrFail(BigIntFromSelf, DurationFromSelf, {\n  decode: nanos => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Duration__WEBPACK_IMPORTED_MODULE_20__.nanos(nanos)),\n  encode: (duration, _, ast) => effect_Option__WEBPACK_IMPORTED_MODULE_11__.match(effect_Duration__WEBPACK_IMPORTED_MODULE_20__.toNanos(duration), {\n    onNone: () => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, duration)),\n    onSome: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(val)\n  })\n}).annotations({\n  identifier: \"DurationFromNanos\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * A schema that transforms a `number` tuple into a `Duration`.\n * Treats the value as the number of milliseconds.\n *\n * @category Duration transformations\n * @since 0.67.0\n */\nclass DurationFromMillis extends transform(Number$, DurationFromSelf, {\n  decode: ms => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.millis(ms),\n  encode: n => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.toMillis(n)\n}).annotations({\n  identifier: \"DurationFromMillis\"\n}) {\n  static annotations = super.annotations;\n}\nconst hrTime = /*#__PURE__*/Tuple( /*#__PURE__*/NonNegative.pipe( /*#__PURE__*/finite({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId]: \"seconds\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.DescriptionAnnotationId]: \"seconds\"\n})), /*#__PURE__*/NonNegative.pipe( /*#__PURE__*/finite({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.TitleAnnotationId]: \"nanos\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.DescriptionAnnotationId]: \"nanos\"\n})));\n/**\n * A schema that transforms a `[number, number]` tuple into a `Duration`.\n *\n * @category Duration transformations\n * @since 0.67.0\n */\nclass Duration extends transform(hrTime, DurationFromSelf, {\n  decode: ([seconds, nanos]) => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.nanos(BigInt(seconds) * BigInt(1e9) + BigInt(nanos)),\n  encode: duration => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.toHrTime(duration)\n}).annotations({\n  identifier: \"Duration\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * Clamps a `Duration` between a minimum and a maximum value.\n *\n * @category Duration transformations\n * @since 0.67.0\n */\nconst clampDuration = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenDuration(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n});\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanDuration\");\n/**\n * @category Duration filters\n * @since 0.67.0\n */\nconst lessThanDuration = (max, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.lessThan(a, max), {\n  typeId: {\n    id: LessThanDurationTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a Duration less than ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanOrEqualToDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToDuration\");\n/**\n * @category Duration filters\n * @since 0.67.0\n */\nconst lessThanOrEqualToDuration = (max, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.lessThanOrEqualTo(a, max), {\n  typeId: {\n    id: LessThanDurationTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a Duration less than or equal to ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanDuration\");\n/**\n * @category Duration filters\n * @since 0.67.0\n */\nconst greaterThanDuration = (min, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.greaterThan(a, min), {\n  typeId: {\n    id: GreaterThanDurationTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a Duration greater than ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanOrEqualToDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToDuration\");\n/**\n * @category Duration filters\n * @since 0.67.0\n */\nconst greaterThanOrEqualToDuration = (min, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.greaterThanOrEqualTo(a, min), {\n  typeId: {\n    id: GreaterThanOrEqualToDurationTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a Duration greater than or equal to ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst BetweenDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenDuration\");\n/**\n * @category Duration filters\n * @since 0.67.0\n */\nconst betweenDuration = (minimum, maximum, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_20__.between(a, {\n  minimum,\n  maximum\n}), {\n  typeId: {\n    id: BetweenDurationTypeId,\n    annotation: {\n      maximum,\n      minimum\n    }\n  },\n  description: `a Duration between ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(minimum)} and ${effect_Duration__WEBPACK_IMPORTED_MODULE_20__.decode(maximum)}`,\n  ...annotations\n}));\n/**\n * @category Uint8Array constructors\n * @since 0.67.0\n */\nconst Uint8ArrayFromSelf = /*#__PURE__*/declare(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isUint8Array, {\n  identifier: \"Uint8ArrayFromSelf\",\n  pretty: () => u8arr => `new Uint8Array(${JSON.stringify(Array.from(u8arr))})`,\n  arbitrary: () => fc => fc.uint8Array(),\n  equivalence: () => effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equal__WEBPACK_IMPORTED_MODULE_21__.equals)\n});\nconst Uint8Array$ = /*#__PURE__*/transform(Array$(Number$.pipe(between(0, 255, {\n  title: \"8-bit unsigned integer\",\n  description: \"a 8-bit unsigned integer\"\n}))).annotations({\n  description: \"an array of 8-bit unsigned integers\"\n}), Uint8ArrayFromSelf, {\n  decode: numbers => Uint8Array.from(numbers),\n  encode: uint8Array => Array.from(uint8Array)\n}).annotations({\n  identifier: \"Uint8Array\"\n});\n\nconst makeEncodingTransformation = (id, decode, encode) => transformOrFail(String$, Uint8ArrayFromSelf, {\n  decode: (s, _, ast) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(decode(s), decodeException => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s, decodeException.message)),\n  encode: u => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(encode(u))\n}).annotations({\n  identifier: id\n});\n/**\n * @category Encoding transformations\n * @since 0.67.0\n */\nconst Base64 = /*#__PURE__*/makeEncodingTransformation(\"Base64\", effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.decodeBase64, effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.encodeBase64);\n/**\n * @category Encoding transformations\n * @since 0.67.0\n */\nconst Base64Url = /*#__PURE__*/makeEncodingTransformation(\"Base64Url\", effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.decodeBase64Url, effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.encodeBase64Url);\n/**\n * @category Encoding transformations\n * @since 0.67.0\n */\nconst Hex = /*#__PURE__*/makeEncodingTransformation(\"Hex\", effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.decodeHex, effect_Encoding__WEBPACK_IMPORTED_MODULE_22__.encodeHex);\n/**\n * @category type id\n * @since 0.67.0\n */\nconst MinItemsTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.MinItemsTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 0.67.0\n */\nconst minItems = (n, annotations) => self => {\n  const minItems = Math.floor(n);\n  if (minItems < 1) {\n    throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_10__.getInvalidArgumentErrorMessage(`Expected an integer greater than or equal to 1, actual ${n}`));\n  }\n  return self.pipe(filter(a => a.length >= minItems, {\n    typeId: MinItemsTypeId,\n    description: `an array of at least ${minItems} items`,\n    jsonSchema: {\n      minItems\n    },\n    [_AST_js__WEBPACK_IMPORTED_MODULE_1__.StableFilterAnnotationId]: true,\n    ...annotations\n  }));\n};\n/**\n * @category type id\n * @since 0.67.0\n */\nconst MaxItemsTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.MaxItemsTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 0.67.0\n */\nconst maxItems = (n, annotations) => self => self.pipe(filter(a => a.length <= n, {\n  typeId: MaxItemsTypeId,\n  description: `an array of at most ${n} items`,\n  jsonSchema: {\n    maxItems: n\n  },\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.StableFilterAnnotationId]: true,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst ItemsCountTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_14__.ItemsCountTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 0.67.0\n */\nconst itemsCount = (n, annotations) => self => self.pipe(filter(a => a.length === n, {\n  typeId: ItemsCountTypeId,\n  description: `an array of exactly ${n} item(s)`,\n  jsonSchema: {\n    minItems: n,\n    maxItems: n\n  },\n  [_AST_js__WEBPACK_IMPORTED_MODULE_1__.StableFilterAnnotationId]: true,\n  ...annotations\n}));\n/**\n * @category ReadonlyArray transformations\n * @since 0.67.0\n */\nconst getNumberIndexedAccess = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_1__.getNumberIndexedAccess(self.ast));\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the array is empty.\n *\n * @category ReadonlyArray transformations\n * @since 0.67.0\n */\nconst head = self => transform(self, OptionFromSelf(getNumberIndexedAccess(typeSchema(self))), {\n  decode: effect_Array__WEBPACK_IMPORTED_MODULE_9__.head,\n  encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n    onNone: () => [],\n    onSome: effect_Array__WEBPACK_IMPORTED_MODULE_9__.of\n  })\n});\n/**\n * Retrieves the first element of a `ReadonlyArray`.\n *\n * If the array is empty, it returns the `fallback` argument if provided; otherwise, it fails.\n *\n * @category ReadonlyArray transformations\n * @since 0.67.0\n */\nconst headOrElse = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_12__.dual)(args => isSchema(args[0]), (self, fallback) => transformOrFail(self, getNumberIndexedAccess(typeSchema(self)), {\n  decode: (as, _, ast) => as.length > 0 ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(as[0]) : fallback ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(fallback()) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, as)),\n  encode: a => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Array__WEBPACK_IMPORTED_MODULE_9__.of(a))\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst ValidDateTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ValidDate\");\n/**\n * Defines a filter that specifically rejects invalid dates, such as `new\n * Date(\"Invalid Date\")`. This filter ensures that only properly formatted and\n * valid date objects are accepted, enhancing data integrity by preventing\n * erroneous date values from being processed.\n *\n * @category Date filters\n * @since 0.67.0\n */\nconst validDate = annotations => self => self.pipe(filter(a => !Number.isNaN(a.getTime()), {\n  typeId: ValidDateTypeId,\n  description: \"a valid Date\",\n  ...annotations\n}));\n/**\n * Describes a schema that accommodates potentially invalid `Date` instances,\n * such as `new Date(\"Invalid Date\")`, without rejection.\n *\n * @category Date constructors\n * @since 0.67.0\n */\nclass DateFromSelf extends declare(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isDate, {\n  identifier: \"DateFromSelf\",\n  description: \"a potentially invalid Date instance\",\n  pretty: () => date => `new Date(${JSON.stringify(date)})`,\n  arbitrary: () => fc => fc.date({\n    noInvalidDate: false\n  }),\n  equivalence: () => effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.Date\n}) {\n  static annotations = super.annotations;\n}\n/**\n * Defines a schema that ensures only valid dates are accepted. This schema\n * rejects values like `new Date(\"Invalid Date\")`, which, despite being a `Date`\n * instance, represents an invalid date. Such stringent validation ensures that\n * all date objects processed through this schema are properly formed and\n * represent real dates.\n *\n * @category Date constructors\n * @since 0.67.0\n */\nclass ValidDateFromSelf extends DateFromSelf.pipe(validDate({\n  identifier: \"ValidDateFromSelf\",\n  description: \"a valid Date instance\"\n})) {\n  static annotations = super.annotations;\n}\n/**\n * Defines a schema that attempts to convert a `string` to a `Date` object using\n * the `new Date` constructor. This conversion is lenient, meaning it does not\n * reject strings that do not form valid dates (e.g., using `new Date(\"Invalid\n * Date\")` results in a `Date` object, despite being invalid).\n *\n * @category Date transformations\n * @since 0.67.0\n */\nclass DateFromString extends transform(String$, DateFromSelf, {\n  decode: s => new Date(s),\n  encode: d => d.toISOString()\n}).annotations({\n  identifier: \"DateFromString\"\n}) {\n  static annotations = super.annotations;\n}\n/** @ignore */\nclass Date$ extends DateFromString.pipe(validDate({\n  identifier: \"Date\"\n})) {\n  static annotations = super.annotations;\n}\n\n/**\n * Defines a schema that converts a `number` into a `Date` object using the `new\n * Date` constructor. This schema does not validate the numerical input,\n * allowing potentially invalid values such as `NaN`, `Infinity`, and\n * `-Infinity` to be converted into `Date` objects. During the encoding process,\n * any invalid `Date` object will be encoded to `NaN`.\n *\n * @category Date transformations\n * @since 0.67.0\n */\nclass DateFromNumber extends transform(Number$, DateFromSelf, {\n  decode: n => new Date(n),\n  encode: d => d.getTime()\n}).annotations({\n  identifier: \"DateFromNumber\"\n}) {\n  static annotations = super.annotations;\n}\nconst OptionNoneEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"None\")\n}).annotations({\n  description: \"NoneEncoded\"\n});\nconst optionSomeEncoded = value => Struct({\n  _tag: Literal(\"Some\"),\n  value\n}).annotations({\n  description: `SomeEncoded<${format(value)}>`\n});\nconst optionEncoded = value => Union(OptionNoneEncoded, optionSomeEncoded(value)).annotations({\n  description: `OptionEncoded<${format(value)}>`\n});\nconst optionDecode = input => input._tag === \"None\" ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.none() : effect_Option__WEBPACK_IMPORTED_MODULE_11__.some(input.value);\nconst optionArbitrary = value => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"None\")\n}), fc.record({\n  _tag: fc.constant(\"Some\"),\n  value: value(fc)\n})).map(optionDecode);\nconst optionPretty = value => effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n  onNone: () => \"none()\",\n  onSome: a => `some(${value(a)})`\n});\nconst optionParse = decodeUnknown => (u, options, ast) => effect_Option__WEBPACK_IMPORTED_MODULE_11__.isOption(u) ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.isNone(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Option__WEBPACK_IMPORTED_MODULE_11__.none()) : toComposite(decodeUnknown(u.value, options), effect_Option__WEBPACK_IMPORTED_MODULE_11__.some, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Option transformations\n * @since 0.67.0\n */\nconst OptionFromSelf = value => {\n  return declare([value], {\n    decode: value => optionParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(value)),\n    encode: value => optionParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(value))\n  }, {\n    description: `Option<${format(value)}>`,\n    pretty: optionPretty,\n    arbitrary: optionArbitrary,\n    equivalence: effect_Option__WEBPACK_IMPORTED_MODULE_11__.getEquivalence\n  });\n};\nconst makeNoneEncoded = {\n  _tag: \"None\"\n};\nconst makeSomeEncoded = value => ({\n  _tag: \"Some\",\n  value\n});\n/**\n * @category Option transformations\n * @since 0.67.0\n */\nconst Option = value => {\n  const value_ = asSchema(value);\n  return transform(optionEncoded(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: optionDecode,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n      onNone: () => makeNoneEncoded,\n      onSome: makeSomeEncoded\n    })\n  });\n};\n/**\n * @category Option transformations\n * @since 0.67.0\n */\nconst OptionFromNullOr = value => {\n  const value_ = asSchema(value);\n  return transform(NullOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.fromNullable,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.getOrNull\n  });\n};\n/**\n * @category Option transformations\n * @since 0.67.0\n */\nconst OptionFromNullishOr = (value, onNoneEncoding) => {\n  const value_ = asSchema(value);\n  return transform(NullishOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.fromNullable,\n    encode: onNoneEncoding === null ? effect_Option__WEBPACK_IMPORTED_MODULE_11__.getOrNull : effect_Option__WEBPACK_IMPORTED_MODULE_11__.getOrUndefined\n  });\n};\n/**\n * @category Option transformations\n * @since 0.67.0\n */\nconst OptionFromUndefinedOr = value => {\n  const value_ = asSchema(value);\n  return transform(UndefinedOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.fromNullable,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_11__.getOrUndefined\n  });\n};\nconst rightEncoded = right => Struct({\n  _tag: Literal(\"Right\"),\n  right\n}).annotations({\n  description: `RightEncoded<${format(right)}>`\n});\nconst leftEncoded = left => Struct({\n  _tag: Literal(\"Left\"),\n  left\n}).annotations({\n  description: `LeftEncoded<${format(left)}>`\n});\nconst eitherEncoded = (right, left) => Union(rightEncoded(right), leftEncoded(left)).annotations({\n  description: `EitherEncoded<${format(left)}, ${format(right)}>`\n});\nconst eitherDecode = input => input._tag === \"Left\" ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.left(input.left) : effect_Either__WEBPACK_IMPORTED_MODULE_6__.right(input.right);\nconst eitherArbitrary = (right, left) => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"Left\"),\n  left: left(fc)\n}), fc.record({\n  _tag: fc.constant(\"Right\"),\n  right: right(fc)\n})).map(eitherDecode);\nconst eitherPretty = (right, left) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n  onLeft: e => `left(${left(e)})`,\n  onRight: a => `right(${right(a)})`\n});\nconst eitherParse = (parseRight, decodeUnknownLeft) => (u, options, ast) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.isEither(u) ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.match(u, {\n  onLeft: left => toComposite(decodeUnknownLeft(left, options), effect_Either__WEBPACK_IMPORTED_MODULE_6__.left, ast, u),\n  onRight: right => toComposite(parseRight(right, options), effect_Either__WEBPACK_IMPORTED_MODULE_6__.right, ast, u)\n}) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Either transformations\n * @since 0.67.0\n */\nconst EitherFromSelf = ({\n  left,\n  right\n}) => {\n  return declare([right, left], {\n    decode: (right, left) => eitherParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(right), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(left)),\n    encode: (right, left) => eitherParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(right), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(left))\n  }, {\n    description: `Either<${format(right)}, ${format(left)}>`,\n    pretty: eitherPretty,\n    arbitrary: eitherArbitrary,\n    equivalence: (right, left) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.getEquivalence({\n      left,\n      right\n    })\n  });\n};\nconst makeLeftEncoded = left => ({\n  _tag: \"Left\",\n  left\n});\nconst makeRightEncoded = right => ({\n  _tag: \"Right\",\n  right\n});\n/**\n * @category Either transformations\n * @since 0.67.0\n */\nconst Either = ({\n  left,\n  right\n}) => {\n  const right_ = asSchema(right);\n  const left_ = asSchema(left);\n  return transform(eitherEncoded(right_, left_), EitherFromSelf({\n    left: typeSchema(left_),\n    right: typeSchema(right_)\n  }), {\n    decode: eitherDecode,\n    encode: effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n      onLeft: makeLeftEncoded,\n      onRight: makeRightEncoded\n    })\n  });\n};\n/**\n * @example\n * import * as Schema from \"@effect/schema/Schema\"\n *\n * // Schema<string | number, Either<string, number>>\n * Schema.EitherFromUnion({ left: Schema.String, right: Schema.Number })\n *\n * @category Either transformations\n * @since 0.67.0\n */\nconst EitherFromUnion = ({\n  left,\n  right\n}) => {\n  const right_ = asSchema(right);\n  const left_ = asSchema(left);\n  const toright = typeSchema(right_);\n  const toleft = typeSchema(left_);\n  const fromRight = transform(right_, rightEncoded(toright), {\n    decode: makeRightEncoded,\n    encode: r => r.right\n  });\n  const fromLeft = transform(left_, leftEncoded(toleft), {\n    decode: makeLeftEncoded,\n    encode: l => l.left\n  });\n  return transform(Union(fromRight, fromLeft), EitherFromSelf({\n    left: toleft,\n    right: toright\n  }), {\n    decode: from => from._tag === \"Left\" ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.left(from.left) : effect_Either__WEBPACK_IMPORTED_MODULE_6__.right(from.right),\n    encode: effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n      onLeft: makeLeftEncoded,\n      onRight: makeRightEncoded\n    })\n  });\n};\nconst mapArbitrary = (key, value) => fc => fc.array(fc.tuple(key(fc), value(fc))).map(as => new Map(as));\nconst readonlyMapPretty = (key, value) => map => `new Map([${Array.from(map.entries()).map(([k, v]) => `[${key(k)}, ${value(v)}]`).join(\", \")}])`;\nconst readonlyMapEquivalence = (key, value) => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make(([ka, va], [kb, vb]) => key(ka, kb) && value(va, vb)));\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make((a, b) => arrayEquivalence(Array.from(a.entries()), Array.from(b.entries())));\n};\nconst readonlyMapParse = decodeUnknown => (u, options, ast) => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isMap(u) ? toComposite(decodeUnknown(Array.from(u.entries()), options), as => new Map(as), ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\nconst mapFromSelf_ = (key, value, description) => declare([key, value], {\n  decode: (Key, Value) => readonlyMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(Tuple(Key, Value)))),\n  encode: (Key, Value) => readonlyMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(Tuple(Key, Value))))\n}, {\n  description,\n  pretty: readonlyMapPretty,\n  arbitrary: mapArbitrary,\n  equivalence: readonlyMapEquivalence\n});\n/**\n * @category ReadonlyMap\n * @since 0.67.0\n */\nconst ReadonlyMapFromSelf = ({\n  key,\n  value\n}) => mapFromSelf_(key, value, `ReadonlyMap<${format(key)}, ${format(value)}>`);\n/**\n * @category Map\n * @since 0.67.0\n */\nconst MapFromSelf = ({\n  key,\n  value\n}) => mapFromSelf_(key, value, `Map<${format(key)}, ${format(value)}>`);\n/**\n * @category ReadonlyMap transformations\n * @since 0.67.0\n */\nconst ReadonlyMap = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform(Array$(Tuple(key_, value_)), ReadonlyMapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => new Map(as),\n    encode: map => Array.from(map.entries())\n  });\n};\nconst map = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform(Array$(Tuple(key_, value_)), MapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => new Map(as),\n    encode: map => Array.from(map.entries())\n  });\n};\n\nconst setArbitrary = item => fc => fc.array(item(fc)).map(as => new Set(as));\nconst readonlySetPretty = item => set => `new Set([${Array.from(set.values()).map(a => item(a)).join(\", \")}])`;\nconst readonlySetEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make((a, b) => arrayEquivalence(Array.from(a.values()), Array.from(b.values())));\n};\nconst readonlySetParse = decodeUnknown => (u, options, ast) => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isSet(u) ? toComposite(decodeUnknown(Array.from(u.values()), options), as => new Set(as), ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\nconst setFromSelf_ = (value, description) => declare([value], {\n  decode: item => readonlySetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(item))),\n  encode: item => readonlySetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(item)))\n}, {\n  description,\n  pretty: readonlySetPretty,\n  arbitrary: setArbitrary,\n  equivalence: readonlySetEquivalence\n});\n/**\n * @category ReadonlySet\n * @since 0.67.0\n */\nconst ReadonlySetFromSelf = value => setFromSelf_(value, `ReadonlySet<${format(value)}>`);\n/**\n * @category Set\n * @since 0.67.0\n */\nconst SetFromSelf = value => setFromSelf_(value, `Set<${format(value)}>`);\n/**\n * @category ReadonlySet transformations\n * @since 0.67.0\n */\nconst ReadonlySet = value => {\n  const value_ = asSchema(value);\n  return transform(Array$(value_), ReadonlySetFromSelf(typeSchema(value_)), {\n    decode: as => new Set(as),\n    encode: set => Array.from(set)\n  });\n};\nconst set = value => {\n  const value_ = asSchema(value);\n  return transform(Array$(value_), SetFromSelf(typeSchema(value_)), {\n    decode: as => new Set(as),\n    encode: set => Array.from(set)\n  });\n};\n\nconst bigDecimalPretty = () => val => `BigDecimal(${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.normalize(val))})`;\nconst bigDecimalArbitrary = () => fc => fc.tuple(fc.bigInt(), fc.integer()).map(([value, scale]) => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.make(value, scale));\n/**\n * @category BigDecimal constructors\n * @since 0.67.0\n */\nclass BigDecimalFromSelf extends declare(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.isBigDecimal, {\n  identifier: \"BigDecimalFromSelf\",\n  pretty: bigDecimalPretty,\n  arbitrary: bigDecimalArbitrary,\n  equivalence: () => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.Equivalence\n}) {\n  static annotations = super.annotations;\n}\n/**\n * @category BigDecimal transformations\n * @since 0.67.0\n */\nclass BigDecimal extends transformOrFail(String$, BigDecimalFromSelf, {\n  decode: (num, _, ast) => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.fromString(num).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_11__.match({\n    onNone: () => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, num)),\n    onSome: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.normalize(val))\n  })),\n  encode: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.normalize(val)))\n}).annotations({\n  identifier: \"BigDecimal\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * A schema that transforms a `number` into a `BigDecimal`.\n * When encoding, this Schema will produce incorrect results if the BigDecimal exceeds the 64-bit range of a number.\n *\n * @category BigDecimal transformations\n * @since 0.67.0\n */\nclass BigDecimalFromNumber extends transformOrFail(Number$, BigDecimalFromSelf, {\n  decode: num => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.fromNumber(num)),\n  encode: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.unsafeToNumber(val))\n}).annotations({\n  identifier: \"BigDecimalFromNumber\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst greaterThanBigDecimal = (min, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.greaterThan(a, min), {\n  typeId: {\n    id: GreaterThanBigDecimalTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a BigDecimal greater than ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst GreaterThanOrEqualToBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst greaterThanOrEqualToBigDecimal = (min, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.greaterThanOrEqualTo(a, min), {\n  typeId: {\n    id: GreaterThanOrEqualToBigDecimalTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a BigDecimal greater than or equal to ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst lessThanBigDecimal = (max, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.lessThan(a, max), {\n  typeId: {\n    id: LessThanBigDecimalTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a BigDecimal less than ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst LessThanOrEqualToBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst lessThanOrEqualToBigDecimal = (max, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.lessThanOrEqualTo(a, max), {\n  typeId: {\n    id: LessThanOrEqualToBigDecimalTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a BigDecimal less than or equal to ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst PositiveBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/PositiveBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst positiveBigDecimal = annotations => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.isPositive(a), {\n  typeId: {\n    id: PositiveBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a positive BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 0.67.0\n */\nconst PositiveBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/positiveBigDecimal({\n  identifier: \"PositiveBigDecimalFromSelf\",\n  title: \"PositiveBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst NonNegativeBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonNegativeBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst nonNegativeBigDecimal = annotations => self => self.pipe(filter(a => a.value >= 0n, {\n  typeId: {\n    id: NonNegativeBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a non-negative BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 0.67.0\n */\nconst NonNegativeBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/nonNegativeBigDecimal({\n  identifier: \"NonNegativeBigDecimalFromSelf\",\n  title: \"NonNegativeBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst NegativeBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NegativeBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst negativeBigDecimal = annotations => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.isNegative(a), {\n  typeId: {\n    id: NegativeBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a negative BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 0.67.0\n */\nconst NegativeBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/negativeBigDecimal({\n  identifier: \"NegativeBigDecimalFromSelf\",\n  title: \"NegativeBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst NonPositiveBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonPositiveBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst nonPositiveBigDecimal = annotations => self => self.pipe(filter(a => a.value <= 0n, {\n  typeId: {\n    id: NonPositiveBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a non-positive BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 0.67.0\n */\nconst NonPositiveBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/nonPositiveBigDecimal({\n  identifier: \"NonPositiveBigDecimalFromSelf\",\n  title: \"NonPositiveBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 0.67.0\n */\nconst BetweenBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 0.67.0\n */\nconst betweenBigDecimal = (minimum, maximum, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.between(a, {\n  minimum,\n  maximum\n}), {\n  typeId: {\n    id: BetweenBigDecimalTypeId,\n    annotation: {\n      maximum,\n      minimum\n    }\n  },\n  description: `a BigDecimal between ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(minimum)} and ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.format(maximum)}`,\n  ...annotations\n}));\n/**\n * Clamps a `BigDecimal` between a minimum and a maximum value.\n *\n * @category BigDecimal transformations\n * @since 0.67.0\n */\nconst clampBigDecimal = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenBigDecimal(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_24__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n});\nconst chunkArbitrary = item => fc => fc.array(item(fc)).map(effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.fromIterable);\nconst chunkPretty = item => c => `Chunk(${effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray(c).map(item).join(\", \")})`;\nconst chunkParse = decodeUnknown => (u, options, ast) => effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.isChunk(u) ? effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.isEmpty(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.empty()) : toComposite(decodeUnknown(effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray(u), options), effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.fromIterable, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Chunk\n * @since 0.67.0\n */\nconst ChunkFromSelf = value => {\n  return declare([value], {\n    decode: item => chunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(item))),\n    encode: item => chunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(item)))\n  }, {\n    description: `Chunk<${format(value)}>`,\n    pretty: chunkPretty,\n    arbitrary: chunkArbitrary,\n    equivalence: effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.getEquivalence\n  });\n};\n/**\n * @category Chunk transformations\n * @since 0.67.0\n */\nconst Chunk = value => {\n  const value_ = asSchema(value);\n  return transform(Array$(value_), ChunkFromSelf(typeSchema(value_)), {\n    decode: as => as.length === 0 ? effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.empty() : effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.fromIterable(as),\n    encode: effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray\n  });\n};\nconst nonEmptyChunkArbitrary = item => fc => _FastCheck_js__WEBPACK_IMPORTED_MODULE_26__.array(item(fc), {\n  minLength: 1\n}).map(as => effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.unsafeFromNonEmptyArray(as));\nconst nonEmptyChunkPretty = item => c => `NonEmptyChunk(${effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray(c).map(item).join(\", \")})`;\nconst nonEmptyChunkParse = decodeUnknown => (u, options, ast) => effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.isChunk(u) && effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.isNonEmpty(u) ? toComposite(decodeUnknown(effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray(u), options), effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.unsafeFromNonEmptyArray, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Chunk\n * @since 0.67.23\n */\nconst NonEmptyChunkFromSelf = value => {\n  return declare([value], {\n    decode: item => nonEmptyChunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(NonEmptyArray(item))),\n    encode: item => nonEmptyChunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(NonEmptyArray(item)))\n  }, {\n    description: `NonEmptyChunk<${format(value)}>`,\n    pretty: nonEmptyChunkPretty,\n    arbitrary: nonEmptyChunkArbitrary,\n    equivalence: effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.getEquivalence\n  });\n};\n/**\n * @category Chunk transformations\n * @since 0.67.23\n */\nconst NonEmptyChunk = value => {\n  const value_ = asSchema(value);\n  return transform(NonEmptyArray(value_), NonEmptyChunkFromSelf(typeSchema(value_)), {\n    decode: effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.unsafeFromNonEmptyArray,\n    encode: effect_Chunk__WEBPACK_IMPORTED_MODULE_25__.toReadonlyArray\n  });\n};\nconst toData = a => Array.isArray(a) ? effect_Data__WEBPACK_IMPORTED_MODULE_27__.array(a) : effect_Data__WEBPACK_IMPORTED_MODULE_27__.struct(a);\nconst dataArbitrary = item => fc => item(fc).map(toData);\nconst dataPretty = item => d => `Data(${item(d)})`;\nconst dataParse = decodeUnknown => (u, options, ast) => effect_Equal__WEBPACK_IMPORTED_MODULE_21__.isEqual(u) ? toComposite(decodeUnknown(u, options), toData, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Data transformations\n * @since 0.67.0\n */\nconst DataFromSelf = item => declare([item], {\n  decode: item => dataParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(item)),\n  encode: item => dataParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(item))\n}, {\n  description: `Data<${format(item)}>`,\n  pretty: dataPretty,\n  arbitrary: dataArbitrary\n});\n/**\n * @category Data transformations\n * @since 0.67.0\n */\nconst Data = item => transform(item, DataFromSelf(typeSchema(item)), {\n  strict: false,\n  decode: toData,\n  encode: a => Array.isArray(a) ? Array.from(a) : Object.assign({}, a)\n});\nconst isField = u => isSchema(u) || isPropertySignature(u);\nconst isFields = fields => _internal_util_js__WEBPACK_IMPORTED_MODULE_13__.ownKeys(fields).every(key => isField(fields[key]));\nconst getFields = hasFields => \"fields\" in hasFields ? hasFields.fields : getFields(hasFields[refineTypeId]);\nconst getSchemaFromFieldsOr = fieldsOr => isFields(fieldsOr) ? Struct(fieldsOr) : isSchema(fieldsOr) ? fieldsOr : Struct(getFields(fieldsOr));\nconst getFieldsFromFieldsOr = fieldsOr => isFields(fieldsOr) ? fieldsOr : getFields(fieldsOr);\n/**\n * @category classes\n * @since 0.67.0\n */\nconst Class = identifier => (fieldsOr, annotations) => makeClass({\n  kind: \"Class\",\n  identifier,\n  schema: getSchemaFromFieldsOr(fieldsOr),\n  fields: getFieldsFromFieldsOr(fieldsOr),\n  Base: effect_Data__WEBPACK_IMPORTED_MODULE_27__.Class,\n  annotations\n});\n/** @internal */\nconst getClassTag = tag => withConstructorDefault(propertySignature(Literal(tag)), () => tag);\n/**\n * @category classes\n * @since 0.67.0\n */\nconst TaggedClass = identifier => (tag, fieldsOr, annotations) => {\n  const fields = getFieldsFromFieldsOr(fieldsOr);\n  const schema = getSchemaFromFieldsOr(fieldsOr);\n  const newFields = {\n    _tag: getClassTag(tag)\n  };\n  const taggedFields = extendFields(newFields, fields);\n  return class TaggedClass extends makeClass({\n    kind: \"TaggedClass\",\n    identifier: identifier ?? tag,\n    schema: extend(schema, Struct(newFields)),\n    fields: taggedFields,\n    Base: effect_Data__WEBPACK_IMPORTED_MODULE_27__.Class,\n    annotations\n  }) {\n    static _tag = tag;\n  };\n};\n/**\n * @category classes\n * @since 0.67.0\n */\nconst TaggedError = identifier => (tag, fieldsOr, annotations) => {\n  class Base extends effect_Data__WEBPACK_IMPORTED_MODULE_27__.Error {}\n  ;\n  Base.prototype.name = tag;\n  const fields = getFieldsFromFieldsOr(fieldsOr);\n  const schema = getSchemaFromFieldsOr(fieldsOr);\n  const newFields = {\n    _tag: getClassTag(tag)\n  };\n  const taggedFields = extendFields(newFields, fields);\n  return class TaggedErrorClass extends makeClass({\n    kind: \"TaggedError\",\n    identifier: identifier ?? tag,\n    schema: extend(schema, Struct(newFields)),\n    fields: taggedFields,\n    Base,\n    annotations,\n    toStringOverride(self) {\n      if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(self.message) && self.message.length > 0) {\n        let message = `${self._tag}: ${self.message}`;\n        if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(self.stack)) {\n          message = `${message}\\n${self.stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n        }\n        return message;\n      }\n    }\n  }) {\n    static _tag = tag;\n  };\n};\n/**\n * @category classes\n * @since 0.67.0\n */\nconst TaggedRequest = identifier => (tag, Failure, Success, fields, annotations) => {\n  class SerializableRequest extends effect_Request__WEBPACK_IMPORTED_MODULE_28__.Class {\n    get [_internal_serializable_js__WEBPACK_IMPORTED_MODULE_29__.symbol]() {\n      return this.constructor;\n    }\n    get [_internal_serializable_js__WEBPACK_IMPORTED_MODULE_29__.symbolResult]() {\n      return {\n        Failure,\n        Success\n      };\n    }\n  }\n  const taggedFields = extendFields({\n    _tag: getClassTag(tag)\n  }, fields);\n  return class TaggedRequestClass extends makeClass({\n    kind: \"TaggedRequest\",\n    identifier: identifier ?? tag,\n    schema: Struct(taggedFields),\n    fields: taggedFields,\n    Base: SerializableRequest,\n    annotations\n  }) {\n    static _tag = tag;\n  };\n};\nconst extendFields = (a, b) => {\n  const out = {\n    ...a\n  };\n  for (const key of _internal_util_js__WEBPACK_IMPORTED_MODULE_13__.ownKeys(b)) {\n    if (key in a) {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_10__.getASTDuplicatePropertySignatureErrorMessage(key));\n    }\n    out[key] = b[key];\n  }\n  return out;\n};\n// does not overwrite existing title annotation\nconst orElseTitleAnnotation = (schema, title) => {\n  const annotation = _AST_js__WEBPACK_IMPORTED_MODULE_1__.getTitleAnnotation(schema.ast);\n  if (effect_Option__WEBPACK_IMPORTED_MODULE_11__.isNone(annotation)) {\n    return schema.annotations({\n      title\n    });\n  }\n  return schema;\n};\nconst getDisableValidationMakeOption = options => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isBoolean(options) ? options : options?.disableValidation ?? false;\nconst makeClass = ({\n  Base,\n  annotations,\n  fields,\n  identifier,\n  kind,\n  schema,\n  toStringOverride\n}) => {\n  const classSymbol = Symbol.for(`@effect/schema/${kind}/${identifier}`);\n  const validateSchema = orElseTitleAnnotation(schema, `${identifier} (Constructor)`);\n  const encodedSide = orElseTitleAnnotation(schema, `${identifier} (Encoded side)`);\n  const typeSide = orElseTitleAnnotation(typeSchema(schema), `${identifier} (Type side)`);\n  const fallbackInstanceOf = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, classSymbol) && _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is(typeSide)(u);\n  return class extends Base {\n    constructor(props = {}, options = false) {\n      props = {\n        ...props\n      };\n      if (kind !== \"Class\") {\n        delete props[\"_tag\"];\n      }\n      props = lazilyMergeDefaults(fields, props);\n      if (!getDisableValidationMakeOption(options)) {\n        props = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync(validateSchema)(props);\n      }\n      super(props, true);\n    }\n    // ----------------\n    // Schema interface\n    // ----------------\n    static [TypeId] = variance;\n    static get ast() {\n      const declaration = declare([typeSide], {\n        decode: () => (input, _, ast) => input instanceof this || fallbackInstanceOf(input) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input)),\n        encode: () => (input, options) => input instanceof this ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(typeSide)(input, options), props => new this(props, true))\n      }, {\n        identifier,\n        title: identifier,\n        description: `an instance of ${identifier}`,\n        pretty: pretty => self => `${identifier}(${pretty(self)})`,\n        arbitrary: arb => fc => arb(fc).map(props => new this(props)),\n        equivalence: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity,\n        [_AST_js__WEBPACK_IMPORTED_MODULE_1__.SurrogateAnnotationId]: typeSide.ast,\n        ...annotations\n      });\n      const transformation = transform(encodedSide, declaration, {\n        decode: input => new this(input, true),\n        encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n      }).annotations({\n        [_AST_js__WEBPACK_IMPORTED_MODULE_1__.SurrogateAnnotationId]: schema.ast\n      });\n      return transformation.ast;\n    }\n    static pipe() {\n      return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_0__.pipeArguments)(this, arguments);\n    }\n    static annotations(annotations) {\n      return make(this.ast).annotations(annotations);\n    }\n    static toString() {\n      return `(${String(encodedSide)} <-> ${identifier})`;\n    }\n    // ----------------\n    // Class interface\n    // ----------------\n    static make(...args) {\n      return new this(...args);\n    }\n    static fields = {\n      ...fields\n    };\n    static identifier = identifier;\n    static extend(identifier) {\n      return (newFieldsOr, annotations) => {\n        const newFields = getFieldsFromFieldsOr(newFieldsOr);\n        const newSchema = getSchemaFromFieldsOr(newFieldsOr);\n        const extendedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          schema: extend(schema, newSchema),\n          fields: extendedFields,\n          Base: this,\n          annotations\n        });\n      };\n    }\n    static transformOrFail(identifier) {\n      return (newFields, options, annotations) => {\n        const transformedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          schema: transformOrFail(schema, typeSchema(Struct(transformedFields)), options),\n          fields: transformedFields,\n          Base: this,\n          annotations\n        });\n      };\n    }\n    static transformOrFailFrom(identifier) {\n      return (newFields, options, annotations) => {\n        const transformedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          schema: transformOrFail(encodedSchema(schema), Struct(transformedFields), options),\n          fields: transformedFields,\n          Base: this,\n          annotations\n        });\n      };\n    }\n    // ----------------\n    // other\n    // ----------------\n    get [classSymbol]() {\n      return classSymbol;\n    }\n    toString() {\n      if (toStringOverride !== undefined) {\n        const out = toStringOverride(this);\n        if (out !== undefined) {\n          return out;\n        }\n      }\n      return `${identifier}({ ${_internal_util_js__WEBPACK_IMPORTED_MODULE_13__.ownKeys(fields).map(p => `${_internal_util_js__WEBPACK_IMPORTED_MODULE_13__.formatPropertyKey(p)}: ${_internal_util_js__WEBPACK_IMPORTED_MODULE_13__.formatUnknown(this[p])}`).join(\", \")} })`;\n    }\n  };\n};\nconst FiberIdNoneEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"None\")\n}).annotations({\n  identifier: \"FiberIdNoneEncoded\"\n});\nconst FiberIdRuntimeEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"Runtime\"),\n  id: Int.annotations({\n    title: \"id\",\n    description: \"id\"\n  }),\n  startTimeMillis: Int.annotations({\n    title: \"startTimeMillis\",\n    description: \"startTimeMillis\"\n  })\n}).annotations({\n  identifier: \"FiberIdRuntimeEncoded\"\n});\nconst FiberIdCompositeEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"Composite\"),\n  left: suspend(() => FiberIdEncoded),\n  right: suspend(() => FiberIdEncoded)\n}).annotations({\n  identifier: \"FiberIdCompositeEncoded\"\n});\nconst FiberIdEncoded = /*#__PURE__*/Union(FiberIdNoneEncoded, FiberIdRuntimeEncoded, FiberIdCompositeEncoded).annotations({\n  identifier: \"FiberIdEncoded\"\n});\nconst fiberIdArbitrary = fc => fc.letrec(tie => ({\n  None: fc.record({\n    _tag: fc.constant(\"None\")\n  }),\n  Runtime: fc.record({\n    _tag: fc.constant(\"Runtime\"),\n    id: fc.integer(),\n    startTimeMillis: fc.integer()\n  }),\n  Composite: fc.record({\n    _tag: fc.constant(\"Composite\"),\n    left: tie(\"FiberId\"),\n    right: tie(\"FiberId\")\n  }),\n  FiberId: fc.oneof(tie(\"None\"), tie(\"Runtime\"), tie(\"Composite\"))\n})).FiberId.map(fiberIdDecode);\nconst fiberIdPretty = fiberId => {\n  switch (fiberId._tag) {\n    case \"None\":\n      return \"FiberId.none\";\n    case \"Runtime\":\n      return `FiberId.runtime(${fiberId.id}, ${fiberId.startTimeMillis})`;\n    case \"Composite\":\n      return `FiberId.composite(${fiberIdPretty(fiberId.right)}, ${fiberIdPretty(fiberId.left)})`;\n  }\n};\n/**\n * @category FiberId constructors\n * @since 0.67.0\n */\nclass FiberIdFromSelf extends declare(effect_FiberId__WEBPACK_IMPORTED_MODULE_30__.isFiberId, {\n  identifier: \"FiberIdFromSelf\",\n  pretty: () => fiberIdPretty,\n  arbitrary: () => fiberIdArbitrary\n}) {\n  static annotations = super.annotations;\n}\nconst fiberIdDecode = input => {\n  switch (input._tag) {\n    case \"None\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_30__.none;\n    case \"Runtime\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_30__.runtime(input.id, input.startTimeMillis);\n    case \"Composite\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_30__.composite(fiberIdDecode(input.left), fiberIdDecode(input.right));\n  }\n};\nconst fiberIdEncode = input => {\n  switch (input._tag) {\n    case \"None\":\n      return {\n        _tag: \"None\"\n      };\n    case \"Runtime\":\n      return {\n        _tag: \"Runtime\",\n        id: input.id,\n        startTimeMillis: input.startTimeMillis\n      };\n    case \"Composite\":\n      return {\n        _tag: \"Composite\",\n        left: fiberIdEncode(input.left),\n        right: fiberIdEncode(input.right)\n      };\n  }\n};\n/**\n * @category FiberId transformations\n * @since 0.67.0\n */\nclass FiberId extends transform(FiberIdEncoded, FiberIdFromSelf, {\n  decode: fiberIdDecode,\n  encode: fiberIdEncode\n}).annotations({\n  identifier: \"FiberId\"\n}) {\n  static annotations = super.annotations;\n}\nconst causeDieEncoded = defect => Struct({\n  _tag: Literal(\"Die\"),\n  defect\n});\nconst CauseEmptyEncoded = /*#__PURE__*/Struct({\n  _tag: /*#__PURE__*/Literal(\"Empty\")\n});\nconst causeFailEncoded = error => Struct({\n  _tag: Literal(\"Fail\"),\n  error\n});\nconst CauseInterruptEncoded = /*#__PURE__*/Struct({\n  _tag: /*#__PURE__*/Literal(\"Interrupt\"),\n  fiberId: FiberIdEncoded\n});\nconst causeParallelEncoded = causeEncoded => Struct({\n  _tag: Literal(\"Parallel\"),\n  left: causeEncoded,\n  right: causeEncoded\n});\nconst causeSequentialEncoded = causeEncoded => Struct({\n  _tag: Literal(\"Sequential\"),\n  left: causeEncoded,\n  right: causeEncoded\n});\nconst causeEncoded = (error, defect) => {\n  const recur = suspend(() => out);\n  const out = Union(CauseEmptyEncoded, causeFailEncoded(error), causeDieEncoded(defect), CauseInterruptEncoded, causeSequentialEncoded(recur), causeParallelEncoded(recur)).annotations({\n    description: `CauseEncoded<${format(error)}>`\n  });\n  return out;\n};\nconst causeArbitrary = (error, defect) => fc => fc.letrec(tie => ({\n  Empty: fc.record({\n    _tag: fc.constant(\"Empty\")\n  }),\n  Fail: fc.record({\n    _tag: fc.constant(\"Fail\"),\n    error: error(fc)\n  }),\n  Die: fc.record({\n    _tag: fc.constant(\"Die\"),\n    defect: defect(fc)\n  }),\n  Interrupt: fc.record({\n    _tag: fc.constant(\"Interrupt\"),\n    fiberId: fiberIdArbitrary(fc)\n  }),\n  Sequential: fc.record({\n    _tag: fc.constant(\"Sequential\"),\n    left: tie(\"Cause\"),\n    right: tie(\"Cause\")\n  }),\n  Parallel: fc.record({\n    _tag: fc.constant(\"Parallel\"),\n    left: tie(\"Cause\"),\n    right: tie(\"Cause\")\n  }),\n  Cause: fc.oneof(tie(\"Empty\"), tie(\"Fail\"), tie(\"Die\"), tie(\"Interrupt\"), tie(\"Sequential\"), tie(\"Parallel\"))\n})).Cause.map(causeDecode);\nconst causePretty = error => cause => {\n  const f = cause => {\n    switch (cause._tag) {\n      case \"Empty\":\n        return \"Cause.empty\";\n      case \"Fail\":\n        return `Cause.fail(${error(cause.error)})`;\n      case \"Die\":\n        return `Cause.die(${effect_Cause__WEBPACK_IMPORTED_MODULE_31__.pretty(cause)})`;\n      case \"Interrupt\":\n        return `Cause.interrupt(${fiberIdPretty(cause.fiberId)})`;\n      case \"Sequential\":\n        return `Cause.sequential(${f(cause.left)}, ${f(cause.right)})`;\n      case \"Parallel\":\n        return `Cause.parallel(${f(cause.left)}, ${f(cause.right)})`;\n    }\n  };\n  return f(cause);\n};\nconst causeParse = decodeUnknown => (u, options, ast) => effect_Cause__WEBPACK_IMPORTED_MODULE_31__.isCause(u) ? toComposite(decodeUnknown(causeEncode(u), options), causeDecode, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Cause transformations\n * @since 0.67.0\n */\nconst CauseFromSelf = ({\n  defect = Unknown,\n  error\n}) => {\n  return declare([error, defect], {\n    decode: (error, defect) => causeParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(causeEncoded(error, defect))),\n    encode: (error, defect) => causeParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(causeEncoded(error, defect)))\n  }, {\n    description: `Cause<${format(error)}>`,\n    pretty: causePretty,\n    arbitrary: causeArbitrary\n  });\n};\nfunction causeDecode(cause) {\n  switch (cause._tag) {\n    case \"Empty\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.empty;\n    case \"Fail\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.fail(cause.error);\n    case \"Die\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.die(cause.defect);\n    case \"Interrupt\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.interrupt(fiberIdDecode(cause.fiberId));\n    case \"Sequential\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.sequential(causeDecode(cause.left), causeDecode(cause.right));\n    case \"Parallel\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_31__.parallel(causeDecode(cause.left), causeDecode(cause.right));\n  }\n}\nfunction causeEncode(cause) {\n  switch (cause._tag) {\n    case \"Empty\":\n      return {\n        _tag: \"Empty\"\n      };\n    case \"Fail\":\n      return {\n        _tag: \"Fail\",\n        error: cause.error\n      };\n    case \"Die\":\n      return {\n        _tag: \"Die\",\n        defect: cause.defect\n      };\n    case \"Interrupt\":\n      return {\n        _tag: \"Interrupt\",\n        fiberId: cause.fiberId\n      };\n    case \"Sequential\":\n      return {\n        _tag: \"Sequential\",\n        left: causeEncode(cause.left),\n        right: causeEncode(cause.right)\n      };\n    case \"Parallel\":\n      return {\n        _tag: \"Parallel\",\n        left: causeEncode(cause.left),\n        right: causeEncode(cause.right)\n      };\n  }\n}\n/**\n * @category Cause transformations\n * @since 0.67.0\n */\nconst CauseDefectUnknown = /*#__PURE__*/transform(Unknown, Unknown, {\n  decode: u => {\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(u) && \"message\" in u && typeof u.message === \"string\") {\n      const err = new Error(u.message, {\n        cause: u\n      });\n      if (\"name\" in u && typeof u.name === \"string\") {\n        err.name = u.name;\n      }\n      err.stack = \"stack\" in u && typeof u.stack === \"string\" ? u.stack : \"\";\n      return err;\n    }\n    return String(u);\n  },\n  encode: defect => {\n    if (defect instanceof Error) {\n      return {\n        name: defect.name,\n        message: defect.message\n      };\n    }\n    return String(defect);\n  }\n});\n/**\n * @category Cause transformations\n * @since 0.67.0\n */\nconst Cause = ({\n  defect = CauseDefectUnknown,\n  error\n}) => {\n  const error_ = asSchema(error);\n  return transform(causeEncoded(error_, defect), CauseFromSelf({\n    error: typeSchema(error_),\n    defect: typeSchema(defect)\n  }), {\n    decode: causeDecode,\n    encode: causeEncode\n  });\n};\nconst exitFailureEncoded = (error, defect) => Struct({\n  _tag: Literal(\"Failure\"),\n  cause: causeEncoded(error, defect)\n}).annotations({\n  description: `FailureEncoded<${format(error)}>`\n});\nconst exitSuccessEncoded = value => Struct({\n  _tag: Literal(\"Success\"),\n  value\n}).annotations({\n  description: `SuccessEncoded<${format(value)}>`\n});\nconst exitEncoded = (value, error, defect) => Union(exitFailureEncoded(error, defect), exitSuccessEncoded(value)).annotations({\n  description: `ExitEncoded<${format(value)}, ${format(error)}>`\n});\nconst exitDecode = input => {\n  switch (input._tag) {\n    case \"Failure\":\n      return effect_Exit__WEBPACK_IMPORTED_MODULE_32__.failCause(causeDecode(input.cause));\n    case \"Success\":\n      return effect_Exit__WEBPACK_IMPORTED_MODULE_32__.succeed(input.value);\n  }\n};\nconst exitArbitrary = (value, error, defect) => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"Failure\"),\n  cause: causeArbitrary(error, defect)(fc)\n}), fc.record({\n  _tag: fc.constant(\"Success\"),\n  value: value(fc)\n})).map(exitDecode);\nconst exitPretty = (value, error) => exit => exit._tag === \"Failure\" ? `Exit.failCause(${causePretty(error)(exit.cause)})` : `Exit.succeed(${value(exit.value)})`;\nconst exitParse = (decodeUnknownValue, decodeUnknownCause) => (u, options, ast) => effect_Exit__WEBPACK_IMPORTED_MODULE_32__.isExit(u) ? effect_Exit__WEBPACK_IMPORTED_MODULE_32__.match(u, {\n  onFailure: cause => toComposite(decodeUnknownCause(cause, options), effect_Exit__WEBPACK_IMPORTED_MODULE_32__.failCause, ast, u),\n  onSuccess: value => toComposite(decodeUnknownValue(value, options), effect_Exit__WEBPACK_IMPORTED_MODULE_32__.succeed, ast, u)\n}) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Exit transformations\n * @since 0.67.0\n */\nconst ExitFromSelf = ({\n  defect = Unknown,\n  failure,\n  success\n}) => declare([success, failure, defect], {\n  decode: (success, failure, defect) => exitParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(success), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(CauseFromSelf({\n    error: failure,\n    defect\n  }))),\n  encode: (success, failure, defect) => exitParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(success), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(CauseFromSelf({\n    error: failure,\n    defect\n  })))\n}, {\n  description: `Exit<${format(success)}, ${format(failure)}>`,\n  pretty: exitPretty,\n  arbitrary: exitArbitrary\n});\n/**\n * @category Exit transformations\n * @since 0.67.0\n */\nconst Exit = ({\n  defect = CauseDefectUnknown,\n  failure,\n  success\n}) => {\n  const success_ = asSchema(success);\n  const failure_ = asSchema(failure);\n  return transform(exitEncoded(success_, failure_, defect), ExitFromSelf({\n    failure: typeSchema(failure_),\n    success: typeSchema(success_),\n    defect: typeSchema(defect)\n  }), {\n    decode: exitDecode,\n    encode: exit => exit._tag === \"Failure\" ? {\n      _tag: \"Failure\",\n      cause: exit.cause\n    } : {\n      _tag: \"Success\",\n      value: exit.value\n    }\n  });\n};\nconst hashSetArbitrary = item => fc => fc.array(item(fc)).map(as => effect_HashSet__WEBPACK_IMPORTED_MODULE_33__.fromIterable(as));\nconst hashSetPretty = item => set => `HashSet(${Array.from(set).map(a => item(a)).join(\", \")})`;\nconst hashSetEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst hashSetParse = decodeUnknown => (u, options, ast) => effect_HashSet__WEBPACK_IMPORTED_MODULE_33__.isHashSet(u) ? toComposite(decodeUnknown(Array.from(u), options), effect_HashSet__WEBPACK_IMPORTED_MODULE_33__.fromIterable, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category HashSet transformations\n * @since 0.67.0\n */\nconst HashSetFromSelf = value => {\n  return declare([value], {\n    decode: item => hashSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(item))),\n    encode: item => hashSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(item)))\n  }, {\n    description: `HashSet<${format(value)}>`,\n    pretty: hashSetPretty,\n    arbitrary: hashSetArbitrary,\n    equivalence: hashSetEquivalence\n  });\n};\n/**\n * @category HashSet transformations\n * @since 0.67.0\n */\nconst HashSet = value => {\n  const value_ = asSchema(value);\n  return transform(Array$(value_), HashSetFromSelf(typeSchema(value_)), {\n    decode: as => effect_HashSet__WEBPACK_IMPORTED_MODULE_33__.fromIterable(as),\n    encode: set => Array.from(set)\n  });\n};\nconst hashMapArbitrary = (key, value) => fc => fc.array(fc.tuple(key(fc), value(fc))).map(as => effect_HashMap__WEBPACK_IMPORTED_MODULE_34__.fromIterable(as));\nconst hashMapPretty = (key, value) => map => `HashMap([${Array.from(map).map(([k, v]) => `[${key(k)}, ${value(v)}]`).join(\", \")}])`;\nconst hashMapEquivalence = (key, value) => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make(([ka, va], [kb, vb]) => key(ka, kb) && value(va, vb)));\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst hashMapParse = decodeUnknown => (u, options, ast) => effect_HashMap__WEBPACK_IMPORTED_MODULE_34__.isHashMap(u) ? toComposite(decodeUnknown(Array.from(u), options), effect_HashMap__WEBPACK_IMPORTED_MODULE_34__.fromIterable, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category HashMap transformations\n * @since 0.67.0\n */\nconst HashMapFromSelf = ({\n  key,\n  value\n}) => {\n  return declare([key, value], {\n    decode: (key, value) => hashMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(Tuple(key, value)))),\n    encode: (key, value) => hashMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(Tuple(key, value))))\n  }, {\n    description: `HashMap<${format(key)}, ${format(value)}>`,\n    pretty: hashMapPretty,\n    arbitrary: hashMapArbitrary,\n    equivalence: hashMapEquivalence\n  });\n};\n/**\n * @category HashMap transformations\n * @since 0.67.0\n */\nconst HashMap = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform(Array$(Tuple(key_, value_)), HashMapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => effect_HashMap__WEBPACK_IMPORTED_MODULE_34__.fromIterable(as),\n    encode: map => Array.from(map)\n  });\n};\nconst listArbitrary = item => fc => fc.array(item(fc)).map(as => effect_List__WEBPACK_IMPORTED_MODULE_35__.fromIterable(as));\nconst listPretty = item => set => `List(${Array.from(set).map(a => item(a)).join(\", \")})`;\nconst listEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_23__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst listParse = decodeUnknown => (u, options, ast) => effect_List__WEBPACK_IMPORTED_MODULE_35__.isList(u) ? toComposite(decodeUnknown(Array.from(u), options), effect_List__WEBPACK_IMPORTED_MODULE_35__.fromIterable, ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category List transformations\n * @since 0.67.0\n */\nconst ListFromSelf = value => {\n  return declare([value], {\n    decode: item => listParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(item))),\n    encode: item => listParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(item)))\n  }, {\n    description: `List<${format(value)}>`,\n    pretty: listPretty,\n    arbitrary: listArbitrary,\n    equivalence: listEquivalence\n  });\n};\n/**\n * @category List transformations\n * @since 0.67.0\n */\nconst List = value => {\n  const value_ = asSchema(value);\n  return transform(Array$(value_), ListFromSelf(typeSchema(value_)), {\n    decode: as => effect_List__WEBPACK_IMPORTED_MODULE_35__.fromIterable(as),\n    encode: set => Array.from(set)\n  });\n};\nconst sortedSetArbitrary = (item, ord) => fc => fc.array(item(fc)).map(as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as, ord));\nconst sortedSetPretty = item => set => `new SortedSet([${Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.values(set)).map(a => item(a)).join(\", \")}])`;\nconst sortedSetParse = (decodeUnknown, ord) => (u, options, ast) => effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.isSortedSet(u) ? toComposite(decodeUnknown(Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.values(u)), options), as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as, ord), ast, u) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category SortedSet transformations\n * @since 0.67.0\n */\nconst SortedSetFromSelf = (value, ordA, ordI) => {\n  return declare([value], {\n    decode: item => sortedSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(Array$(item)), ordA),\n    encode: item => sortedSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(Array$(item)), ordI)\n  }, {\n    description: `SortedSet<${format(value)}>`,\n    pretty: sortedSetPretty,\n    arbitrary: arb => sortedSetArbitrary(arb, ordA),\n    equivalence: () => effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.getEquivalence()\n  });\n};\n/**\n * @category SortedSet transformations\n * @since 0.67.0\n */\nconst SortedSet = (value, ordA) => {\n  const value_ = asSchema(value);\n  const to = typeSchema(value_);\n  return transform(Array$(value_), SortedSetFromSelf(to, ordA, ordA), {\n    decode: as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as, ordA),\n    encode: set => Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_36__.values(set))\n  });\n};\n/**\n * Converts an arbitrary value to a `boolean` by testing whether it is truthy.\n * Uses `!!val` to coerce the value to a `boolean`.\n *\n * @see https://developer.mozilla.org/docs/Glossary/Truthy\n * @category boolean constructors\n * @since 0.67.0\n */\nclass BooleanFromUnknown extends transform(Unknown, Boolean$, {\n  decode: effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isTruthy,\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_12__.identity\n}).annotations({\n  identifier: \"BooleanFromUnknown\"\n}) {\n  static annotations = super.annotations;\n}\n/**\n * @category Config validations\n * @since 0.67.12\n */\nconst Config = (name, schema) => {\n  const decodeEither_ = decodeEither(schema);\n  return effect_Config__WEBPACK_IMPORTED_MODULE_37__.string(name).pipe(effect_Config__WEBPACK_IMPORTED_MODULE_37__.mapOrFail(a => decodeEither_(a).pipe(effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(error => effect_ConfigError__WEBPACK_IMPORTED_MODULE_38__.InvalidData([], _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_39__.formatErrorSync(error))))));\n};\n//# sourceMappingURL=Schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/Schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/TreeFormatter.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/TreeFormatter.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   formatErrorSync: () => (/* binding */ formatErrorSync),\n/* harmony export */   formatForbiddenMessage: () => (/* binding */ formatForbiddenMessage),\n/* harmony export */   formatIssue: () => (/* binding */ formatIssue),\n/* harmony export */   formatIssueSync: () => (/* binding */ formatIssueSync),\n/* harmony export */   formatMissingMessage: () => (/* binding */ formatMissingMessage),\n/* harmony export */   formatTypeMessage: () => (/* binding */ formatTypeMessage),\n/* harmony export */   formatUnexpectedMessage: () => (/* binding */ formatUnexpectedMessage),\n/* harmony export */   getMessage: () => (/* binding */ getMessage)\n/* harmony export */ });\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 0.67.0\n */\n\n\n\n\n\nconst make = (value, forest = []) => ({\n  value,\n  forest\n});\n/**\n * @category formatting\n * @since 0.67.0\n */\nconst formatIssue = issue => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(issue), tree => drawTree(tree));\n/**\n * @category formatting\n * @since 0.67.0\n */\nconst formatIssueSync = issue => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.runSync(formatIssue(issue));\n/**\n * @category formatting\n * @since 0.67.0\n */\nconst formatError = error => formatIssue(error.issue);\n/**\n * @category formatting\n * @since 0.67.0\n */\nconst formatErrorSync = error => formatIssueSync(error.issue);\nconst drawTree = tree => tree.value + draw(\"\\n\", tree.forest);\nconst draw = (indentation, forest) => {\n  let r = \"\";\n  const len = forest.length;\n  let tree;\n  for (let i = 0; i < len; i++) {\n    tree = forest[i];\n    const isLast = i === len - 1;\n    r += indentation + (isLast ? \"└\" : \"├\") + \"─ \" + tree.value;\n    r += draw(indentation + (len > 1 && !isLast ? \"│  \" : \"   \"), tree.forest);\n  }\n  return r;\n};\nconst formatTransformationKind = kind => {\n  switch (kind) {\n    case \"Encoded\":\n      return \"Encoded side transformation failure\";\n    case \"Transformation\":\n      return \"Transformation process failure\";\n    case \"Type\":\n      return \"Type side transformation failure\";\n  }\n};\nconst formatRefinementKind = kind => {\n  switch (kind) {\n    case \"From\":\n      return \"From side refinement failure\";\n    case \"Predicate\":\n      return \"Predicate refinement failure\";\n  }\n};\nconst getAnnotated = issue => \"ast\" in issue ? effect_Option__WEBPACK_IMPORTED_MODULE_1__.some(issue.ast) : effect_Option__WEBPACK_IMPORTED_MODULE_1__.none();\nconst getCurrentMessage = issue => getAnnotated(issue).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.flatMap(_AST_js__WEBPACK_IMPORTED_MODULE_2__.getMessageAnnotation), effect_Effect__WEBPACK_IMPORTED_MODULE_0__.flatMap(annotation => {\n  const out = annotation(issue);\n  return effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(out) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed({\n    message: out,\n    override: false\n  }) : effect_Effect__WEBPACK_IMPORTED_MODULE_0__.isEffect(out) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(out, message => ({\n    message,\n    override: false\n  })) : effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(out.message) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed({\n    message: out.message,\n    override: out.override\n  }) : effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(out.message, message => ({\n    message,\n    override: out.override\n  }));\n}));\nconst createParseIssueGuard = tag => issue => issue._tag === tag;\nconst isComposite = /*#__PURE__*/createParseIssueGuard(\"Composite\");\nconst isRefinement = /*#__PURE__*/createParseIssueGuard(\"Refinement\");\nconst isTransformation = /*#__PURE__*/createParseIssueGuard(\"Transformation\");\n/** @internal */\nconst getMessage = issue => getCurrentMessage(issue).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.flatMap(currentMessage => {\n  const useInnerMessage = !currentMessage.override && (isComposite(issue) || isRefinement(issue) && issue.kind === \"From\" || isTransformation(issue) && issue.kind !== \"Transformation\");\n  return useInnerMessage ? isTransformation(issue) || isRefinement(issue) ? getMessage(issue.issue) : effect_Option__WEBPACK_IMPORTED_MODULE_1__.none() : effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(currentMessage.message);\n}));\nconst getParseIssueTitleAnnotation = issue => getAnnotated(issue).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.flatMap(_AST_js__WEBPACK_IMPORTED_MODULE_2__.getParseIssueTitleAnnotation), effect_Option__WEBPACK_IMPORTED_MODULE_1__.filterMap(annotation => effect_Option__WEBPACK_IMPORTED_MODULE_1__.fromNullable(annotation(issue))));\n/** @internal */\nconst formatTypeMessage = e => getMessage(e).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.orElse(() => getParseIssueTitleAnnotation(e)), effect_Effect__WEBPACK_IMPORTED_MODULE_0__.catchAll(() => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(e.message ?? `Expected ${String(e.ast)}, actual ${_internal_util_js__WEBPACK_IMPORTED_MODULE_4__.formatUnknown(e.actual)}`)));\nconst getParseIssueTitle = issue => effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getParseIssueTitleAnnotation(issue), () => String(issue.ast));\n/** @internal */\nconst formatForbiddenMessage = e => e.message ?? \"is forbidden\";\n/** @internal */\nconst formatUnexpectedMessage = e => e.message ?? \"is unexpected\";\n/** @internal */\nconst formatMissingMessage = e => _AST_js__WEBPACK_IMPORTED_MODULE_2__.getMissingMessageAnnotation(e.ast).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.flatMap(annotation => {\n  const out = annotation();\n  return effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(out) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(out) : out;\n}), effect_Effect__WEBPACK_IMPORTED_MODULE_0__.catchAll(() => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(e.message ?? \"is missing\")));\nconst getTree = (issue, onFailure) => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.matchEffect(getMessage(issue), {\n  onFailure,\n  onSuccess: message => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(message))\n});\nconst go = e => {\n  switch (e._tag) {\n    case \"Type\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(formatTypeMessage(e), make);\n    case \"Forbidden\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(getParseIssueTitle(e), [make(formatForbiddenMessage(e))]));\n    case \"Unexpected\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(formatUnexpectedMessage(e)));\n    case \"Missing\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(formatMissingMessage(e), make);\n    case \"Transformation\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.issue), tree => make(getParseIssueTitle(e), [make(formatTransformationKind(e.kind), [tree])])));\n    case \"Refinement\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.issue), tree => make(getParseIssueTitle(e), [make(formatRefinementKind(e.kind), [tree])])));\n    case \"Pointer\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.issue), tree => make(_internal_util_js__WEBPACK_IMPORTED_MODULE_4__.formatPath(e.path), [tree]));\n    case \"Composite\":\n      {\n        const parseIssueTitle = getParseIssueTitle(e);\n        return getTree(e, () => _internal_util_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmpty(e.issues) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.forEach(e.issues, go), forest => make(parseIssueTitle, forest)) : effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.issues), tree => make(parseIssueTitle, [tree])));\n      }\n  }\n};\n//# sourceMappingURL=TreeFormatter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/TreeFormatter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getASTDuplicateIndexSignatureErrorMessage: () => (/* binding */ getASTDuplicateIndexSignatureErrorMessage),\n/* harmony export */   getASTDuplicatePropertySignatureErrorMessage: () => (/* binding */ getASTDuplicatePropertySignatureErrorMessage),\n/* harmony export */   getASTDuplicatePropertySignatureTransformationErrorMessage: () => (/* binding */ getASTDuplicatePropertySignatureTransformationErrorMessage),\n/* harmony export */   getASTIndexSignatureParameterErrorMessage: () => (/* binding */ getASTIndexSignatureParameterErrorMessage),\n/* harmony export */   getASTRequiredElementFollowinAnOptionalElementErrorMessage: () => (/* binding */ getASTRequiredElementFollowinAnOptionalElementErrorMessage),\n/* harmony export */   getASTUnsupportedKeySchema: () => (/* binding */ getASTUnsupportedKeySchema),\n/* harmony export */   getASTUnsupportedLiteral: () => (/* binding */ getASTUnsupportedLiteral),\n/* harmony export */   getASTUnsupportedRenameSchema: () => (/* binding */ getASTUnsupportedRenameSchema),\n/* harmony export */   getASTUnsupportedSchema: () => (/* binding */ getASTUnsupportedSchema),\n/* harmony export */   getArbitraryEmptyEnumErrorMessage: () => (/* binding */ getArbitraryEmptyEnumErrorMessage),\n/* harmony export */   getArbitraryMissingAnnotationErrorMessage: () => (/* binding */ getArbitraryMissingAnnotationErrorMessage),\n/* harmony export */   getArbitraryUnsupportedErrorMessage: () => (/* binding */ getArbitraryUnsupportedErrorMessage),\n/* harmony export */   getEquivalenceUnsupportedErrorMessage: () => (/* binding */ getEquivalenceUnsupportedErrorMessage),\n/* harmony export */   getInvalidArgumentErrorMessage: () => (/* binding */ getInvalidArgumentErrorMessage),\n/* harmony export */   getJSONSchemaMissingAnnotationErrorMessage: () => (/* binding */ getJSONSchemaMissingAnnotationErrorMessage),\n/* harmony export */   getJSONSchemaMissingIdentifierAnnotationErrorMessage: () => (/* binding */ getJSONSchemaMissingIdentifierAnnotationErrorMessage),\n/* harmony export */   getJSONSchemaUnsupportedKeyErrorMessage: () => (/* binding */ getJSONSchemaUnsupportedKeyErrorMessage),\n/* harmony export */   getJSONSchemaUnsupportedParameterErrorMessage: () => (/* binding */ getJSONSchemaUnsupportedParameterErrorMessage),\n/* harmony export */   getJSONSchemaUnsupportedPostRestElementsErrorMessage: () => (/* binding */ getJSONSchemaUnsupportedPostRestElementsErrorMessage),\n/* harmony export */   getPrettyMissingAnnotationErrorMessage: () => (/* binding */ getPrettyMissingAnnotationErrorMessage),\n/* harmony export */   getPrettyNeverErrorMessage: () => (/* binding */ getPrettyNeverErrorMessage),\n/* harmony export */   getPrettyNoMatchingSchemaErrorMessage: () => (/* binding */ getPrettyNoMatchingSchemaErrorMessage),\n/* harmony export */   getSchemaExtendErrorMessage: () => (/* binding */ getSchemaExtendErrorMessage),\n/* harmony export */   getSchemaUnsupportedLiteralSpanErrorMessage: () => (/* binding */ getSchemaUnsupportedLiteralSpanErrorMessage)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\");\n\n\nconst getErrorMessage = (reason, details, path, ast) => {\n  let out = reason;\n  if (path && effect_Array__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyReadonlyArray(path)) {\n    out += `\\nat path: ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatPath(path)}`;\n  }\n  if (details !== undefined) {\n    out += `\\ndetails: ${details}`;\n  }\n  if (ast) {\n    out += `\\nschema (${ast._tag}): ${ast}`;\n  }\n  return out;\n};\n// ---------------------------------------------\n// generic\n// ---------------------------------------------\n/** @internal */\nconst getInvalidArgumentErrorMessage = details => getErrorMessage(\"Invalid Argument\", details);\nconst getUnsupportedSchemaErrorMessage = (details, path, ast) => getErrorMessage(\"Unsupported schema\", details, path, ast);\nconst getMissingAnnotationErrorMessage = (details, path, ast) => getErrorMessage(\"Missing annotation\", details, path, ast);\n// ---------------------------------------------\n// Arbitrary\n// ---------------------------------------------\n/** @internal */\nconst getArbitraryUnsupportedErrorMessage = (path, ast) => getUnsupportedSchemaErrorMessage(\"Cannot build an Arbitrary for this schema\", path, ast);\n/** @internal */\nconst getArbitraryMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating an Arbitrary for this schema requires an \"arbitrary\" annotation`, path, ast);\n/** @internal */\nconst getArbitraryEmptyEnumErrorMessage = path => getErrorMessage(\"Empty Enums schema\", \"Generating an Arbitrary for this schema requires at least one enum\", path);\n// ---------------------------------------------\n// Equivalence\n// ---------------------------------------------\n/** @internal */\nconst getEquivalenceUnsupportedErrorMessage = (ast, path) => getUnsupportedSchemaErrorMessage(\"Cannot build an Equivalence\", path, ast);\n// ---------------------------------------------\n// JSON Schema\n// ---------------------------------------------\n/** @internal */\nconst getJSONSchemaMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a JSON Schema for this schema requires a \"jsonSchema\" annotation`, path, ast);\n/** @internal */\nconst getJSONSchemaMissingIdentifierAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a JSON Schema for this schema requires an \"identifier\" annotation`, path, ast);\n/** @internal */\nconst getJSONSchemaUnsupportedParameterErrorMessage = (path, parameter) => getErrorMessage(\"Unsupported index signature parameter\", undefined, path, parameter);\n/** @internal */\nconst getJSONSchemaUnsupportedPostRestElementsErrorMessage = path => getErrorMessage(\"Generating a JSON Schema for post-rest elements is not currently supported. You're welcome to contribute by submitting a Pull Request\", undefined, path);\n/** @internal */\nconst getJSONSchemaUnsupportedKeyErrorMessage = (key, path) => getErrorMessage(\"Unsupported key\", `Cannot encode ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatPropertyKey(key)} key to JSON Schema`, path);\n// ---------------------------------------------\n// Pretty\n// ---------------------------------------------\n/** @internal */\nconst getPrettyMissingAnnotationErrorMessage = (path, ast) => getMissingAnnotationErrorMessage(`Generating a Pretty for this schema requires a \"pretty\" annotation`, path, ast);\n/** @internal */\nconst getPrettyNeverErrorMessage = \"Cannot pretty print a `never` value\";\n/** @internal */\nconst getPrettyNoMatchingSchemaErrorMessage = (actual, path, ast) => getErrorMessage(\"Unexpected Error\", `Cannot find a matching schema for ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatUnknown(actual)}`, path, ast);\n// ---------------------------------------------\n// Schema\n// ---------------------------------------------\n/** @internal */\nconst getSchemaExtendErrorMessage = (x, y, path) => getErrorMessage(\"Unsupported schema or overlapping types\", `cannot extend ${x} with ${y}`, path);\n/** @internal */\nconst getSchemaUnsupportedLiteralSpanErrorMessage = ast => getErrorMessage(\"Unsupported template literal span\", undefined, undefined, ast);\n// ---------------------------------------------\n// AST\n// ---------------------------------------------\n/** @internal */\nconst getASTUnsupportedSchema = ast => getUnsupportedSchemaErrorMessage(undefined, undefined, ast);\n/** @internal */\nconst getASTUnsupportedKeySchema = ast => getErrorMessage(\"Unsupported key schema\", undefined, undefined, ast);\n/** @internal */\nconst getASTUnsupportedLiteral = literal => getErrorMessage(\"Unsupported literal\", `literal value: ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatUnknown(literal)}`);\n/** @internal */\nconst getASTDuplicateIndexSignatureErrorMessage = type => getErrorMessage(\"Duplicate index signature\", `${type} index signature`);\n/** @internal */\nconst getASTIndexSignatureParameterErrorMessage = /*#__PURE__*/getErrorMessage(\"Unsupported index signature parameter\", \"An index signature parameter type must be `string`, `symbol`, a template literal type or a refinement of the previous types\");\n/** @internal */\nconst getASTRequiredElementFollowinAnOptionalElementErrorMessage = /*#__PURE__*/getErrorMessage(\"Invalid element\", \"A required element cannot follow an optional element. ts(1257)\");\n/** @internal */\nconst getASTDuplicatePropertySignatureTransformationErrorMessage = key => getErrorMessage(\"Duplicate property signature transformation\", `Duplicate key ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatUnknown(key)}`);\n/** @internal */\nconst getASTUnsupportedRenameSchema = ast => getUnsupportedSchemaErrorMessage(undefined, undefined, ast);\n/** @internal */\nconst getASTDuplicatePropertySignatureErrorMessage = key => getErrorMessage(\"Duplicate property signature\", `Duplicate key ${_util_js__WEBPACK_IMPORTED_MODULE_1__.formatUnknown(key)}`);\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/filters.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/filters.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetweenBigintTypeId: () => (/* binding */ BetweenBigintTypeId),\n/* harmony export */   BetweenTypeId: () => (/* binding */ BetweenTypeId),\n/* harmony export */   GreaterThanBigintTypeId: () => (/* binding */ GreaterThanBigintTypeId),\n/* harmony export */   GreaterThanOrEqualToBigIntTypeId: () => (/* binding */ GreaterThanOrEqualToBigIntTypeId),\n/* harmony export */   GreaterThanOrEqualToTypeId: () => (/* binding */ GreaterThanOrEqualToTypeId),\n/* harmony export */   GreaterThanTypeId: () => (/* binding */ GreaterThanTypeId),\n/* harmony export */   IntTypeId: () => (/* binding */ IntTypeId),\n/* harmony export */   ItemsCountTypeId: () => (/* binding */ ItemsCountTypeId),\n/* harmony export */   LengthTypeId: () => (/* binding */ LengthTypeId),\n/* harmony export */   LessThanBigIntTypeId: () => (/* binding */ LessThanBigIntTypeId),\n/* harmony export */   LessThanOrEqualToBigIntTypeId: () => (/* binding */ LessThanOrEqualToBigIntTypeId),\n/* harmony export */   LessThanOrEqualToTypeId: () => (/* binding */ LessThanOrEqualToTypeId),\n/* harmony export */   LessThanTypeId: () => (/* binding */ LessThanTypeId),\n/* harmony export */   MaxItemsTypeId: () => (/* binding */ MaxItemsTypeId),\n/* harmony export */   MaxLengthTypeId: () => (/* binding */ MaxLengthTypeId),\n/* harmony export */   MinItemsTypeId: () => (/* binding */ MinItemsTypeId),\n/* harmony export */   MinLengthTypeId: () => (/* binding */ MinLengthTypeId),\n/* harmony export */   ParseJsonTypeId: () => (/* binding */ ParseJsonTypeId)\n/* harmony export */ });\n/** @internal */\nconst GreaterThanTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThan\");\n/** @internal */\nconst GreaterThanOrEqualToTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualTo\");\n/** @internal */\nconst LessThanTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThan\");\n/** @internal */\nconst LessThanOrEqualToTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualTo\");\n/** @internal */\nconst IntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Int\");\n/** @internal */\nconst BetweenTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Between\");\n/** @internal */\nconst GreaterThanBigintTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanBigint\");\n/** @internal */\nconst GreaterThanOrEqualToBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToBigint\");\n/** @internal */\nconst LessThanBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanBigint\");\n/** @internal */\nconst LessThanOrEqualToBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToBigint\");\n/** @internal */\nconst BetweenBigintTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenBigint\");\n/** @internal */\nconst MinLengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MinLength\");\n/** @internal */\nconst MaxLengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MaxLength\");\n/** @internal */\nconst LengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Length\");\n/** @internal */\nconst MinItemsTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MinItems\");\n/** @internal */\nconst MaxItemsTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MaxItems\");\n/** @internal */\nconst ItemsCountTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ItemsCount\");\n/** @internal */\nconst ParseJsonTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ParseJson\");\n//# sourceMappingURL=filters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVmZmVjdCtzY2hlbWFAMC42OC4xMl9lZmZlY3RAMy40LjUvbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL2ludGVybmFsL2ZpbHRlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZXN0b3ItY29udmlkYWRvcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZWZmZWN0K3NjaGVtYUAwLjY4LjEyX2VmZmVjdEAzLjQuNS9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvZmlsdGVycy5qcz8xMzRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhblR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJUaGFuT3JFcXVhbFRvVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvR3JlYXRlclRoYW5PckVxdWFsVG9cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTGVzc1RoYW5UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbk9yRXF1YWxUb1R5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0xlc3NUaGFuT3JFcXVhbFRvXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEludFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0ludFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBCZXR3ZWVuVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvQmV0d2VlblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhbkJpZ2ludFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuQmlnaW50XCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJUaGFuT3JFcXVhbFRvQmlnSW50VHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvR3JlYXRlclRoYW5PckVxdWFsVG9CaWdpbnRcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTGVzc1RoYW5CaWdJbnRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhbkJpZ2ludFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbk9yRXF1YWxUb0JpZ0ludFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0xlc3NUaGFuT3JFcXVhbFRvQmlnaW50XCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IEJldHdlZW5CaWdpbnRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9CZXR3ZWVuQmlnaW50XCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE1pbkxlbmd0aFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL01pbkxlbmd0aFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBNYXhMZW5ndGhUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9NYXhMZW5ndGhcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTGVuZ3RoVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTGVuZ3RoXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE1pbkl0ZW1zVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTWluSXRlbXNcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTWF4SXRlbXNUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9NYXhJdGVtc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBJdGVtc0NvdW50VHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvSXRlbXNDb3VudFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBQYXJzZUpzb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9QYXJzZUpzb25cIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/filters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/serializable.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/serializable.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   symbolResult: () => (/* binding */ symbolResult)\n/* harmony export */ });\n/** @internal */\nconst symbol = /*#__PURE__*/Symbol.for(\"@effect/schema/Serializable/symbol\");\n/** @internal */\nconst symbolResult = /*#__PURE__*/Symbol.for(\"@effect/schema/Serializable/symbolResult\");\n//# sourceMappingURL=serializable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVmZmVjdCtzY2hlbWFAMC42OC4xMl9lZmZlY3RAMy40LjUvbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL2ludGVybmFsL3NlcmlhbGl6YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ087QUFDUDtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZXN0b3ItY29udmlkYWRvcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZWZmZWN0K3NjaGVtYUAwLjY4LjEyX2VmZmVjdEAzLjQuNS9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvc2VyaWFsaXphYmxlLmpzPzhiNDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHN5bWJvbCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvU2VyaWFsaXphYmxlL3N5bWJvbFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBzeW1ib2xSZXN1bHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1NlcmlhbGl6YWJsZS9zeW1ib2xSZXN1bHRcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJpYWxpemFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatPath: () => (/* binding */ formatPath),\n/* harmony export */   formatPathKey: () => (/* binding */ formatPathKey),\n/* harmony export */   formatPropertyKey: () => (/* binding */ formatPropertyKey),\n/* harmony export */   formatUnknown: () => (/* binding */ formatUnknown),\n/* harmony export */   getKeysForIndexSignature: () => (/* binding */ getKeysForIndexSignature),\n/* harmony export */   isNonEmpty: () => (/* binding */ isNonEmpty),\n/* harmony export */   isSingle: () => (/* binding */ isSingle),\n/* harmony export */   memoizeThunk: () => (/* binding */ memoizeThunk),\n/* harmony export */   ownKeys: () => (/* binding */ ownKeys)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/.pnpm/effect@3.4.5/node_modules/effect/dist/esm/Predicate.js\");\n\n\n/** @internal */\nconst getKeysForIndexSignature = (input, parameter) => {\n  switch (parameter._tag) {\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n      return Object.keys(input);\n    case \"SymbolKeyword\":\n      return Object.getOwnPropertySymbols(input);\n    case \"Refinement\":\n      return getKeysForIndexSignature(input, parameter.from);\n  }\n};\n/** @internal */\nconst ownKeys = o => Object.keys(o).concat(Object.getOwnPropertySymbols(o));\n/** @internal */\nconst memoizeThunk = f => {\n  let done = false;\n  let a;\n  return () => {\n    if (done) {\n      return a;\n    }\n    a = f();\n    done = true;\n    return a;\n  };\n};\n/** @internal */\nconst formatUnknown = u => {\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString(u)) {\n    return JSON.stringify(u);\n  } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNumber(u) || u == null || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBoolean(u) || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isSymbol(u) || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isDate(u)) {\n    return String(u);\n  } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBigInt(u)) {\n    return String(u) + \"n\";\n  } else if (!effect_Array__WEBPACK_IMPORTED_MODULE_1__.isArray(u) && effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.hasProperty(u, \"toString\") && effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isFunction(u[\"toString\"]) && u[\"toString\"] !== Object.prototype.toString) {\n    return u[\"toString\"]();\n  }\n  try {\n    JSON.stringify(u);\n    if (effect_Array__WEBPACK_IMPORTED_MODULE_1__.isArray(u)) {\n      return `[${u.map(formatUnknown).join(\",\")}]`;\n    } else {\n      return `{${ownKeys(u).map(k => `${effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString(k) ? JSON.stringify(k) : String(k)}:${formatUnknown(u[k])}`).join(\",\")}}`;\n    }\n  } catch (e) {\n    return String(u);\n  }\n};\n/** @internal */\nconst formatPropertyKey = name => typeof name === \"string\" ? JSON.stringify(name) : String(name);\n/** @internal */\nconst isNonEmpty = x => Array.isArray(x);\n/** @internal */\nconst isSingle = x => !Array.isArray(x);\n/** @internal */\nconst formatPathKey = key => `[${formatPropertyKey(key)}]`;\n/** @internal */\nconst formatPath = path => isNonEmpty(path) ? path.map(formatPathKey).join(\"\") : formatPathKey(path);\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVmZmVjdCtzY2hlbWFAMC42OC4xMl9lZmZlY3RAMy40LjUvbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL2ludGVybmFsL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDTztBQUM5QztBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsTUFBTSxzREFBa0I7QUFDeEI7QUFDQSxJQUFJLFNBQVMsc0RBQWtCLG9CQUFvQix1REFBbUIsT0FBTyxzREFBa0IsT0FBTyxvREFBZ0I7QUFDdEg7QUFDQSxJQUFJLFNBQVMsc0RBQWtCO0FBQy9CO0FBQ0EsSUFBSSxVQUFVLGlEQUFjLE9BQU8seURBQXFCLG1CQUFtQix3REFBb0I7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlEQUFjO0FBQ3RCLGlCQUFpQiwrQkFBK0I7QUFDaEQsTUFBTTtBQUNOLGVBQWUsRUFBRSx1QkFBdUIsc0RBQWtCLG9DQUFvQyxHQUFHLG9CQUFvQixjQUFjO0FBQ25JO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ08saUNBQWlDLHVCQUF1QjtBQUMvRDtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZXN0b3ItY29udmlkYWRvcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AZWZmZWN0K3NjaGVtYUAwLjY4LjEyX2VmZmVjdEAzLjQuNS9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvdXRpbC5qcz81NWFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFycmF5XyBmcm9tIFwiZWZmZWN0L0FycmF5XCI7XG5pbXBvcnQgKiBhcyBQcmVkaWNhdGUgZnJvbSBcImVmZmVjdC9QcmVkaWNhdGVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRLZXlzRm9ySW5kZXhTaWduYXR1cmUgPSAoaW5wdXQsIHBhcmFtZXRlcikgPT4ge1xuICBzd2l0Y2ggKHBhcmFtZXRlci5fdGFnKSB7XG4gICAgY2FzZSBcIlN0cmluZ0tleXdvcmRcIjpcbiAgICBjYXNlIFwiVGVtcGxhdGVMaXRlcmFsXCI6XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpO1xuICAgIGNhc2UgXCJTeW1ib2xLZXl3b3JkXCI6XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhpbnB1dCk7XG4gICAgY2FzZSBcIlJlZmluZW1lbnRcIjpcbiAgICAgIHJldHVybiBnZXRLZXlzRm9ySW5kZXhTaWduYXR1cmUoaW5wdXQsIHBhcmFtZXRlci5mcm9tKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBvd25LZXlzID0gbyA9PiBPYmplY3Qua2V5cyhvKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvKSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbWVtb2l6ZVRodW5rID0gZiA9PiB7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIGxldCBhO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChkb25lKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgYSA9IGYoKTtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZXR1cm4gYTtcbiAgfTtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZm9ybWF0VW5rbm93biA9IHUgPT4ge1xuICBpZiAoUHJlZGljYXRlLmlzU3RyaW5nKHUpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHUpO1xuICB9IGVsc2UgaWYgKFByZWRpY2F0ZS5pc051bWJlcih1KSB8fCB1ID09IG51bGwgfHwgUHJlZGljYXRlLmlzQm9vbGVhbih1KSB8fCBQcmVkaWNhdGUuaXNTeW1ib2wodSkgfHwgUHJlZGljYXRlLmlzRGF0ZSh1KSkge1xuICAgIHJldHVybiBTdHJpbmcodSk7XG4gIH0gZWxzZSBpZiAoUHJlZGljYXRlLmlzQmlnSW50KHUpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh1KSArIFwiblwiO1xuICB9IGVsc2UgaWYgKCFhcnJheV8uaXNBcnJheSh1KSAmJiBQcmVkaWNhdGUuaGFzUHJvcGVydHkodSwgXCJ0b1N0cmluZ1wiKSAmJiBQcmVkaWNhdGUuaXNGdW5jdGlvbih1W1widG9TdHJpbmdcIl0pICYmIHVbXCJ0b1N0cmluZ1wiXSAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xuICAgIHJldHVybiB1W1widG9TdHJpbmdcIl0oKTtcbiAgfVxuICB0cnkge1xuICAgIEpTT04uc3RyaW5naWZ5KHUpO1xuICAgIGlmIChhcnJheV8uaXNBcnJheSh1KSkge1xuICAgICAgcmV0dXJuIGBbJHt1Lm1hcChmb3JtYXRVbmtub3duKS5qb2luKFwiLFwiKX1dYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGB7JHtvd25LZXlzKHUpLm1hcChrID0+IGAke1ByZWRpY2F0ZS5pc1N0cmluZyhrKSA/IEpTT04uc3RyaW5naWZ5KGspIDogU3RyaW5nKGspfToke2Zvcm1hdFVua25vd24odVtrXSl9YCkuam9pbihcIixcIil9fWA7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBmb3JtYXRQcm9wZXJ0eUtleSA9IG5hbWUgPT4gdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgPyBKU09OLnN0cmluZ2lmeShuYW1lKSA6IFN0cmluZyhuYW1lKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBpc05vbkVtcHR5ID0geCA9PiBBcnJheS5pc0FycmF5KHgpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzU2luZ2xlID0geCA9PiAhQXJyYXkuaXNBcnJheSh4KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBmb3JtYXRQYXRoS2V5ID0ga2V5ID0+IGBbJHtmb3JtYXRQcm9wZXJ0eUtleShrZXkpfV1gO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdFBhdGggPSBwYXRoID0+IGlzTm9uRW1wdHkocGF0aCkgPyBwYXRoLm1hcChmb3JtYXRQYXRoS2V5KS5qb2luKFwiXCIpIDogZm9ybWF0UGF0aEtleShwYXRoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@effect+schema@0.68.12_effect@3.4.5/node_modules/@effect/schema/dist/esm/internal/util.js\n");

/***/ })

};
;